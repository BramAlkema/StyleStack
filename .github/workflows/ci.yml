name: CI - Build and Validate Templates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-xml:
    name: Lint XML Structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install XML tools
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils
      
      - name: Lint OOXML files
        run: |
          find core/ -name "*.xml" -exec xmllint --noout {} \; || echo "No XML files found yet"

  test-formula-parser:
    name: Test Formula Parser Engine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
      
      - name: Run formula parser tests
        run: |
          echo "üß™ Testing Formula Parser Engine..."
          python -m pytest tests/test_formula_parser.py -v --tb=short --cov=tools.formula_parser --cov-report=term-missing
      
      - name: Test formula parser examples
        run: |
          echo "üìä Testing formula evaluation examples..."
          python -c "
          from tools.formula_parser import FormulaParser
          parser = FormulaParser()
          
          # Test grid system formulas
          context = {
              'SLIDE_W': 12192000, 'SLIDE_H': 6858000,
              'SAFE_L': 1219200, 'SAFE_T': 685800,
              'COL_W': 673100, 'GUT': 152400
          }
          
          test_cases = [
              ('42', 42),
              ('SLIDE_W + SLIDE_H', 12192000 + 6858000),
              ('SAFE_L + (2 - 1) * (COL_W + GUT)', 1219200 + 1 * (673100 + 152400)),
              ('SLIDE_W * 0.1', 1219200.0)
          ]
          
          for expr, expected in test_cases:
              try:
                  ast = parser.parse(expr)
                  result = parser.evaluate(ast, context)
                  print(f'‚úÖ {expr} = {result} (expected: {expected})')
                  assert abs(result - expected) < 1e-6, f'Expected {expected}, got {result}'
              except Exception as e:
                  print(f'‚ùå {expr} failed: {e}')
                  raise
          
          print('üéâ All formula parser examples passed!')
          "
      
      - name: Test formula dependency extraction
        run: |
          echo "üîç Testing dependency extraction..."
          python -c "
          from tools.formula_parser import FormulaParser
          parser = FormulaParser()
          
          test_cases = [
              ('SLIDE_W', {'SLIDE_W'}),
              ('SLIDE_W + SLIDE_H', {'SLIDE_W', 'SLIDE_H'}),
              ('SAFE_L + (col - 1) * (COL_W + GUT)', {'SAFE_L', 'col', 'COL_W', 'GUT'}),
              ('x(col + 1)', {'col'}),
              ('42', set())
          ]
          
          for expr, expected in test_cases:
              deps = parser.extract_dependencies(expr)
              print(f'‚úÖ {expr} -> {deps}')
              assert deps == expected, f'Expected {expected}, got {deps}'
          
          print('üéâ All dependency extraction tests passed!')
          "

  build-templates:
    name: Build Template Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test different layer combinations
        include:
          # Core only
          - layers: "core-only"
            args: "--channel present --products potx"
          # Fork level  
          - layers: "fork"
            args: "--fork enterprise-defaults --channel present --products potx"
          # Full 5-layer stack
          - layers: "full-stack"
            args: "--fork enterprise-defaults --org acme --group marketing --personal john-doe --channel present --products potx"
          # Different channels
          - layers: "doc-channel"
            args: "--org acme --channel doc --products dotx"
          - layers: "finance-channel" 
            args: "--org acme --group finance --channel finance --products xltx"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt yet"
      
      - name: Resolve design tokens
        run: |
          echo "üé® Resolving design tokens for: ${{ matrix.layers }}"
          python tools/token_resolver.py ${{ matrix.args }} --format yaml --output resolved-tokens.yaml --verbose
        continue-on-error: true

      - name: Build templates
        run: |
          # Create build script if it doesn't exist
          if [ ! -f build.py ]; then
            echo "Build script not implemented yet"
            exit 0
          fi
          echo "üì¶ Building templates: ${{ matrix.layers }}"
          python build.py ${{ matrix.args }} --tokens resolved-tokens.yaml --verbose
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: templates-${{ matrix.layers }}
          path: dist/
        if: always()

  validate-quality:
    name: Quality Validation
    runs-on: ubuntu-latest
    needs: build-templates
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install validation tools
        run: |
          python -m pip install --upgrade pip
          pip install lxml colorama pillow || echo "Installing validation dependencies"
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Run quality checks
        run: |
          # Create validation script if it doesn't exist
          if [ ! -f tools/validate.py ]; then
            echo "Validation not implemented yet - checking for tacky effects manually"
            # Look for banned elements in any XML files
            if find artifacts/ -name "*.xml" -exec grep -l "a:bevel\|a:glow\|a:shadow" {} \; 2>/dev/null; then
              echo "‚ùå Found banned tacky effects!"
              exit 1
            else
              echo "‚úÖ No tacky effects found"
            fi
          else
            python tools/validate.py artifacts/
          fi
        continue-on-error: true
      
      - name: Check accessibility
        run: |
          echo "üîç Checking accessibility compliance..."
          echo "‚úÖ Accessibility validation placeholder - implement contrast checking"
      
      - name: Verify custom properties
        run: |
          echo "üîç Verifying custom properties..."
          echo "‚úÖ Custom property validation placeholder - check for BD_Template, BD_Version, etc."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Scan for secrets
        run: |
          echo "üîç Scanning for potential secrets or API keys..."
          if grep -r -i "api[_-]key\|secret\|password\|token" --exclude-dir=.git --exclude-dir=.github . || true; then
            echo "‚ö†Ô∏è  Potential secrets found - review manually"
          else
            echo "‚úÖ No obvious secrets detected"
          fi
      
      - name: Check for macros
        run: |
          echo "üîç Checking templates contain no executable macros..."
          # Check for actual macro files inside OOXML packages (vbaProject.bin)
          MACRO_FILES=$(find . -name "*.potx" -o -name "*.dotx" -o -name "*.xltx" | xargs -I {} unzip -l {} 2>/dev/null | grep -c "vbaProject.bin" || echo "0")
          if [ "$MACRO_FILES" -gt 0 ]; then
            echo "‚ùå Actual macro files detected in templates!"
            exit 1
          else
            echo "‚úÖ No executable macros found in templates"
          fi