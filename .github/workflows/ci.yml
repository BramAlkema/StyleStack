name: CI - Build and Validate Templates

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - '**.yml'
      - '**.json'
      - 'core/**'
      - 'tools/**'
      - 'requirements.txt'
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.yml'
      - '**.json'
      - 'core/**'
      - 'tools/**'
      - 'requirements.txt'
    paths-ignore:
      - 'docs/**'
      - '**.md'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-xml:
    name: Lint XML Structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: apt-cache-${{ runner.os }}-libxml2-utils
          restore-keys: |
            apt-cache-${{ runner.os }}-
      
      - name: Install XML tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
      
      - name: Lint OOXML files
        run: |
          find core/ -name "*.xml" -exec xmllint --noout {} \; || echo "No XML files found yet"

  test-formula-parser:
    name: Test Formula Parser Engine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install --no-cache-dir pytest pytest-cov
      
      - name: Run formula parser tests
        run: |
          echo "üß™ Testing Formula Parser Engine..."
          python -m pytest tests/test_formula_parser.py -v --tb=short --cov=tools.formula_parser --cov-report=term-missing
      
      - name: Test formula parser examples
        run: |
          echo "üìä Testing formula evaluation examples..."
          python -c "
          from tools.formula_parser import FormulaParser
          parser = FormulaParser()
          
          # Test grid system formulas
          context = {
              'SLIDE_W': 12192000, 'SLIDE_H': 6858000,
              'SAFE_L': 1219200, 'SAFE_T': 685800,
              'COL_W': 673100, 'GUT': 152400
          }
          
          test_cases = [
              ('42', 42),
              ('SLIDE_W + SLIDE_H', 12192000 + 6858000),
              ('SAFE_L + (2 - 1) * (COL_W + GUT)', 1219200 + 1 * (673100 + 152400)),
              ('SLIDE_W * 0.1', 1219200.0)
          ]
          
          for expr, expected in test_cases:
              try:
                  ast = parser.parse(expr)
                  result = parser.evaluate(ast, context)
                  print(f'‚úÖ {expr} = {result} (expected: {expected})')
                  assert abs(result - expected) < 1e-6, f'Expected {expected}, got {result}'
              except Exception as e:
                  print(f'‚ùå {expr} failed: {e}')
                  raise
          
          print('üéâ All formula parser examples passed!')
          "
      
      - name: Test formula dependency extraction
        run: |
          echo "üîç Testing dependency extraction..."
          python -c "
          from tools.formula_parser import FormulaParser
          parser = FormulaParser()
          
          test_cases = [
              ('SLIDE_W', {'SLIDE_W'}),
              ('SLIDE_W + SLIDE_H', {'SLIDE_W', 'SLIDE_H'}),
              ('SAFE_L + (col - 1) * (COL_W + GUT)', {'SAFE_L', 'col', 'COL_W', 'GUT'}),
              ('x(col + 1)', {'col'}),
              ('42', set())
          ]
          
          for expr, expected in test_cases:
              deps = parser.extract_dependencies(expr)
              print(f'‚úÖ {expr} -> {deps}')
              assert deps == expected, f'Expected {expected}, got {deps}'
          
          print('üéâ All dependency extraction tests passed!')
          "

  test-emu-type-system:
    name: Test EMU Type System
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install --no-cache-dir pytest pytest-cov
      
      - name: Run EMU type system tests
        run: |
          echo "üßÆ Testing EMU Type System..."
          python -m pytest tests/test_emu_type_system.py -v --tb=short --cov=tools.emu_types --cov-report=term-missing
      
      - name: Test EMU conversions
        run: |
          echo "üìè Testing unit conversions..."
          python -c "
          from tools.emu_types import EMUValue, inches_to_emu, points_to_emu, cm_to_emu
          
          # Test standard conversions
          one_inch = inches_to_emu(1.0)
          print(f'‚úÖ 1 inch = {one_inch.value} EMU')
          assert one_inch.value == 914400
          
          seventy_two_points = points_to_emu(72.0)  # 1 inch
          print(f'‚úÖ 72 points = {seventy_two_points.value} EMU')
          assert seventy_two_points.value == 914400
          
          one_cm = cm_to_emu(1.0)
          print(f'‚úÖ 1 cm = {one_cm.value} EMU')
          assert one_cm.value == 360000
          
          print('üéâ All unit conversions passed!')
          "
      
      - name: Test EMU arithmetic operations
        run: |
          echo "‚ûï Testing EMU arithmetic..."
          python -c "
          from tools.emu_types import EMUValue
          
          # Test arithmetic operations
          a = EMUValue(1000000)
          b = EMUValue(500000)
          
          # Addition
          result = a + b
          print(f'‚úÖ {a.value} + {b.value} = {result.value}')
          assert result.value == 1500000
          
          # Subtraction  
          result = a - b
          print(f'‚úÖ {a.value} - {b.value} = {result.value}')
          assert result.value == 500000
          
          # Multiplication
          result = a * 2
          print(f'‚úÖ {a.value} * 2 = {result.value}')
          assert result.value == 2000000
          
          # Division
          result = a / 2
          print(f'‚úÖ {a.value} / 2 = {result.value}')
          assert result.value == 500000
          
          print('üéâ All EMU arithmetic operations passed!')
          "
      
      - name: Test Point and Rectangle classes
        run: |
          echo "üìê Testing Point and Rectangle classes..."
          python -c "
          from tools.emu_types import Point, Rectangle, EMUValue
          
          # Test Point operations
          p1 = Point(100000, 200000)
          p2 = Point(50000, 75000)
          
          result = p1 + p2
          print(f'‚úÖ Point addition: ({result.x.value}, {result.y.value})')
          assert result.x.value == 150000 and result.y.value == 275000
          
          # Test Rectangle operations
          rect = Rectangle(100000, 200000, 300000, 400000)
          print(f'‚úÖ Rectangle: {rect.x.value}, {rect.y.value}, {rect.width.value} √ó {rect.height.value}')
          
          # Test center calculation
          center = rect.center()
          print(f'‚úÖ Rectangle center: ({center.x.value}, {center.y.value})')
          assert center.x.value == 250000 and center.y.value == 400000
          
          # Test OOXML output
          ooxml = rect.to_ooxml()
          expected = {'x': '100000', 'y': '200000', 'cx': '300000', 'cy': '400000'}
          print(f'‚úÖ OOXML output: {ooxml}')
          assert ooxml == expected
          
          print('üéâ All Point and Rectangle tests passed!')
          "

  test-variable-resolver:
    name: Test Variable Resolution System
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install --no-cache-dir pytest pytest-cov
      
      - name: Run Variable Resolution System tests
        run: |
          echo "üîß Testing Variable Resolution System..."
          python -m pytest tests/test_formula_variable_resolver.py -v --tb=short --cov=tools.formula_variable_resolver --cov-report=term-missing
      
      - name: Test dependency graph resolution
        run: |
          echo "üìä Testing dependency graph resolution..."
          python -c "
          from tools.formula_variable_resolver import FormulaVariableResolver
          
          # Test complex dependency resolution
          resolver = FormulaVariableResolver()
          
          # Core design system variables
          core_vars = {
              'SLIDE_W': 12192000,  # 13.33 inches in EMU
              'SLIDE_H': 6858000,   # 7.5 inches in EMU
              'SAFE_L': 1219200,    # Left safe margin
              'SAFE_T': 685800,     # Top safe margin
              'COL_W': 673100,      # Column width
              'GUT': 152400,        # Gutter width
              'GRID_X': 'SAFE_L + (col - 1) * (COL_W + GUT)',  # Grid position formula
              'GRID_W': 'span * COL_W + (span - 1) * GUT'      # Grid width formula
          }
          resolver.add_layer('core', core_vars)
          
          # Test resolution with different column values
          test_cases = [
              ({'col': 1, 'span': 1}, 'GRID_X', 1219200),  # First column
              ({'col': 2, 'span': 1}, 'GRID_X', 1219200 + (673100 + 152400)),  # Second column  
              ({'col': 1, 'span': 2}, 'GRID_W', 673100 * 2 + 152400),  # Two columns
              ({'col': 3, 'span': 3}, 'GRID_W', 673100 * 3 + 152400 * 2)  # Three columns
          ]
          
          for context, var_name, expected in test_cases:
              # Clear cache before each test to avoid interference
              resolver.invalidate_cache()
              result = resolver.resolve_variable(var_name, context)
              print(f'‚úÖ {var_name} with {context} = {result} (expected: {expected})')
              
              # Debug information if test fails
              if result != expected:
                  print(f'‚ùå Test failed! Debug info:')
                  print(f'   Variable definition: {resolver.get_variable_definition(var_name)}')
                  print(f'   Context: {context}')
                  print(f'   Result: {result}')
                  print(f'   Expected: {expected}')
              
              assert result == expected, f'Expected {expected}, got {result}'
          
          print('üéâ All dependency resolution tests passed!')
          "
      
      - name: Test hierarchical layer resolution
        run: |
          echo "üèóÔ∏è Testing hierarchical layer resolution..."
          python -c "
          from tools.formula_variable_resolver import FormulaVariableResolver
          
          resolver = FormulaVariableResolver()
          
          # Core layer - baseline defaults
          resolver.add_layer('core', {
              'PRIMARY_COLOR': '#0066CC',
              'MARGIN': 20,
              'TITLE_SIZE': 'MARGIN * 2'
          })
          
          # Org layer - corporate overrides
          resolver.add_layer('org', {
              'PRIMARY_COLOR': '#FF6600',  # Override color
              'LOGO_SIZE': 'MARGIN * 3'    # Add new variable
          })
          
          # Channel layer - template flavor
          resolver.add_layer('channel', {
              'MARGIN': 30,  # Override margin (affects TITLE_SIZE and LOGO_SIZE)
          })
          
          # Resolve all variables
          results = resolver.resolve_all()
          
          # Verify layer precedence
          assert results['PRIMARY_COLOR'] == '#FF6600', 'Org layer should override core'
          assert results['MARGIN'] == 30, 'Channel layer should override core and org'
          assert results['TITLE_SIZE'] == 60, 'Formula should use latest MARGIN value'
          assert results['LOGO_SIZE'] == 90, 'Formula should use latest MARGIN value'
          
          print('‚úÖ Core variables:', {k: v for k, v in results.items() if k in ['PRIMARY_COLOR', 'MARGIN']})
          print('‚úÖ Computed variables:', {k: v for k, v in results.items() if k in ['TITLE_SIZE', 'LOGO_SIZE']})
          print('üéâ All hierarchical resolution tests passed!')
          "
      
      - name: Test circular dependency detection
        run: |
          echo "üîÑ Testing circular dependency detection..."
          python -c "
          from tools.formula_variable_resolver import FormulaVariableResolver, CircularDependencyError
          
          resolver = FormulaVariableResolver()
          
          # Simple circular dependency
          resolver.add_layer('core', {
              'A': 'B + 1',
              'B': 'A + 1'
          })
          
          try:
              resolver.resolve_variable('A')
              assert False, 'Should have detected circular dependency'
          except CircularDependencyError as e:
              print(f'‚úÖ Detected simple circular dependency: {e}')
          
          # Complex circular dependency
          resolver = FormulaVariableResolver()
          resolver.add_layer('core', {
              'X': 'Y * 2',
              'Y': 'Z + 5', 
              'Z': 'X / 3'
          })
          
          try:
              resolver.resolve_variable('X')
              assert False, 'Should have detected complex circular dependency'
          except CircularDependencyError as e:
              print(f'‚úÖ Detected complex circular dependency: {e}')
          
          print('üéâ All circular dependency detection tests passed!')
          "
      
      - name: Test cache invalidation
        run: |
          echo "üíæ Testing cache invalidation..."
          python -c "
          from tools.formula_variable_resolver import FormulaVariableResolver
          
          resolver = FormulaVariableResolver()
          resolver.add_layer('core', {
              'BASE': 100,
              'DERIVED_A': 'BASE * 2',
              'DERIVED_B': 'BASE * 3', 
              'INDEPENDENT': 500
          })
          
          # Resolve all to populate cache
          results = resolver.resolve_all()
          assert len(resolver.resolved_cache) == 4
          print(f'‚úÖ Initial cache size: {len(resolver.resolved_cache)}')
          
          # Invalidate BASE - should clear BASE, DERIVED_A, DERIVED_B but not INDEPENDENT
          resolver.invalidate_cache({'BASE'})
          
          # Check cache state
          cached_vars = set(resolver.resolved_cache.keys())
          expected_cached = {'INDEPENDENT'}
          assert cached_vars == expected_cached, f'Expected {expected_cached}, got {cached_vars}'
          
          print(f'‚úÖ Cache after invalidation: {cached_vars}')
          print('üéâ All cache invalidation tests passed!')
          "

  build-templates:
    name: Build Template Matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Test different layer combinations
        include:
          # Core only
          - layers: "core-only"
            args: "--channel present --products potx"
          # Fork level  
          - layers: "fork"
            args: "--fork enterprise-defaults --channel present --products potx"
          # Full 5-layer stack
          - layers: "full-stack"
            args: "--fork enterprise-defaults --org acme --group marketing --personal john-doe --channel present --products potx"
          # Different channels
          - layers: "doc-channel"
            args: "--org acme --channel doc --products dotx"
          - layers: "finance-channel" 
            args: "--org acme --group finance --channel finance --products xltx"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install --no-cache-dir -r requirements.txt || echo "No requirements.txt yet"
      
      - name: Resolve design tokens
        run: |
          echo "üé® Resolving design tokens for: ${{ matrix.layers }}"
          python tools/token_resolver.py ${{ matrix.args }} --format json --output resolved-tokens.json --verbose
        continue-on-error: true

      - name: Build templates
        run: |
          # Create build script if it doesn't exist
          if [ ! -f build.py ]; then
            echo "Build script not implemented yet"
            exit 0
          fi
          echo "üì¶ Building templates: ${{ matrix.layers }}"
          python build.py ${{ matrix.args }} --tokens resolved-tokens.json --verbose
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: templates-${{ matrix.layers }}
          path: dist/
        if: always()

  validate-quality:
    name: Quality Validation
    runs-on: ubuntu-latest
    needs: build-templates
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install validation tools
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install --no-cache-dir lxml colorama pillow || echo "Installing validation dependencies"
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Run quality checks
        run: |
          # Create validation script if it doesn't exist
          if [ ! -f tools/validate.py ]; then
            echo "Validation not implemented yet - checking for tacky effects manually"
            # Look for banned elements in any XML files
            if find artifacts/ -name "*.xml" -exec grep -l "a:bevel\|a:glow\|a:shadow" {} \; 2>/dev/null; then
              echo "‚ùå Found banned tacky effects!"
              exit 1
            else
              echo "‚úÖ No tacky effects found"
            fi
          else
            python tools/validate.py artifacts/
          fi
        continue-on-error: true
      
      - name: Check accessibility
        run: |
          echo "üîç Checking accessibility compliance..."
          echo "‚úÖ Accessibility validation placeholder - implement contrast checking"
      
      - name: Verify custom properties
        run: |
          echo "üîç Verifying custom properties..."
          echo "‚úÖ Custom property validation placeholder - check for BD_Template, BD_Version, etc."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Scan for secrets
        run: |
          echo "üîç Scanning for potential secrets or API keys..."
          if grep -r -i "api[_-]key\|secret\|password\|token" --exclude-dir=.git --exclude-dir=.github . || true; then
            echo "‚ö†Ô∏è  Potential secrets found - review manually"
          else
            echo "‚úÖ No obvious secrets detected"
          fi
      
      - name: Check for macros
        run: |
          echo "üîç Checking templates contain no executable macros..."
          # Check for actual macro files inside OOXML packages (vbaProject.bin)
          MACRO_FILES=$(find . -name "*.potx" -o -name "*.dotx" -o -name "*.xltx" | xargs -I {} unzip -l {} 2>/dev/null | grep -c "vbaProject.bin" || echo "0")
          if [ "$MACRO_FILES" -gt 0 ]; then
            echo "‚ùå Actual macro files detected in templates!"
            exit 1
          else
            echo "‚úÖ No executable macros found in templates"
          fi