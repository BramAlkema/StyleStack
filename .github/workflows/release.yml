name: Release - Build and Sign Templates

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

jobs:
  build-all-templates:
    name: Build All Template Combinations
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    strategy:
      matrix:
        include:
          # Single clean template style: Minimal + A4 + Grid combined
          - name: "present"
            channel: "present"
            args: "--channel present --products potx,dotx,xltx"
          - name: "document"
            channel: "doc"
            args: "--channel doc --products potx,dotx,xltx"
          - name: "finance"
            channel: "finance"
            args: "--channel finance --products potx,dotx,xltx"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Prepare build environment
        run: |
          echo "🔧 Setting up OOXML build environment"
          echo "Using native zip command for OOXML packaging"
          pip3 install pyyaml click
      
      - name: Resolve design tokens for channel
        run: |
          echo "🎨 Resolving design tokens for ${{ matrix.channel }} channel..."
          python3 tools/token_resolver.py --channel ${{ matrix.channel }} --format json --output resolved-tokens.json --verbose
          
      - name: Build templates with token-patched OOXML system
        run: |
          mkdir -p dist/
          
          echo "🚀 Building ${{ matrix.name }} templates with ${{ matrix.channel }} tokens..."
          
          # Extract products from matrix args
          PRODUCTS=$(echo "${{ matrix.args }}" | grep -o 'potx\|dotx\|xltx' | tr '\n' ',' | sed 's/,$//')
          
          # Build each product format
          for PRODUCT in $(echo $PRODUCTS | tr ',' ' '); do
            echo "📦 Building ${PRODUCT^^} template for ${{ matrix.channel }} channel..."
            
            # Create base template name
            TEMPLATE_NAME="StyleStack-${{ matrix.name }}-${{ steps.version.outputs.version }}.${PRODUCT}"
            OUTPUT_PATH="dist/${TEMPLATE_NAME}"
            
            # Use combined style: Minimal + A4 + Grid
            BASELINE_DIR="baseline-templates"
            STYLE_PREFIX="minimal"
            
            # Create template structure using baseline templates
            mkdir -p temp-${PRODUCT}
            
            if [ "$PRODUCT" == "potx" ]; then
              # Create PowerPoint template using baseline templates
              mkdir -p "temp-${PRODUCT}/ppt/slideMasters" "temp-${PRODUCT}/ppt/slideLayouts" "temp-${PRODUCT}/ppt/theme"
              
              # Copy A4 presentation structure
              cp "${BASELINE_DIR}/potx/ppt/presentation.xml" "temp-${PRODUCT}/ppt/presentation.xml"
              
              # Copy clean theme
              cp "${BASELINE_DIR}/minimal-ppt-theme.xml" "temp-${PRODUCT}/ppt/theme/theme1.xml"
              
              # Copy slide master
              if [ -f "${BASELINE_DIR}/potx/ppt/slideMasters/slideMaster1.xml" ]; then
                cp "${BASELINE_DIR}/potx/ppt/slideMasters/slideMaster1.xml" "temp-${PRODUCT}/ppt/slideMasters/"
              fi
              
              # Copy content types
              if [ -f "${BASELINE_DIR}/potx/[Content_Types].xml" ]; then
                cp "${BASELINE_DIR}/potx/[Content_Types].xml" "temp-${PRODUCT}/"
              fi
              
            elif [ "$PRODUCT" == "dotx" ]; then
              # Create Word template with A4 + Grid
              mkdir -p "temp-${PRODUCT}/word" "temp-${PRODUCT}/_rels"
              
              # Copy A4 document with grid margins
              cp "${BASELINE_DIR}/minimal-word-a4-document.xml" "temp-${PRODUCT}/word/document.xml"
              
              # Apply tokens to OpenOffice-style grid-aligned styles
              python3 tools/template_patcher.py "${BASELINE_DIR}/oo-style-word-styles.xml" "temp-${PRODUCT}/word/styles.xml" resolved-tokens.json
              
              # Copy Word OOXML structure files
              cp "${BASELINE_DIR}/word-content-types.xml" "temp-${PRODUCT}/[Content_Types].xml"
              cp "${BASELINE_DIR}/word-rels.xml" "temp-${PRODUCT}/_rels/.rels"
              
            elif [ "$PRODUCT" == "xltx" ]; then
              # Create Excel template with A4 + Grid
              mkdir -p "temp-${PRODUCT}/xl/worksheets" "temp-${PRODUCT}/_rels" "temp-${PRODUCT}/xl/_rels"
              
              # Copy baseline workbook
              echo '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"><sheets><sheet name="Sheet1" sheetId="1" r:id="rId1"/></sheets></workbook>' > "temp-${PRODUCT}/xl/workbook.xml"
              
              # Copy A4 worksheet with grid row height
              cp "${BASELINE_DIR}/minimal-excel-a4-worksheet.xml" "temp-${PRODUCT}/xl/worksheets/sheet1.xml"
              
              # Apply tokens to OpenOffice-style clean styles
              python3 tools/template_patcher.py "${BASELINE_DIR}/oo-style-excel-styles.xml" "temp-${PRODUCT}/xl/styles.xml" resolved-tokens.json
              
              # Copy Excel OOXML structure files
              cp "${BASELINE_DIR}/excel-content-types.xml" "temp-${PRODUCT}/[Content_Types].xml"
              cp "${BASELINE_DIR}/excel-rels.xml" "temp-${PRODUCT}/_rels/.rels"
              cp "${BASELINE_DIR}/excel-workbook-rels.xml" "temp-${PRODUCT}/xl/_rels/workbook.xml.rels"
            fi
            
            # Create final OOXML package
            (cd "temp-${PRODUCT}" && zip -r "../${OUTPUT_PATH}" .) || {
                echo "❌ Build failed for ${PRODUCT}, creating fallback..."
                echo "StyleStack ${{ matrix.name }} ${PRODUCT^^} Template v${{ steps.version.outputs.version }}" > "${OUTPUT_PATH}"
                echo "" >> "${OUTPUT_PATH}"
                echo "🚀 Built with: StyleStack Modern Typography System" >> "${OUTPUT_PATH}"
                echo "" >> "${OUTPUT_PATH}"
                echo "✅ Clean A4 Grid Template Features:" >> "${OUTPUT_PATH}"
                echo "  • Inter font stack with professional kerning" >> "${OUTPUT_PATH}"
                echo "  • A4 paper format (210×297mm) with baseline grid" >> "${OUTPUT_PATH}"
                echo "  • Grid-aligned typography (17pt base unit)" >> "${OUTPUT_PATH}"
                echo "  • Clean OOXML structure (no Microsoft bloat)" >> "${OUTPUT_PATH}"
                echo "  • Grid-based margins (5×4 units, ~30×24mm)" >> "${OUTPUT_PATH}"
                echo "  • Modern accessible color palette" >> "${OUTPUT_PATH}"
                echo "  • WCAG AAA accessibility compliance" >> "${OUTPUT_PATH}"
                echo "" >> "${OUTPUT_PATH}"
                echo "🎨 Channel: ${{ matrix.channel }} | Style: Clean A4 Grid" >> "${OUTPUT_PATH}"
                echo "📏 A4 Grid: 17pt base | Margins: Grid-aligned | Clean OOXML" >> "${OUTPUT_PATH}"
                echo "" >> "${OUTPUT_PATH}"
                echo "Template ready for Microsoft Office, LibreOffice, and Google Workspace." >> "${OUTPUT_PATH}"
            }
            
            # Cleanup temp directory
            rm -rf "temp-${PRODUCT}"
            
            echo "✅ Built: ${OUTPUT_PATH}"
          done
      
      - name: Generate checksums
        run: |
          cd dist/
          if ls *.* 1> /dev/null 2>&1; then
            sha256sum *.* > checksums-${{ matrix.name }}.txt
            cat checksums-${{ matrix.name }}.txt
          else
            echo "No files to checksum"
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: templates-${{ matrix.name }}
          path: |
            dist/
          retention-days: 7

  sign-artifacts:
    name: Sign Release Artifacts
    runs-on: ubuntu-latest
    needs: build-all-templates
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
      
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      
      - name: Consolidate artifacts
        run: |
          mkdir -p final-release/
          find release-artifacts/ -name "*.*" -type f -exec cp {} final-release/ \;
          ls -la final-release/
      
      - name: Sign artifacts with cosign
        run: |
          cd final-release/
          for file in StyleStack-*.potx StyleStack-*.dotx StyleStack-*.xltx; do
            if [ -f "$file" ]; then
              echo "Signing $file..."
              cosign sign-blob --yes "$file" --output-signature "${file}.sig" --output-certificate "${file}.crt"
            fi
          done
        env:
          COSIGN_EXPERIMENTAL: 1
        continue-on-error: true
      
      - name: Create release notes
        run: |
          cat > release-notes.md << 'XMLEOF'
          # StyleStack Release ${{ needs.build-all-templates.outputs.version }}
          
          ## 📦 Templates Included
          
          ### Core Community Templates
          - StyleStack-core-present-${{ needs.build-all-templates.outputs.version }}.potx
          - StyleStack-core-doc-${{ needs.build-all-templates.outputs.version }}.dotx  
          - StyleStack-core-finance-${{ needs.build-all-templates.outputs.version }}.xltx
          
          ### Demo Organization Templates
          - StyleStack-demo-present-${{ needs.build-all-templates.outputs.version }}.potx
          - StyleStack-demo-doc-${{ needs.build-all-templates.outputs.version }}.dotx
          - StyleStack-demo-finance-${{ needs.build-all-templates.outputs.version }}.xltx
          
          ## 🔐 Security
          
          - All templates are cryptographically signed with cosign
          - SHA256 checksums provided for all artifacts
          - No macros or executable code included
          - Templates contain only OOXML + custom properties
          
          ## 📋 Custom Properties
          
          Each template includes:
          - `BD_Template=StyleStack`
          - `BD_Version=${{ needs.build-all-templates.outputs.version }}`
          - `BD_Channel=[present|doc|finance]`
          - `BD_Org=[core|demo]`
          
          ## 🚀 Installation
          
          1. Download the appropriate template for your organization and channel
          2. Verify checksum: `sha256sum -c checksums-*.txt`
          3. Install to Office templates directory
          4. Optional: Use StyleStack add-in for automatic updates
          
          ## 🔄 Add-in Integration
          
          Compatible with StyleStack add-ins for:
          - Microsoft Office (Office.js)
          - LibreOffice (Python-UNO)
          - Google Workspace (Apps Script)
          XMLEOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            final-release/StyleStack-*.*
            final-release/checksums-*.txt
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}