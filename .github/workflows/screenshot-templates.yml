name: Screenshot Office Templates

on:
  workflow_dispatch:
    inputs:
      template_file:
        description: 'Template file to screenshot (e.g., presentation.pptx, document.docx, spreadsheet.xlsx)'
        required: true
        default: 'test-baseline.potx'
  push:
    paths:
      - '**.pptx'
      - '**.potx'
      - '**.docx'
      - '**.dotx'
      - '**.xlsx'
      - '**.xltx'
  pull_request:
    paths:
      - '**.pptx'
      - '**.potx'
      - '**.docx'
      - '**.dotx'
      - '**.xlsx'
      - '**.xltx'

jobs:
  screenshot-libreoffice:
    name: Generate Screenshots via LibreOffice
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          # Install LibreOffice headless
          sudo apt-get update
          sudo apt-get install -y libreoffice
          
          # Install Python dependencies
          pip install requests pillow PyMuPDF
      
      # Remove Google Cloud authentication - not needed for LibreOffice approach
          
      - name: Find Office files
        id: find-office-files
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "files=${{ github.event.inputs.template_file }}" >> $GITHUB_OUTPUT
          else
            # Find all Office files that changed
            files=$(find . \( -name "*.pptx" -o -name "*.potx" -o -name "*.docx" -o -name "*.dotx" -o -name "*.xlsx" -o -name "*.xltx" \) | head -10 | tr '\n' ' ')
            echo "files=${files}" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate screenshots with LibreOffice
        run: |
          # Create LibreOffice screenshot tool
          cat > libreoffice_screenshot.py << 'EOF'
          import os
          import sys
          import subprocess
          import io
          from pathlib import Path
          from PIL import Image
          import fitz  # PyMuPDF
          
          def convert_office_to_screenshots(file_path):
              """Convert Office documents (PPTX, DOCX, XLSX) to screenshots using LibreOffice headless"""
              office_file = Path(file_path)
              if not office_file.exists():
                  print(f"❌ File not found: {file_path}")
                  return False
              
              # Determine file type
              file_ext = office_file.suffix.lower()
              file_types = {
                  '.pptx': '📊 PowerPoint Presentation',
                  '.potx': '📊 PowerPoint Template', 
                  '.docx': '📄 Word Document',
                  '.dotx': '📄 Word Template',
                  '.xlsx': '📈 Excel Spreadsheet',
                  '.xltx': '📈 Excel Template'
              }
              
              file_type_name = file_types.get(file_ext, f'📁 Office Document ({file_ext})')
              print(f"📸 Processing: {office_file.name} ({file_type_name})")
              
              # Create output directory
              output_dir = Path(f"{office_file.stem}_screenshots")
              output_dir.mkdir(exist_ok=True)
              
              # Convert Office document to PDF using LibreOffice headless
              pdf_path = output_dir / f"{office_file.stem}.pdf"
              print(f"📄 Converting {file_type_name} to PDF with LibreOffice...")
              
              try:
                  result = subprocess.run([
                      'libreoffice', '--headless', '--convert-to', 'pdf',
                      '--outdir', str(output_dir), str(office_file)
                  ], capture_output=True, text=True, check=True, timeout=120)
                  print(f"✅ PDF created: {pdf_path}")
              except subprocess.CalledProcessError as e:
                  print(f"❌ LibreOffice conversion failed: {e}")
                  print(f"stdout: {e.stdout}")
                  print(f"stderr: {e.stderr}")
                  return False
              except subprocess.TimeoutExpired:
                  print("❌ LibreOffice conversion timed out")
                  return False
              
              # Convert PDF to images using PyMuPDF
              if not pdf_path.exists():
                  print(f"❌ PDF not found: {pdf_path}")
                  return False
              
              print("🖼️ Converting PDF to PNG images...")
              doc = fitz.open(str(pdf_path))
              images = []
              
              for page_num in range(len(doc)):
                  page = doc.load_page(page_num)
                  # High DPI for quality screenshots
                  mat = fitz.Matrix(300/72, 300/72)  # 300 DPI
                  pix = page.get_pixmap(matrix=mat)
                  
                  # Determine naming convention based on file type
                  if file_ext in ['.pptx', '.potx']:
                      page_prefix = "slide"
                      page_label = "slide"
                  elif file_ext in ['.docx', '.dotx']:
                      page_prefix = "page"
                      page_label = "page"
                  elif file_ext in ['.xlsx', '.xltx']:
                      page_prefix = "sheet"
                      page_label = "sheet"
                  else:
                      page_prefix = "page"
                      page_label = "page"
                  
                  # Save individual PNG
                  png_path = output_dir / f"{page_prefix}_{page_num+1:03d}.png"
                  pix.save(str(png_path))
                  print(f"✅ Saved {page_label} {page_num+1}: {png_path}")
                  
                  # Convert to PIL Image for animation
                  img_data = pix.tobytes("png")
                  img = Image.open(io.BytesIO(img_data))
                  images.append(img.convert("RGB"))
              
              doc.close()
              
              # Create animated formats if multiple pages/slides
              if len(images) > 1:
                  # Determine duration based on file type
                  page_duration = 3000 if file_ext in ['.pptx', '.potx'] else 2000  # Slides: 3s, Docs/Sheets: 2s
                  
                  # Animated PNG
                  apng_path = output_dir / f"{office_file.stem}_animated.png"
                  print(f"🎬 Creating animated PNG: {apng_path}")
                  images[0].save(
                      str(apng_path),
                      save_all=True,
                      append_images=images[1:],
                      duration=page_duration,  # File-type specific duration
                      loop=0,
                      format="PNG"
                  )
                  print(f"✅ Animated PNG created: {apng_path}")
                  
                  # Animated WebP
                  webp_path = output_dir / f"{office_file.stem}_animated.webp"
                  print(f"🎬 Creating animated WebP: {webp_path}")
                  images[0].save(
                      str(webp_path),
                      save_all=True,
                      append_images=images[1:],
                      duration=page_duration,  # File-type specific duration
                      loop=0,
                      format="WEBP",
                      lossless=False,
                      quality=85,
                      method=6
                  )
                  print(f"✅ Animated WebP created: {webp_path}")
              
              # Cleanup PDF
              pdf_path.unlink()
              
              print(f"🎉 Generated {len(images)} screenshots + animated formats")
              return True
          
          # Process files from command line
          files = sys.argv[1].split() if len(sys.argv) > 1 else []
          success_count = 0
          
          for file_path in files:
              if os.path.exists(file_path.strip()):
                  print(f"\n" + "="*50)
                  if convert_office_to_screenshots(file_path.strip()):
                      success_count += 1
          
          print(f"\n✅ Successfully processed {success_count}/{len(files)} files")
          EOF
          
          # Run the LibreOffice screenshot tool
          python libreoffice_screenshot.py "${{ steps.find-office-files.outputs.files }}"
      
      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: template-screenshots
          path: |
            *_screenshots/*.png
            *_screenshots/*.webp
          if-no-files-found: warn
      
      - name: Comment on PR with screenshots
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            // Find screenshot directories
            const dirs = await fs.readdir('.');
            const screenshotDirs = dirs.filter(d => d.endsWith('_screenshots'));
            
            if (screenshotDirs.length > 0) {
              let comment = '## 📸 Template Screenshots\n\n';
              
              for (const dir of screenshotDirs) {
                const templateName = dir.replace('_screenshots', '');
                comment += `### ${templateName}\n\n`;
                
                const files = await fs.readdir(dir);
                const pngs = files.filter(f => f.endsWith('.png')).slice(0, 3);
                
                for (const png of pngs) {
                  // In a real workflow, you'd upload these to a CDN or use GitHub's image hosting
                  comment += `- ${png}\n`;
                }
                comment += '\n';
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
      
      - name: Cleanup
        if: always()
        run: |
          # Cleanup temporary files
          rm -f libreoffice_screenshot.py