# Table Implementation Test Drive
# Testing selector registry pattern with complex table structures

# ==============================================================================
# PART 1: SELECTOR REGISTRY FOR TABLES
# ==============================================================================

selectors:
  ns:
    a: "http://schemas.openxmlformats.org/drawingml/2006/main"
    p: "http://schemas.openxmlformats.org/presentationml/2006/main"
    w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main"
    
  # Table-specific element names
  el:
    # PowerPoint table elements
    graphicFrame: { name: "graphicFrame", ns: "$ns.p" }
    graphic: { name: "graphic", ns: "$ns.a" }
    graphicData: { name: "graphicData", ns: "$ns.a" }
    tbl: { name: "tbl", ns: "$ns.a" }
    tblPr: { name: "tblPr", ns: "$ns.a" }
    tblStyle: { name: "tblStyle", ns: "$ns.a" }
    tblGrid: { name: "tblGrid", ns: "$ns.a" }
    gridCol: { name: "gridCol", ns: "$ns.a" }
    tr: { name: "tr", ns: "$ns.a" }
    tc: { name: "tc", ns: "$ns.a" }
    tcPr: { name: "tcPr", ns: "$ns.a" }
    txBody: { name: "txBody", ns: "$ns.a" }
    
    # Word table elements  
    w_tbl: { name: "tbl", ns: "$ns.w" }
    w_tblPr: { name: "tblPr", ns: "$ns.w" }
    w_tblStyle: { name: "tblStyle", ns: "$ns.w" }
    w_tblGrid: { name: "tblGrid", ns: "$ns.w" }
    w_gridCol: { name: "gridCol", ns: "$ns.w" }
    w_tr: { name: "tr", ns: "$ns.w" }
    w_tc: { name: "tc", ns: "$ns.w" }
    w_tcPr: { name: "tcPr", ns: "$ns.w" }
    w_p: { name: "p", ns: "$ns.w" }
    
    # Table style elements
    wholeTbl: { name: "wholeTbl", ns: "$ns.a" }
    band1H: { name: "band1H", ns: "$ns.a" }
    band2H: { name: "band2H", ns: "$ns.a" }
    band1V: { name: "band1V", ns: "$ns.a" }
    band2V: { name: "band2V", ns: "$ns.a" }
    firstRow: { name: "firstRow", ns: "$ns.a" }
    firstCol: { name: "firstCol", ns: "$ns.a" }
    lastRow: { name: "lastRow", ns: "$ns.a" }
    lastCol: { name: "lastCol", ns: "$ns.a" }
    
  attr:
    styleId: "styleId"
    val: "val"
    w: "w"
    h: "h"
    uri: "uri"
    firstRow: "firstRow"
    firstCol: "firstCol"
    bandRow: "bandRow"
    bandCol: "bandCol"
    
  # Reusable XPath patterns for tables
  paths:
    # Find any table in PowerPoint
    ppt_tables: >
      //*[local-name()=$graphicFrame and namespace-uri()=$nsP]
        /*[local-name()=$graphic and namespace-uri()=$nsA]
        /*[local-name()=$graphicData and namespace-uri()=$nsA]
        /*[local-name()=$tbl and namespace-uri()=$nsA]
        
    # Find specific table by style
    ppt_table_by_style: >
      //*[local-name()=$graphicFrame and namespace-uri()=$nsP]
        /*[local-name()=$graphic and namespace-uri()=$nsA]
        /*[local-name()=$graphicData and namespace-uri()=$nsA]
        /*[local-name()=$tbl and namespace-uri()=$nsA]
        [*[local-name()=$tblPr and namespace-uri()=$nsA]
          /*[local-name()=$tblStyle and namespace-uri()=$nsA and @*[local-name()=$styleId]=$tableStyleId]]
          
    # Table grid columns
    ppt_table_grid: >
      //*[local-name()=$tbl and namespace-uri()=$nsA]
        /*[local-name()=$tblGrid and namespace-uri()=$nsA]
        
    # Word tables
    word_tables: >
      //*[local-name()=$w_tbl and namespace-uri()=$nsW]
      
    word_table_style: >
      //*[local-name()=$w_tbl and namespace-uri()=$nsW]
        /*[local-name()=$w_tblPr and namespace-uri()=$nsW]
        /*[local-name()=$w_tblStyle and namespace-uri()=$nsW]/@*[local-name()=$val]

# ==============================================================================
# PART 2: TABLE FRAGMENTS
# ==============================================================================

fragments:
  # PowerPoint table fragment (3x3 example)
  ppt_table_3x3: |
    <p:graphicFrame xmlns:p="{$ns.p}" xmlns:a="{$ns.a}">
      <p:nvGraphicFramePr>
        <p:cNvPr id="{tokens.table.id}" name="{tokens.table.name}"/>
        <p:cNvGraphicFramePr>
          <a:graphicFrameLocks noGrp="1"/>
        </p:cNvGraphicFramePr>
        <p:nvPr/>
      </p:nvGraphicFramePr>
      <p:xfrm>
        <a:off x="{tokens.table.x}" y="{tokens.table.y}"/>
        <a:ext cx="{tokens.table.width}" cy="{tokens.table.height}"/>
      </p:xfrm>
      <a:graphic>
        <a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/table">
          <a:tbl>
            <a:tblPr firstRow="{tokens.table.style.firstRow}" 
                     firstCol="{tokens.table.style.firstCol}"
                     bandRow="{tokens.table.style.bandRow}" 
                     bandCol="{tokens.table.style.bandCol}">
              <a:tblStyle styleId="{tokens.table.style.id}"/>
            </a:tblPr>
            <a:tblGrid>
              <a:gridCol w="{tokens.table.col1.width}"/>
              <a:gridCol w="{tokens.table.col2.width}"/>
              <a:gridCol w="{tokens.table.col3.width}"/>
            </a:tblGrid>
            <!-- Rows will be inserted here -->
          </a:tbl>
        </a:graphicData>
      </a:graphic>
    </p:graphicFrame>
    
  # Single table row fragment
  ppt_table_row: |
    <a:tr xmlns:a="{$ns.a}" h="{tokens.table.row.height}">
      <a:tc>
        <a:tcPr/>
        <a:txBody>
          <a:bodyPr/>
          <a:lstStyle/>
          <a:p>
            <a:r>
              <a:rPr lang="en-US" sz="{tokens.table.cell.fontSize}">
                <a:solidFill>
                  <a:srgbClr val="{tokens.table.cell.textColor}"/>
                </a:solidFill>
              </a:rPr>
              <a:t>{tokens.table.cell1.text}</a:t>
            </a:r>
          </a:p>
        </a:txBody>
      </a:tc>
      <a:tc>
        <a:tcPr/>
        <a:txBody>
          <a:bodyPr/>
          <a:lstStyle/>
          <a:p><a:r><a:t>{tokens.table.cell2.text}</a:t></a:r></a:p>
        </a:txBody>
      </a:tc>
      <a:tc>
        <a:tcPr/>
        <a:txBody>
          <a:bodyPr/>
          <a:lstStyle/>
          <a:p><a:r><a:t>{tokens.table.cell3.text}</a:t></a:r></a:p>
        </a:txBody>
      </a:tc>
    </a:tr>
    
  # Word table fragment
  word_table_3x3: |
    <w:tbl xmlns:w="{$ns.w}">
      <w:tblPr>
        <w:tblStyle w:val="{tokens.table.style.id}"/>
        <w:tblW w:w="{tokens.table.width.twips}" w:type="dxa"/>
        <w:tblLook w:firstRow="{tokens.table.style.firstRow}" 
                   w:firstCol="{tokens.table.style.firstCol}"
                   w:noHBand="{tokens.table.style.noHBand}" 
                   w:noVBand="{tokens.table.style.noVBand}"/>
      </w:tblPr>
      <w:tblGrid>
        <w:gridCol w:w="{tokens.table.col1.width.twips}"/>
        <w:gridCol w:w="{tokens.table.col2.width.twips}"/>
        <w:gridCol w:w="{tokens.table.col3.width.twips}"/>
      </w:tblGrid>
      <!-- Rows will be inserted here -->
    </w:tbl>

# ==============================================================================
# PART 3: TABLE STYLE DEFINITIONS (would go in a separate file)
# ==============================================================================

table_styles:
  modern_grid:
    id: "{B7F9E0FF-B1A1-4E8C-9B52-2A4C7F9CF9F3}"
    name: "Modern Grid"
    
    # Style parts (each can have fill, border, text properties)
    wholeTbl:
      fill: "none"
      borders:
        top: { weight: 1, color: "{tokens.colors.border.light}" }
        bottom: { weight: 1, color: "{tokens.colors.border.light}" }
        left: { weight: 1, color: "{tokens.colors.border.light}" }
        right: { weight: 1, color: "{tokens.colors.border.light}" }
        insideH: { weight: 0.5, color: "{tokens.colors.border.light}" }
        insideV: { weight: 0.5, color: "{tokens.colors.border.light}" }
        
    firstRow:
      fill: "{tokens.colors.accent1}"
      text:
        color: "FFFFFF"
        bold: true
        size: "{tokens.typography.table.header.size}"
        
    band1H:
      fill: "{tokens.colors.background.alt1}"
      
    band2H:
      fill: "{tokens.colors.background.alt2}"

# ==============================================================================
# PART 4: TOKENS FOR TABLE VALUES
# ==============================================================================

tokens:
  table:
    # Layout tokens
    default_width: 9144000  # 10 inches in EMU
    default_height: 4572000  # 5 inches in EMU
    default_x: 457200  # 0.5 inch margin
    default_y: 1524000  # ~1.67 inch from top
    
    # Column widths (proportional)
    col_equal: 3048000  # 1/3 of 10 inches
    col_wide: 4572000   # 50% wider
    col_narrow: 2286000  # 50% narrower
    
    # Row heights
    row_header: 635000  # 0.7 inch
    row_normal: 457200  # 0.5 inch
    row_compact: 304800  # 0.33 inch
    
    # Style tokens
    style:
      id: "ModernGrid"
      firstRow: "1"
      firstCol: "0"
      bandRow: "1"
      bandCol: "0"
      
    # Typography for cells
    cell:
      fontSize: 240  # 12pt in twentieths
      headerFontSize: 280  # 14pt in twentieths
      textColor: "2C3E50"
      headerTextColor: "FFFFFF"

# ==============================================================================
# PART 5: PATCH OPERATIONS USING THE REGISTRY
# ==============================================================================

patches:
  add_modern_table:
    targets:
      # PowerPoint: Add table to slide
      - file: "ppt/slides/slide1.xml"
        vars:
          tableStyleId: "ModernGrid"  # Variable for XPath
        ops:
          # Ensure slide has content area
          - ensurePath:
              xpathRef: "slide_content_area"
              anchorRef: "slide_root"
              fragmentRef: "fragments.content_area"
              
          # Add the table
          - insert:
              xpathRef: "slide_content_area"
              position: "last"
              fragmentRef: "fragments.ppt_table_3x3"
              
          # Add rows to the table
          - insert:
              xpath: >
                (//*[local-name()=$tbl and namespace-uri()=$nsA])[last()]
              position: "last"
              fragmentRef: "fragments.ppt_table_row"
              repeat: 3  # Insert 3 rows
              
      # Word: Add table to document
      - file: "word/document.xml"
        ops:
          # Find or create table insertion point
          - ensurePath:
              xpath: >
                //*[local-name()='body' and namespace-uri()=$nsW]
                /*[local-name()='p' and namespace-uri()=$nsW][last()]
              anchorRef: "document_body"
              fragmentRef: "fragments.paragraph"
              
          # Insert table after last paragraph
          - insert:
              xpath: >
                //*[local-name()='body' and namespace-uri()=$nsW]
                /*[local-name()='p' and namespace-uri()=$nsW][last()]
              position: "after"
              fragmentRef: "fragments.word_table_3x3"

# ==============================================================================
# PART 6: TABLE STYLE DEFINITION IN THEME
# ==============================================================================

table_style_definition:
  # This would need to be added to tableStyles.xml
  targets:
    - file: "ppt/tableStyles.xml"
      ops:
        - ensurePart:
            path: "ppt/tableStyles.xml"
            contentType: "application/vnd.openxmlformats-officedocument.presentationml.tableStyles+xml"
            relFrom: "ppt/_rels/presentation.xml.rels"
            relId: "rIdTableStyles"
            relType: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/tableStyles"
            xml: |
              <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
              <a:tblStyleLst xmlns:a="{$ns.a}" def="{tokens.table.style.default}">
                <!-- Table styles will be added here -->
              </a:tblStyleLst>
              
        - insert:
            xpath: "//*[local-name()='tblStyleLst']"
            position: "last"
            xml: |
              <a:tblStyle xmlns:a="{$ns.a}" styleId="{tokens.table.style.id}" styleName="{tokens.table.style.name}">
                <a:wholeTbl>
                  <a:tcStyle>
                    <a:fill>
                      <a:noFill/>
                    </a:fill>
                    <a:tcBdr>
                      <a:top>
                        <a:ln w="12700" cmpd="sng">
                          <a:solidFill>
                            <a:schemeClr val="tx1">
                              <a:alpha val="20000"/>
                            </a:schemeClr>
                          </a:solidFill>
                        </a:ln>
                      </a:top>
                      <!-- More borders... -->
                    </a:tcBdr>
                  </a:tcStyle>
                </a:wholeTbl>
                <a:band1H>
                  <a:tcStyle>
                    <a:fill>
                      <a:solidFill>
                        <a:schemeClr val="accent1">
                          <a:alpha val="10000"/>
                        </a:schemeClr>
                      </a:solidFill>
                    </a:fill>
                  </a:tcStyle>
                </a:band1H>
                <!-- More style parts... -->
              </a:tblStyle>

# ==============================================================================
# ANALYSIS: Issues and Complexity Found
# ==============================================================================

issues_discovered:
  
  1_verbose_xpaths:
    problem: "XPath with local-name() and namespace-uri() is extremely verbose"
    example: |
      //*[local-name()=$graphicFrame and namespace-uri()=$nsP]
        /*[local-name()=$graphic and namespace-uri()=$nsA]
        /*[local-name()=$graphicData and namespace-uri()=$nsA]
        /*[local-name()=$tbl and namespace-uri()=$nsA]
    impact: "Hard to read and maintain even with variables"
    
  2_table_style_complexity:
    problem: "Table styles have 9+ parts (wholeTbl, band1H, band2H, firstRow, etc.)"
    details: "Each part can have fill, borders, text effects, spacing"
    impact: "Single table style becomes massive fragment"
    
  3_cross_product_differences:
    problem: "PowerPoint and Word tables are completely different structures"
    powerpoint: "graphicFrame > graphic > graphicData > tbl"
    word: "Just w:tbl directly"
    impact: "Need separate fragments and paths for each product"
    
  4_dynamic_content:
    problem: "Tables have variable rows/columns"
    challenge: "Can't use static fragments for dynamic structures"
    workaround: "Need 'repeat' operation or dynamic fragment generation"
    
  5_style_references:
    problem: "Table styles referenced by GUID in PowerPoint"
    example: "{B7F9E0FF-B1A1-4E8C-9B52-2A4C7F9CF9F3}"
    challenge: "Need to ensure style exists in tableStyles.xml"
    
  6_unit_conversions:
    problem: "Different units for same concept"
    powerpoint: "EMU for dimensions"
    word: "Twips for widths, different for spacing"
    impact: "Need unit conversion in tokens or fragments"
    
  7_fragment_size:
    problem: "Table fragments are huge even for simple 3x3"
    lines: "50+ lines for basic structure"
    cells: "10+ lines per cell with formatting"
    impact: "Fragment library becomes unwieldy"
    
  8_variable_binding_overhead:
    problem: "Need to bind 20+ variables for table operations"
    example: "$graphicFrame, $graphic, $graphicData, $tbl, $tblPr, $tblStyle..."
    impact: "Variable map setup is complex"

# ==============================================================================
# POTENTIAL SOLUTIONS
# ==============================================================================

solutions:
  
  1_xpath_helpers:
    approach: "Create higher-level XPath builder functions"
    example: |
      xpath = build_table_xpath(product="ppt", style="ModernGrid")
    benefit: "Hide local-name() complexity"
    
  2_table_builder:
    approach: "Programmatic table builder instead of fragments"
    api: |
      table = TableBuilder(rows=3, cols=3)
      table.set_style("ModernGrid")
      table.set_cell(0, 0, "Header 1")
      xml = table.to_ooxml("powerpoint")
    benefit: "Dynamic structure generation"
    
  3_style_registry:
    approach: "Separate table style registry with inheritance"
    structure: |
      base_style -> modern_base -> modern_grid
    benefit: "Reuse common style properties"
    
  4_product_adapters:
    approach: "Product-specific adapters hide differences"
    interface: |
      adapter = get_adapter("powerpoint")
      adapter.add_table(slide, table_config)
    benefit: "Abstract away PowerPoint vs Word differences"
    
  5_macro_operations:
    approach: "High-level operations that expand to multiple low-level ops"
    example: |
      - addTable:
          type: "modern_grid"
          rows: 3
          cols: 3
          data: [[...]]
    benefit: "Single operation instead of multiple patches"

# ==============================================================================
# CONCLUSION
# ==============================================================================

verdict:
  
  works_but_complex:
    - "Registry pattern works for tables but reveals complexity"
    - "Variable-driven XPath eliminates hardcoding but is verbose"
    - "Fragments work but become huge for tables"
    
  key_insights:
    - "Tables are fundamentally different between products"
    - "Dynamic structures (variable rows/cols) don't fit fragment model"
    - "Style definitions are complex nested structures themselves"
    - "Need higher-level abstractions over raw patches"
    
  recommendation:
    - "Use registry for simple elements (fonts, colors, spacing)"
    - "Build programmatic generators for complex structures (tables, charts)"
    - "Keep fragments for static structures only"
    - "Layer high-level operations over low-level patches"