{
  "summary": {
    "files_analyzed": 121,
    "total_unused_methods": 254,
    "duplicate_utilities": 0
  },
  "files": [
    {
      "file": "tests/fixtures/advanced_fixtures.py",
      "total_methods": 33,
      "test_methods": 0,
      "fixtures": 0,
      "helper_methods": 9,
      "unused_methods": [
        "sample_design_tokens",
        "mock_ooxml_processor",
        "create_benchmark_data",
        "temp_dir",
        "create_mock_ooxml_processor",
        "performance_monitor",
        "invalidate_fixture_cache",
        "create_performance_monitor",
        "configure_test_environment",
        "integration_environment",
        "benchmark_data",
        "create_mock_template_file",
        "cache_cleanup",
        "create_integration_environment",
        "create_temp_directory",
        "mock_template_file"
      ],
      "imports": [
        "unittest.mock.Mock",
        "hashlib",
        "unittest.mock.patch",
        "typing.List",
        "tempfile",
        "unittest.mock.MagicMock",
        "weakref",
        "threading",
        "json",
        "typing.Dict",
        "typing.Optional",
        "pytest",
        "typing.TypeVar",
        "inspect",
        "collections.defaultdict",
        "pathlib.Path",
        "typing.Union",
        "typing.Any",
        "typing.Generic",
        "shutil",
        "typing.Callable",
        "os",
        "time"
      ],
      "class_methods": {
        "CacheEntry": [
          "__init__",
          "access",
          "cleanup",
          "add_cleanup"
        ],
        "HierarchicalCache": [
          "invalidate_dependents",
          "get_stats",
          "invalidate_scope",
          "__init__",
          "set",
          "get"
        ],
        "FixtureManager": [
          "resolve",
          "__init__",
          "register"
        ]
      }
    },
    {
      "file": "tests/fixtures/ooxml_fixtures.py",
      "total_methods": 29,
      "test_methods": 0,
      "fixtures": 11,
      "helper_methods": 2,
      "unused_methods": [
        "OOXMLTestDataGenerator.generate_large_document_content",
        "powerpoint_document",
        "ooxml_validation_helpers",
        "ooxml_temp_workspace",
        "OOXMLTestDocument.validate_structure",
        "OOXMLTestDataGenerator.generate_structure_variations",
        "validate_ooxml_zip_structure",
        "ooxml_test_data_generator",
        "OOXMLTestDataGenerator.generate_color_variations",
        "OOXMLTestDocument.modify_xml_content",
        "word_document",
        "OOXMLValidationHelpers.validate_namespace_declarations",
        "OOXMLValidationHelpers.validate_xml_structure",
        "all_ooxml_documents",
        "OOXMLValidationHelpers.extract_text_content",
        "OOXMLTestDataGenerator.generate_text_variations",
        "ooxml_namespace_map",
        "extract_and_parse_xml",
        "excel_document",
        "ooxml_xml_samples",
        "create_minimal_ooxml_file",
        "OOXMLValidationHelpers.extract_relationships",
        "ooxml_performance_test_data",
        "OOXMLValidationHelpers.count_elements",
        "corrupted_ooxml_samples",
        "OOXMLTestDocument.get_xml_content"
      ],
      "imports": [
        "tempfile",
        "unittest.mock.MagicMock",
        "zipfile",
        "unittest.mock.Mock",
        "xml.etree.ElementTree",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "typing.Optional",
        "shutil",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {
        "OOXMLTestDocument": [
          "get_xml_content",
          "modify_xml_content",
          "__init__",
          "validate_structure",
          "create_document"
        ],
        "OOXMLValidationHelpers": [
          "extract_relationships",
          "validate_namespace_declarations",
          "count_elements",
          "extract_text_content",
          "validate_xml_structure"
        ],
        "OOXMLTestDataGenerator": [
          "generate_text_variations",
          "generate_color_variations",
          "__init__",
          "generate_large_document_content",
          "generate_structure_variations"
        ]
      }
    },
    {
      "file": "tests/generate_test_structure.py",
      "total_methods": 6,
      "test_methods": 0,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "sys",
        "argparse",
        "re",
        "os",
        "typing.Dict",
        "typing.Set",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {}
    },
    {
      "file": "tests/helpers/patch_helpers.py",
      "total_methods": 5,
      "test_methods": 0,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "create_safe_patch_config"
      ],
      "imports": [
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "class_methods": {}
    },
    {
      "file": "tests/integration/conftest.py",
      "total_methods": 23,
      "test_methods": 4,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "pytest_collection_modifyitems",
        "templates_available",
        "pytest_runtest_teardown",
        "create_template_copy",
        "pytest_runtest_setup",
        "json_processor",
        "sample_json_patches",
        "TestMetrics.start_timing",
        "template_factory",
        "TestMetrics.get_metrics",
        "extract_xml_content",
        "verify_ooxml_structure",
        "pytest_configure",
        "transaction_pipeline",
        "temp_workspace",
        "TestMetrics.record_metric",
        "ooxml_handler",
        "TestMetrics.stop_timing"
      ],
      "imports": [
        "tempfile",
        "sys",
        "tools.transaction_pipeline.TransactionPipeline",
        "zipfile",
        "tools.multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "gc",
        "typing.Any",
        "pytest",
        "typing.Dict",
        "typing.Optional",
        "shutil",
        "logging",
        "pathlib.Path",
        "time"
      ],
      "class_methods": {
        "TestMetrics": [
          "get_metrics",
          "__init__",
          "start_timing",
          "stop_timing",
          "record_metric"
        ]
      }
    },
    {
      "file": "tests/integration/fixtures/create_test_templates.py",
      "total_methods": 4,
      "test_methods": 0,
      "fixtures": 0,
      "helper_methods": 4,
      "unused_methods": [],
      "imports": [
        "zipfile",
        "os",
        "pathlib.Path"
      ],
      "class_methods": {}
    },
    {
      "file": "tests/integration/run_integration_tests.py",
      "total_methods": 9,
      "test_methods": 0,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "IntegrationTestRunner.run_all_tests"
      ],
      "imports": [
        "sys",
        "subprocess",
        "argparse",
        "typing.Any",
        "json",
        "typing.Dict",
        "logging",
        "os",
        "time",
        "pathlib.Path"
      ],
      "class_methods": {
        "IntegrationTestRunner": [
          "generate_summary_report",
          "run_advanced_tests",
          "create_test_templates",
          "run_stress_tests",
          "run_all_tests",
          "check_prerequisites",
          "__init__",
          "run_basic_tests"
        ]
      }
    },
    {
      "file": "tests/integration/test_advanced_integration_scenarios.py",
      "total_methods": 14,
      "test_methods": 6,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [
        "TestAdvancedIntegrationScenarios.setup_method",
        "TestAdvancedIntegrationScenarios.process_template_thread",
        "TestAdvancedIntegrationScenarios.teardown_method"
      ],
      "imports": [
        "multi_format_ooxml_handler.ProcessingResult",
        "lxml.etree",
        "multi_format_ooxml_handler.OOXMLFormat",
        "tools.core.types.PatchResult",
        "typing.List",
        "tempfile",
        "multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "transaction_pipeline.TransactionPipeline",
        "gc",
        "threading",
        "json",
        "typing.Dict",
        "typing.Optional",
        "logging",
        "tools.core.types.JSONPatchProcessor",
        "transaction_pipeline.Transaction",
        "sys",
        "zipfile",
        "tools.handlers.types.OOXMLFormat",
        "pytest",
        "tools.core.types.RecoveryStrategy",
        "pathlib.Path",
        "transaction_pipeline.TransactionState",
        "transaction_pipeline.OperationType",
        "psutil",
        "typing.Any",
        "concurrent.futures",
        "shutil",
        "os",
        "time"
      ],
      "class_methods": {
        "PerformanceMonitor": [
          "__init__",
          "stop",
          "start"
        ],
        "TestAdvancedIntegrationScenarios": [
          "test_memory_management_large_scale_processing",
          "test_format_migration_workflow",
          "test_stress_testing_edge_cases",
          "_create_temp_copy",
          "test_cross_format_batch_processing",
          "test_concurrent_template_processing",
          "create_patches_for_thread",
          "teardown_method",
          "setup_method",
          "process_template_thread",
          "test_production_deployment_simulation"
        ]
      }
    },
    {
      "file": "tests/integration/test_batch_processing_fixed.py",
      "total_methods": 8,
      "test_methods": 2,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "sys",
        "unittest",
        "tools.multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "tools.handlers.types.OOXMLFormat",
        "tests.helpers.patch_helpers.get_format_specific_patches",
        "shutil",
        "pathlib.Path",
        "time",
        "psutil"
      ],
      "class_methods": {
        "PerformanceMonitor": [
          "__init__",
          "stop",
          "start"
        ],
        "TestBatchProcessingFixed": [
          "tearDown",
          "setUp",
          "_create_temp_copy",
          "test_individual_format_processing",
          "test_cross_format_batch_processing_with_correct_patches"
        ]
      }
    },
    {
      "file": "tests/integration/test_design_token_extractor_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestDesignTokenExtractorIntegration.teardown_method",
        "TestDesignTokenExtractorIntegration.setup_method"
      ],
      "imports": [
        "design_token_extractor.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestDesignTokenExtractorIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_e2e_ooxml_processing.py",
      "total_methods": 20,
      "test_methods": 13,
      "fixtures": 0,
      "helper_methods": 5,
      "unused_methods": [
        "TestEndToEndOOXMLProcessing.teardown_method",
        "TestEndToEndOOXMLProcessing.setup_method",
        "TestAtomicOperations.teardown_method",
        "TestAtomicOperations.setup_method"
      ],
      "imports": [
        "multi_format_ooxml_handler.ProcessingResult",
        "token_integration_layer.TokenIntegrationLayer",
        "lxml.etree",
        "tools.core.types.PatchOperationType",
        "multi_format_ooxml_handler.OOXMLFormat",
        "tools.core.types.PatchResult",
        "typing.List",
        "token_integration_layer.TokenScope",
        "tempfile",
        "multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "transaction_pipeline.TransactionPipeline",
        "typing.Dict",
        "token_integration_layer.TokenContext",
        "typing.Optional",
        "logging",
        "tools.core.types.JSONPatchProcessor",
        "transaction_pipeline.Transaction",
        "sys",
        "zipfile",
        "tools.handlers.types.OOXMLFormat",
        "pytest",
        "tools.core.types.RecoveryStrategy",
        "pathlib.Path",
        "transaction_pipeline.TransactionState",
        "transaction_pipeline.OperationType",
        "typing.Any",
        "transaction_pipeline.atomic_ooxml_operation",
        "shutil",
        "os",
        "time"
      ],
      "class_methods": {
        "TestFixtures": [
          "create_temp_copy",
          "verify_ooxml_structure",
          "get_template_path"
        ],
        "TestEndToEndOOXMLProcessing": [
          "test_error_recovery_and_fallback_mechanisms",
          "test_performance_optimization_systems",
          "test_successful_transaction_commit",
          "test_streaming_processing_large_files",
          "test_transaction_pipeline_with_rollback",
          "test_token_integration_with_real_templates",
          "test_validation_mechanisms_output_correctness",
          "test_complete_word_processing_pipeline",
          "test_complete_powerpoint_processing_pipeline",
          "teardown_method",
          "setup_method",
          "test_namespace_handling_complex_scenarios",
          "test_complete_excel_processing_pipeline"
        ],
        "TestAtomicOperations": [
          "test_atomic_ooxml_operation_context_manager",
          "teardown_method",
          "setup_method",
          "test_transaction_audit_trail"
        ]
      }
    },
    {
      "file": "tests/integration/test_formula_parser_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestFormulaParserIntegration.setup_method",
        "TestFormulaParserIntegration.teardown_method"
      ],
      "imports": [
        "formula_parser.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestFormulaParserIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_formula_variable_resolver_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestFormulaVariableResolverIntegration.setup_method",
        "TestFormulaVariableResolverIntegration.teardown_method"
      ],
      "imports": [
        "pytest",
        "pathlib.Path",
        "formula_variable_resolver.*",
        "sys"
      ],
      "class_methods": {
        "TestFormulaVariableResolverIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_import_resolution.py",
      "total_methods": 8,
      "test_methods": 8,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "sys",
        "unittest",
        "tools.processing.json.JSONPatchProcessor",
        "tools.multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "tools.performance.benchmarks.PerformanceBenchmark",
        "importlib.import_module",
        "tools.substitution.types.SubstitutionResult",
        "tools.handlers.types.OOXMLFormat",
        "tools.handlers.types.ProcessingResult",
        "tools.handlers.formats.FormatRegistry",
        "tools.substitution.pipeline.SubstitutionPipeline",
        "tools.xpath.targeting.XPathTargetingSystem",
        "lxml.etree",
        "pathlib.Path",
        "tools.performance.optimizations.PerformanceCache"
      ],
      "class_methods": {
        "TestImportResolution": [
          "test_core_module_imports",
          "test_xpath_targeting_system",
          "test_multi_format_handler_imports",
          "test_substitution_pipeline_interface",
          "test_format_registry_structure",
          "test_performance_module_integration",
          "test_json_patch_processor_interface",
          "test_cross_module_integration"
        ]
      }
    },
    {
      "file": "tests/integration/test_json_patch_parser_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestJsonPatchParserIntegration.setup_method",
        "TestJsonPatchParserIntegration.teardown_method"
      ],
      "imports": [
        "json_patch_parser.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestJsonPatchParserIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_multi_format_ooxml_handler_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestMultiFormatOoxmlHandlerIntegration.setup_method",
        "TestMultiFormatOoxmlHandlerIntegration.teardown_method"
      ],
      "imports": [
        "pytest",
        "pathlib.Path",
        "multi_format_ooxml_handler.*",
        "sys"
      ],
      "class_methods": {
        "TestMultiFormatOoxmlHandlerIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_ooxml_analyzer_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestOoxmlAnalyzerIntegration.setup_method",
        "TestOoxmlAnalyzerIntegration.teardown_method"
      ],
      "imports": [
        "pytest",
        "pathlib.Path",
        "ooxml_analyzer.*",
        "sys"
      ],
      "class_methods": {
        "TestOoxmlAnalyzerIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_ooxml_extension_manager_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestOoxmlExtensionManagerIntegration.setup_method",
        "TestOoxmlExtensionManagerIntegration.teardown_method"
      ],
      "imports": [
        "ooxml_extension_manager.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestOoxmlExtensionManagerIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_ooxml_processor_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestOoxmlProcessorIntegration.setup_method",
        "TestOoxmlProcessorIntegration.teardown_method"
      ],
      "imports": [
        "ooxml_processor.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestOoxmlProcessorIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_optimized_batch_processor_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestOptimizedBatchProcessorIntegration.setup_method",
        "TestOptimizedBatchProcessorIntegration.teardown_method"
      ],
      "imports": [
        "optimized_batch_processor.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestOptimizedBatchProcessorIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_theme_resolver_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestThemeResolverIntegration.teardown_method",
        "TestThemeResolverIntegration.setup_method"
      ],
      "imports": [
        "pytest",
        "pathlib.Path",
        "theme_resolver.*",
        "sys"
      ],
      "class_methods": {
        "TestThemeResolverIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_token_integration_layer_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestTokenIntegrationLayerIntegration.setup_method",
        "TestTokenIntegrationLayerIntegration.teardown_method"
      ],
      "imports": [
        "pytest",
        "pathlib.Path",
        "token_integration_layer.*",
        "sys"
      ],
      "class_methods": {
        "TestTokenIntegrationLayerIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_token_integration_workflows.py",
      "total_methods": 9,
      "test_methods": 5,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestTokenIntegrationWorkflows.teardown_method",
        "TestTokenIntegrationWorkflows.setup_method"
      ],
      "imports": [
        "tempfile",
        "multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "transaction_pipeline.TransactionPipeline",
        "sys",
        "multi_format_ooxml_handler.OOXMLFormat",
        "zipfile",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "transaction_pipeline.OperationType",
        "shutil",
        "logging",
        "os",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestTokenIntegrationWorkflows": [
          "test_corporate_branding_token_workflow",
          "test_error_handling_invalid_tokens",
          "_create_temp_copy",
          "test_production_deployment_with_token_validation",
          "_validate_token_configuration",
          "test_multi_format_token_consistency",
          "teardown_method",
          "setup_method",
          "test_token_formula_evaluation_workflow"
        ]
      }
    },
    {
      "file": "tests/integration/test_token_parser_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestTokenParserIntegration.teardown_method",
        "TestTokenParserIntegration.setup_method"
      ],
      "imports": [
        "token_parser.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestTokenParserIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_token_resolver_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestTokenResolverIntegration.setup_method",
        "TestTokenResolverIntegration.teardown_method"
      ],
      "imports": [
        "token_resolver.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestTokenResolverIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_variable_resolver_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestVariableResolverIntegration.teardown_method",
        "TestVariableResolverIntegration.setup_method"
      ],
      "imports": [
        "variable_resolver.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestVariableResolverIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/integration/test_variable_substitution_integration.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestVariableSubstitutionIntegration.teardown_method",
        "TestVariableSubstitutionIntegration.setup_method"
      ],
      "imports": [
        "pytest",
        "pathlib.Path",
        "variable_substitution.*",
        "sys"
      ],
      "class_methods": {
        "TestVariableSubstitutionIntegration": [
          "test_external_dependency_integration",
          "test_end_to_end_workflow",
          "test_component_integration",
          "teardown_method",
          "setup_method"
        ]
      }
    },
    {
      "file": "tests/mocks/external_dependencies.py",
      "total_methods": 29,
      "test_methods": 0,
      "fixtures": 0,
      "helper_methods": 10,
      "unused_methods": [
        "GitMocker.mock_git_command",
        "DatabaseMocker.mock_execute",
        "FileSystemMocker.cleanup",
        "OOXMLProcessorMocker.mock_substitute",
        "MockRegistry.tracked_call"
      ],
      "imports": [
        "unittest.mock.Mock",
        "unittest.mock.patch",
        "typing.List",
        "tempfile",
        "unittest.mock.MagicMock",
        "weakref",
        "threading",
        "json",
        "typing.Dict",
        "datetime.datetime",
        "typing.Optional",
        "typing.Callable",
        "collections.defaultdict",
        "pathlib.Path",
        "typing.Union",
        "typing.Any",
        "shutil",
        "datetime.timedelta",
        "unittest.mock.PropertyMock",
        "os",
        "time"
      ],
      "class_methods": {
        "MockRegistry": [
          "get_mock",
          "get_call_history",
          "reset_mock",
          "register_mock",
          "__init__",
          "tracked_call",
          "add_reset_callback"
        ],
        "FileSystemMocker": [
          "__init__",
          "cleanup",
          "create_mock_file_structure"
        ],
        "OOXMLProcessorMocker": [
          "create_advanced_mock",
          "mock_substitute"
        ],
        "GitMocker": [
          "mock_git_command",
          "create_repo_mock"
        ],
        "HTTPMocker": [
          "add_response",
          "__init__",
          "create_requests_mock",
          "mock_request"
        ],
        "DatabaseMocker": [
          "create_connection_mock",
          "__init__",
          "mock_execute",
          "add_table_data"
        ],
        "mock_external_dependencies": [
          "__init__",
          "__enter__",
          "__exit__"
        ]
      }
    },
    {
      "file": "tests/quality/validation_framework.py",
      "total_methods": 21,
      "test_methods": 0,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "BestPracticeChecker._check_hardcoded_values",
        "BestPracticeChecker._check_descriptive_names",
        "BestPracticeChecker._check_test_isolation",
        "BestPracticeChecker._check_documentation",
        "TestQualityValidator.generate_quality_report",
        "TestQualityValidator.validate_test_directory",
        "BestPracticeChecker._check_mock_usage",
        "BestPracticeChecker._check_setup_teardown",
        "BestPracticeChecker._check_single_assertion_focus"
      ],
      "imports": [
        "typing.Tuple",
        "dataclasses.dataclass",
        "subprocess",
        "ast",
        "typing.Any",
        "re",
        "json",
        "typing.Dict",
        "typing.Set",
        "typing.Optional",
        "collections.defaultdict",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "TestQualityMetrics": [],
        "TestValidationResult": [],
        "TestAnalyzer": [
          "_calculate_maintainability",
          "__init__",
          "_calculate_complexity",
          "analyze_test_file"
        ],
        "CoverageAnalyzer": [
          "__init__",
          "_run_coverage_measurement",
          "_get_detailed_coverage",
          "measure_coverage_before_after"
        ],
        "BestPracticeChecker": [
          "check_test_file",
          "_check_test_isolation",
          "_check_single_assertion_focus",
          "_check_documentation",
          "_check_hardcoded_values",
          "_check_setup_teardown",
          "_check_descriptive_names",
          "__init__",
          "_check_mock_usage"
        ],
        "TestQualityValidator": [
          "generate_quality_report",
          "__init__",
          "validate_test_directory",
          "validate_test_file"
        ]
      }
    },
    {
      "file": "tests/test_advanced_cache_system_comprehensive.py",
      "total_methods": 39,
      "test_methods": 34,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestCacheIntegration.worker_writes",
        "TestLRUCache.worker",
        "TestCacheIntegration.worker_reads"
      ],
      "imports": [
        "tools.advanced_cache_system.LRUCache",
        "tempfile",
        "sys",
        "tools.advanced_cache_system.CacheEntry",
        "unittest",
        "unittest.mock.Mock",
        "tools.advanced_cache_system.CacheStats",
        "threading",
        "json",
        "os",
        "unittest.mock.patch",
        "pathlib.Path",
        "time",
        "pickle"
      ],
      "class_methods": {
        "TestCacheEntry": [
          "test_cache_entry_replacement",
          "test_cache_entry_creation",
          "test_cache_entry_defaults"
        ],
        "TestCacheStats": [
          "test_miss_rate_calculation",
          "test_cache_stats_creation",
          "test_hit_rate_calculation",
          "test_default_stats"
        ],
        "TestLRUCache": [
          "worker",
          "test_thread_safety",
          "test_memory_size_tracking",
          "test_basic_put_get_operations",
          "test_data_types_support",
          "test_cache_statistics",
          "test_lru_eviction_policy",
          "test_compression_functionality",
          "test_access_count_tracking",
          "test_memory_limit_enforcement",
          "test_clear_operation",
          "test_maybe_maintenance_method",
          "test_lru_cache_initialization",
          "test_compression_threshold",
          "setUp",
          "test_ttl_expiration",
          "test_is_expired_method",
          "test_enforce_limits_method",
          "test_lru_access_pattern",
          "tearDown",
          "test_large_value_handling",
          "test_delete_operation",
          "test_cache_replacement_behavior"
        ],
        "TestCacheIntegration": [
          "worker_writes",
          "worker_reads",
          "test_realistic_usage_pattern",
          "test_concurrent_performance"
        ],
        "TestCacheEdgeCases": [
          "test_very_large_ttl",
          "test_special_character_keys",
          "test_zero_size_cache",
          "test_negative_ttl",
          "test_empty_key_handling"
        ]
      }
    },
    {
      "file": "tests/test_advanced_fixture_system.py",
      "total_methods": 12,
      "test_methods": 12,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tests.fixtures.get_cache_stats",
        "tests.fixtures.sample_design_tokens",
        "tests.fixtures.benchmark_data",
        "tests.fixtures.integration_environment",
        "tests.fixtures.temp_dir",
        "tests.fixtures.get_fixture",
        "typing.Any",
        "tests.fixtures.invalidate_fixture_cache",
        "pytest",
        "json",
        "typing.Dict",
        "pathlib.Path",
        "time",
        "tests.fixtures.mock_ooxml_processor"
      ],
      "class_methods": {
        "TestAdvancedFixtureSystem": [
          "test_design_token_structure",
          "test_performance_optimization",
          "test_fixture_isolation",
          "test_dependency_injection",
          "test_hierarchical_caching",
          "test_mock_quality",
          "test_cache_statistics",
          "test_integration_environment_setup"
        ],
        "TestFixturePerformance": [
          "test_cache_hit_performance",
          "test_memory_efficiency"
        ],
        "TestFixtureIntegration": [
          "test_cross_fixture_data_sharing",
          "test_complete_workflow"
        ]
      }
    },
    {
      "file": "tests/test_advanced_namespace_handling.py",
      "total_methods": 9,
      "test_methods": 8,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "unittest",
        "os",
        "lxml.etree"
      ],
      "class_methods": {
        "TestAdvancedNamespaceHandling": [
          "test_custom_namespace_declarations_in_patches",
          "test_batch_namespace_processing_optimization",
          "setUp",
          "test_namespace_validation_and_error_reporting",
          "test_namespace_inheritance_between_patches",
          "test_xpath_context_with_custom_namespaces",
          "test_format_specific_namespace_migration",
          "test_namespace_collision_resolution",
          "test_comprehensive_namespace_stats_collection"
        ]
      }
    },
    {
      "file": "tests/test_advanced_token_e2e.py",
      "total_methods": 16,
      "test_methods": 12,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [
        "TestCorporateThemeSwitching.setup_method",
        "TestComplexTokenHierarchies.setup_method",
        "TestMultiFormatTemplateGeneration.setup_method"
      ],
      "imports": [
        "unittest.mock.Mock",
        "tools.composite_token_transformer.transform_composite_token",
        "lxml.etree",
        "tools.composite_token_transformer.BorderTokenTransformer",
        "unittest.mock.patch",
        "typing.List",
        "tools.ooxml_processor.OOXMLProcessor",
        "tempfile",
        "tools.composite_token_transformer.GradientTokenTransformer",
        "json",
        "typing.Dict",
        "tools.variable_resolver.VariableResolver",
        "tools.variable_resolver.TokenType",
        "zipfile",
        "pytest",
        "tools.variable_resolver.TokenScope",
        "pathlib.Path",
        "tools.variable_resolver.ResolvedVariable",
        "tools.w3c_dtcg_validator.W3CDTCGValidator",
        "typing.Any",
        "tools.composite_token_transformer.ShadowTokenTransformer"
      ],
      "class_methods": {
        "TestCorporateThemeSwitching": [
          "test_brand_theme_switching",
          "setup_method",
          "test_w3c_dtcg_validation_with_corporate_tokens",
          "test_complex_nested_component_system"
        ],
        "TestMultiFormatTemplateGeneration": [
          "test_cross_platform_color_adaptation",
          "test_word_document_generation",
          "setup_method",
          "test_powerpoint_template_generation"
        ],
        "TestComplexTokenHierarchies": [
          "test_multi_level_hierarchy_resolution",
          "setup_method",
          "test_dependency_chain_resolution",
          "test_conditional_token_resolution"
        ],
        "TestOfficeDocumentGeneration": [
          "_create_theme_xml_with_tokens",
          "test_template_archive_generation",
          "test_excel_workbook_workflow",
          "test_powerpoint_presentation_workflow"
        ]
      }
    },
    {
      "file": "tests/test_advanced_token_integration.py",
      "total_methods": 17,
      "test_methods": 14,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [
        "TestCompositeTokenOOXMLIntegration.setup_method",
        "TestPerformanceOptimizedBatchProcessing.setup_method",
        "TestW3CDTCGNestedReferenceIntegration.setup_method"
      ],
      "imports": [
        "unittest.mock.Mock",
        "tools.composite_token_transformer.transform_composite_token",
        "lxml.etree",
        "tools.composite_token_transformer.BorderTokenTransformer",
        "unittest.mock.patch",
        "typing.List",
        "tools.ooxml_processor.OOXMLProcessor",
        "tools.composite_token_transformer.GradientTokenTransformer",
        "tools.w3c_dtcg_validator.TokenType",
        "json",
        "typing.Dict",
        "tools.variable_resolver.VariableResolver",
        "pytest",
        "tools.variable_resolver.TokenScope",
        "tools.w3c_dtcg_validator.ValidationResult",
        "tools.variable_resolver.ResolvedVariable",
        "tools.w3c_dtcg_validator.W3CDTCGValidator",
        "typing.Any",
        "tools.composite_token_transformer.ShadowTokenTransformer"
      ],
      "class_methods": {
        "TestW3CDTCGNestedReferenceIntegration": [
          "test_w3c_dtcg_validation_with_nested_references",
          "test_w3c_dtcg_validation_of_resolved_composite_tokens",
          "setup_method",
          "test_integration_with_token_collections",
          "test_nested_reference_resolution_before_transformation"
        ],
        "TestCompositeTokenOOXMLIntegration": [
          "test_shadow_integration_with_ooxml_processor",
          "test_xpath_targeting_for_composite_elements",
          "test_border_integration_with_ooxml_processor",
          "setup_method",
          "test_gradient_integration_with_ooxml_processor"
        ],
        "TestPerformanceOptimizedBatchProcessing": [
          "test_batch_nested_reference_resolution",
          "test_batch_composite_token_transformation",
          "setup_method",
          "test_cached_resolution_performance"
        ],
        "TestAdvancedTokenErrorHandling": [
          "test_composite_token_transformation_errors",
          "test_integration_error_propagation",
          "test_nested_reference_validation_errors"
        ]
      }
    },
    {
      "file": "tests/test_analyzer_coverage_comprehensive.py",
      "total_methods": 31,
      "test_methods": 24,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "tools.analyzer.types.DesignElementType",
        "tools.analyzer.types.DesignElement",
        "enum.Enum",
        "tools.analyzer.types.PriorityLevel",
        "dataclasses.dataclass",
        "tools.analyzer.types.CoverageReport",
        "typing.Any",
        "tools.analyzer.coverage.CoverageAnalyzer",
        "pytest",
        "tools.analyzer.types.VariableCoverage",
        "typing.Dict",
        "typing.Optional",
        "collections.defaultdict",
        "tools.analyzer.types.AnalysisContext",
        "typing.List"
      ],
      "class_methods": {
        "DesignElementType": [],
        "PriorityLevel": [],
        "DesignElement": [],
        "VariableCoverage": [
          "__post_init__"
        ],
        "CoverageReport": [
          "__post_init__"
        ],
        "AnalysisContext": [
          "__post_init__"
        ],
        "CoverageAnalyzer": [
          "__init__",
          "generate_coverage_report",
          "analyze_coverage"
        ],
        "TestCoverageAnalyzer": [
          "test_coverage_weights_initialization",
          "test_analyzer_initialization_default",
          "test_analyzer_context_association",
          "test_analyzer_initialization_custom"
        ],
        "TestCoverageAnalysis": [
          "create_test_elements",
          "test_analyze_coverage_by_priority",
          "test_analyze_coverage_empty_elements",
          "test_analyze_coverage_basic",
          "test_coverage_recommendations_generation",
          "test_analyze_coverage_single_element",
          "test_analyze_coverage_by_type"
        ],
        "TestCoverageReport": [
          "test_generate_coverage_report_basic",
          "test_generate_coverage_report_perfect_coverage",
          "test_generate_coverage_report_with_recommendations",
          "test_generate_coverage_report_high_coverage"
        ],
        "TestCoverageWeightingSystem": [
          "test_accessibility_impact_weighting",
          "test_brand_relevance_weighting",
          "test_priority_weighting"
        ],
        "TestCoverageAnalysisIntegration": [
          "test_multi_file_analysis_context",
          "test_target_coverage_impact",
          "test_complete_analysis_workflow"
        ],
        "TestCoverageEdgeCasesAndErrorHandling": [
          "test_coverage_analysis_with_none_elements",
          "test_coverage_analysis_with_invalid_elements",
          "test_large_element_set_performance",
          "test_extreme_target_coverage_values"
        ]
      }
    },
    {
      "file": "tests/test_aspect_ratio_comprehensive.py",
      "error": "unexpected unindent (<unknown>, line 130)",
      "unused_methods": []
    },
    {
      "file": "tests/test_aspect_ratio_token_system.py",
      "total_methods": 15,
      "test_methods": 12,
      "fixtures": 2,
      "helper_methods": 0,
      "unused_methods": [
        "TestAspectRatioTokenResolution.sample_tokens_with_aspect_ratios",
        "TestAspectRatioConditionalResolution.complex_conditional_tokens"
      ],
      "imports": [
        "tools.emu_types.EMUValue",
        "tools.variable_resolver.VariableResolver",
        "tools.aspect_ratio_resolver.AspectRatioResolver",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "pathlib.Path",
        "tools.aspect_ratio_resolver.AspectRatioToken"
      ],
      "class_methods": {
        "TestAspectRatioTokenDefinition": [
          "test_international_paper_sizes",
          "test_aspect_ratio_token_structure"
        ],
        "TestAspectRatioTokenResolution": [
          "test_a4_landscape_resolution",
          "test_letter_portrait_resolution",
          "sample_tokens_with_aspect_ratios",
          "test_token_based_aspect_ratio_resolution"
        ],
        "TestAspectRatioSchemaValidation": [
          "_is_valid_aspect_ratio_token",
          "test_valid_aspect_ratio_token_schema",
          "test_invalid_aspect_ratio_token_schema"
        ],
        "TestEMUCalculationsForAspectRatios": [
          "test_emu_precision_for_international_sizes",
          "test_emu_value_aspect_ratio_calculations"
        ],
        "TestAspectRatioErrorHandling": [
          "test_malformed_aspect_ratio_token_error",
          "test_missing_aspect_ratio_token_error"
        ],
        "TestAspectRatioConditionalResolution": [
          "test_nested_conditional_resolution",
          "complex_conditional_tokens"
        ]
      }
    },
    {
      "file": "tests/test_batched_zip_manager.py",
      "total_methods": 28,
      "test_methods": 23,
      "fixtures": 2,
      "helper_methods": 0,
      "unused_methods": [
        "TestBatchedZIPManagerCore.temp_zip_files",
        "TestBatchedZIPManagerPerformance.large_zip_collection"
      ],
      "imports": [
        "tempfile",
        "unittest.mock.MagicMock",
        "dataclasses.dataclass",
        "sys",
        "zipfile",
        "unittest.mock.Mock",
        "threading",
        "typing.Any",
        "pytest",
        "typing.Dict",
        "concurrent.futures",
        "unittest.mock.patch",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "ZIPPerformanceMetrics": [],
        "TestBatchedZIPManagerCore": [
          "test_zip_handle_reuse",
          "test_thread_safety",
          "test_lru_eviction_strategy",
          "temp_zip_files",
          "test_context_manager_interface",
          "test_zip_manager_initialization"
        ],
        "TestBatchedZIPManagerPerformance": [
          "test_memory_usage_optimization",
          "measure_batched_access",
          "test_concurrent_performance_scaling",
          "test_individual_vs_batched_access_performance",
          "measure_individual_access",
          "large_zip_collection"
        ],
        "TestBatchedZIPManagerPreloading": [
          "test_usage_pattern_analysis",
          "test_preloading_memory_management",
          "test_template_batch_preloading"
        ],
        "TestBatchedZIPManagerIntegration": [
          "test_optimized_batch_processor_integration",
          "test_backward_compatibility",
          "test_template_analyzer_integration",
          "test_ooxml_processor_integration"
        ],
        "TestBatchedZIPManagerErrorHandling": [
          "test_memory_pressure_handling",
          "test_concurrent_access_errors",
          "test_corrupted_zip_handling",
          "test_file_not_found_handling"
        ],
        "TestBatchedZIPManagerMetrics": [
          "test_thread_contention_metrics",
          "test_memory_usage_monitoring",
          "test_performance_metrics_collection",
          "test_cache_statistics_tracking"
        ]
      }
    },
    {
      "file": "tests/test_build_integration.py",
      "total_methods": 18,
      "test_methods": 13,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [],
      "imports": [
        "unittest.mock.Mock",
        "xml.etree.ElementTree",
        "tools.exemplar_generator.ExemplarGenerator",
        "unittest.mock.patch",
        "typing.List",
        "unittest.mock.MagicMock",
        "tempfile",
        "json",
        "typing.Dict",
        "tools.template_analyzer.TemplateAnalyzer",
        "typing.Optional",
        "typing.Tuple",
        "sys",
        "unittest",
        "zipfile",
        "typing.Set",
        "pathlib.Path",
        "subprocess",
        "shutil",
        "typing.Any",
        "tools.substitution.pipeline.SubstitutionPipeline",
        "build",
        "os",
        "time"
      ],
      "class_methods": {
        "TestBuildIntegration": [
          "setUp",
          "create_test_template",
          "tearDown"
        ],
        "TestCLIIntegration": [
          "test_extension_variable_cli_flag",
          "test_error_handling_and_validation",
          "test_multiple_template_build",
          "test_basic_cli_invocation"
        ],
        "TestBackwardCompatibility": [
          "test_json_patch_compatibility",
          "test_mixed_patch_and_extension_variables",
          "test_patch_precedence_rules",
          "test_migration_utility_functionality",
          "_infer_type_from_xpath",
          "_generate_var_id_from_xpath"
        ],
        "TestOrgChannelVariables": [
          "test_hierarchical_token_resolution",
          "test_org_variable_override",
          "test_channel_variable_override"
        ],
        "TestIntegrationPipeline": [
          "test_end_to_end_build_workflow",
          "test_build_performance_and_validation"
        ]
      }
    },
    {
      "file": "tests/test_build_integration_modern.py",
      "total_methods": 16,
      "test_methods": 11,
      "fixtures": 0,
      "helper_methods": 5,
      "unused_methods": [],
      "imports": [
        "tools.exemplar_generator.GenerationLevel",
        "tempfile",
        "sys",
        "tools.exemplar_generator.TemplateSpecification",
        "subprocess",
        "unittest",
        "zipfile",
        "unittest.mock.Mock",
        "tools.exemplar_generator.TemplateCategory",
        "tools.substitution.types.SubstitutionResult",
        "tools.exemplar_generator.ExemplarGenerator",
        "tools.substitution.pipeline.SubstitutionPipeline",
        "tools.template_analyzer.TemplateAnalyzer",
        "shutil",
        "unittest.mock.patch",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestBuildSystemIntegration": [
          "create_test_template",
          "tearDown",
          "setUp",
          "test_error_handling_integration",
          "test_template_analyzer_integration",
          "test_component_compatibility",
          "test_template_file_handling",
          "test_build_script_help",
          "test_exemplar_generator_integration",
          "test_substitution_pipeline_integration",
          "test_build_script_exists"
        ],
        "TestBuildWorkflow": [
          "tearDown",
          "setUp",
          "test_end_to_end_workflow",
          "test_component_statistics_tracking",
          "test_configuration_compatibility"
        ]
      }
    },
    {
      "file": "tests/test_build_supertheme_integration.py",
      "total_methods": 30,
      "test_methods": 14,
      "fixtures": 4,
      "helper_methods": 0,
      "unused_methods": [
        "TestDesignVariantTokenResolution.design_tokens",
        "TestFileSizeValidation.generate_supertheme",
        "TestSuperThemeCLICommands.build_command",
        "TestSuperThemeCLICommands.temp_workspace",
        "TestBuildContextIntegration.build_context",
        "TestSuperThemeCLICommands.runner"
      ],
      "imports": [
        "build.StyleStackError",
        "io",
        "tempfile",
        "unittest.mock.MagicMock",
        "click.testing.CliRunner",
        "unittest.mock.call",
        "click",
        "zipfile",
        "unittest.mock.Mock",
        "build.safe_zip_dir",
        "pytest",
        "json",
        "build.BuildContext",
        "build",
        "unittest.mock.patch",
        "pathlib.Path",
        "time",
        "build.safe_unzip"
      ],
      "class_methods": {
        "TestSuperThemeCLICommands": [
          "runner",
          "temp_workspace",
          "build_command",
          "test_supertheme_command_invalid_ratios",
          "test_supertheme_command_basic",
          "test_supertheme_command_missing_designs"
        ],
        "TestDesignVariantTokenResolution": [
          "load_design_variants",
          "test_resolve_design_tokens_with_context",
          "design_tokens",
          "test_load_design_variants_from_directory",
          "resolve_tokens_with_context"
        ],
        "TestProgressReportingAndFeedback": [
          "report_progress",
          "test_verbose_output_logging",
          "test_supertheme_progress_reporting",
          "log_verbose"
        ],
        "TestFileSizeValidation": [
          "validate_package_size",
          "monitor_performance",
          "test_performance_monitoring",
          "test_supertheme_size_limit_validation",
          "generate_supertheme"
        ],
        "TestErrorHandlingAndMessages": [
          "parse_design_json",
          "test_missing_design_files_error",
          "test_invalid_json_error",
          "validate_aspect_ratio",
          "test_aspect_ratio_error_messages",
          "load_designs"
        ],
        "TestBuildContextIntegration": [
          "build_context",
          "test_build_context_validation",
          "validate_supertheme_context",
          "test_supertheme_with_build_context"
        ]
      }
    },
    {
      "file": "tests/test_bulk_token_resolver.py",
      "total_methods": 34,
      "test_methods": 25,
      "fixtures": 3,
      "helper_methods": 0,
      "unused_methods": [
        "TestBulkTokenResolverCore.temp_hierarchy_files",
        "TestBulkTokenResolverCore.sample_token_hierarchy",
        "TestBulkTokenResolverPerformance.large_token_dataset"
      ],
      "imports": [
        "tools.variable_resolver.ResolvedVariable",
        "tempfile",
        "unittest.mock.MagicMock",
        "tools.variable_resolver.VariableResolver",
        "dataclasses.dataclass",
        "sys",
        "unittest.mock.Mock",
        "threading",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "concurrent.futures",
        "typing.Optional",
        "unittest.mock.patch",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "ResolvedVariable": [
          "__init__"
        ],
        "VariableResolver": [
          "__init__",
          "resolve_variable"
        ],
        "TokenResolutionMetrics": [],
        "TokenHierarchy": [],
        "TestBulkTokenResolverCore": [
          "test_token_dependency_resolution",
          "temp_hierarchy_files",
          "test_parallel_hierarchy_loading",
          "test_bulk_token_resolver_initialization",
          "test_bulk_token_resolution",
          "sample_token_hierarchy",
          "test_cache_invalidation_strategy",
          "test_hierarchical_token_caching"
        ],
        "TestBulkTokenResolverPerformance": [
          "measure_bulk_resolution",
          "test_individual_vs_bulk_resolution_performance",
          "measure_individual_resolution",
          "large_token_dataset",
          "test_hierarchical_cache_efficiency",
          "test_concurrent_bulk_resolution"
        ],
        "TestBulkTokenResolverIntegration": [
          "test_backward_compatibility",
          "test_variable_resolver_integration",
          "test_template_analyzer_integration",
          "test_ooxml_processor_integration"
        ],
        "TestBulkTokenResolverHierarchy": [
          "test_circular_dependency_detection",
          "test_token_inheritance_rules",
          "test_missing_token_handling",
          "test_token_precedence_rules"
        ],
        "TestBulkTokenResolverErrorHandling": [
          "test_malformed_hierarchy_files",
          "test_memory_pressure_handling",
          "test_network_failure_resilience",
          "test_concurrent_modification_handling"
        ],
        "TestBulkTokenResolverCaching": [
          "test_lru_cache_behavior",
          "test_cache_memory_optimization",
          "test_cache_warming_strategies",
          "test_selective_cache_invalidation"
        ]
      }
    },
    {
      "file": "tests/test_carrier_registry.py",
      "total_methods": 30,
      "test_methods": 15,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "MockCarrierRegistry.cache_hit_rate",
        "TestCarrierRegistry.setup_method",
        "TestCarrierRegistry.teardown_method"
      ],
      "imports": [
        "unittest.mock.MagicMock",
        "sys",
        "carrier_registry.CarrierType",
        "unittest.mock.Mock",
        "variable_resolver.VariableResolver",
        "carrier_registry.DesignTokenInjector",
        "typing.Any",
        "carrier_registry.CarrierRegistry",
        "pytest",
        "json",
        "typing.Dict",
        "unittest.mock.patch",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "TestCarrierRegistry": [
          "test_integration_with_variable_resolver",
          "test_carrier_caching_system",
          "test_cross_platform_carrier_mapping",
          "test_carrier_validation_system",
          "test_register_text_style_carrier",
          "test_xpath_lookup_performance",
          "test_emu_precision_typography_validation",
          "test_registry_initialization",
          "test_register_table_carrier",
          "test_design_token_injection_validation",
          "test_carrier_priority_ordering",
          "teardown_method",
          "setup_method"
        ],
        "TestCarrierRegistryIntegration": [
          "test_performance_under_load",
          "test_full_workflow_integration"
        ],
        "TestCarrierRegistryPerformance": [
          "test_memory_usage_large_templates",
          "test_processing_speed_standard_templates"
        ],
        "CarrierType": [],
        "MockCarrierRegistry": [
          "get_all_carriers",
          "find_carriers_by_xpath",
          "register_carrier",
          "clear_cache",
          "cache_hit_rate",
          "__init__",
          "find_carriers_by_platform",
          "get_carrier",
          "validate_carrier"
        ],
        "MockDesignTokenInjector": [
          "__init__",
          "convert_to_emu",
          "inject_with_precedence",
          "inject_tokens"
        ]
      }
    },
    {
      "file": "tests/test_carrier_variable_processing.py",
      "total_methods": 30,
      "test_methods": 15,
      "fixtures": 0,
      "helper_methods": 4,
      "unused_methods": [],
      "imports": [
        "decimal.ROUND_HALF_UP",
        "tempfile",
        "decimal.Decimal",
        "sys",
        "unittest",
        "typing.Any",
        "re",
        "json",
        "typing.Dict",
        "os",
        "typing.Optional",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "CarrierVariablePatternValidator": [
          "validate_emu_precision",
          "is_emu_variable",
          "is_valid_carrier_variable",
          "extract_variable_path"
        ],
        "EMUCalculationEngine": [
          "points_to_emu",
          "emu_to_points",
          "validate_precision"
        ],
        "HierarchicalTokenResolver": [
          "__init__",
          "get_all_resolved_tokens",
          "add_token_layer",
          "resolve_token"
        ],
        "TestCarrierVariableSyntaxValidation": [
          "setUp",
          "test_emu_variable_detection",
          "test_variable_path_extraction",
          "test_invalid_carrier_variable_patterns",
          "test_valid_carrier_variable_patterns"
        ],
        "TestEMUCalculationPrecision": [
          "setUp",
          "test_points_to_emu_conversion",
          "test_precision_tolerance",
          "test_emu_to_points_conversion",
          "test_baseline_grid_alignment"
        ],
        "TestHierarchicalTokenPrecedence": [
          "setUp",
          "test_single_layer_resolution",
          "test_missing_token_resolution",
          "test_hierarchical_precedence_override",
          "test_complete_resolved_token_set"
        ],
        "TestCarrierVariableIntegration": [
          "setUp",
          "test_end_to_end_carrier_variable_processing",
          "test_precision_validation_across_expected_values",
          "test_batch_variable_validation"
        ]
      }
    },
    {
      "file": "tests/test_centralized_mocks.py",
      "total_methods": 19,
      "test_methods": 19,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tests.mocks.get_mock_call_history",
        "tests.mocks.mock_external_dependencies",
        "tests.mocks.FileSystemMocker",
        "unittest.mock.Mock",
        "tests.mocks.get_mock",
        "tests.mocks.create_standard_mocks",
        "pytest",
        "json",
        "tests.mocks.reset_all_mocks",
        "tests.mocks.OOXMLProcessorMocker",
        "tests.mocks.HTTPMocker",
        "unittest.mock.patch",
        "pathlib.Path",
        "tests.mocks.DatabaseMocker"
      ],
      "class_methods": {
        "TestMockRegistry": [
          "test_mock_registration_and_retrieval",
          "test_mock_reset_functionality",
          "test_mock_call_tracking"
        ],
        "TestOOXMLProcessorMock": [
          "test_variable_extraction",
          "test_validation_and_metadata",
          "test_xml_manipulation",
          "test_variable_substitution",
          "test_template_loading_operations"
        ],
        "TestHTTPMocker": [
          "test_response_configuration",
          "test_default_404_behavior",
          "test_request_history_tracking"
        ],
        "TestFileSystemMocker": [
          "test_mock_file_structure_creation",
          "test_file_content_tracking"
        ],
        "TestDatabaseMocker": [
          "test_table_data_setup",
          "test_query_history_tracking"
        ],
        "TestMockContextManager": [
          "test_context_manager_multiple_dependencies",
          "test_context_manager_basic_usage"
        ],
        "TestMockIntegration": [
          "test_complete_workflow_with_mocks",
          "test_mock_isolation_between_tests"
        ]
      }
    },
    {
      "file": "tests/test_code_consistency.py",
      "total_methods": 28,
      "test_methods": 10,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "TestCodeConsistency.detector"
      ],
      "imports": [
        "collections.Counter",
        "typing.Tuple",
        "difflib",
        "ast",
        "typing.Any",
        "pytest",
        "re",
        "typing.Dict",
        "json",
        "collections.defaultdict",
        "hashlib",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {
        "CodeBlock": [
          "_normalize_content",
          "__init__",
          "_compute_hash",
          "similarity_to",
          "__repr__"
        ],
        "DuplicationDetector": [
          "find_exact_duplicates",
          "_find_error_handling_inconsistencies",
          "find_similar_blocks",
          "analyze_codebase",
          "generate_report",
          "find_orphaned_imports",
          "_find_docstring_inconsistencies",
          "__init__",
          "find_inconsistent_patterns",
          "_find_logging_inconsistencies",
          "extract_code_blocks",
          "_analyze_docstring_style"
        ],
        "TestCodeConsistency": [
          "test_similarity_threshold_compliance",
          "test_minimal_orphaned_imports",
          "test_generate_consistency_report",
          "test_no_excessive_exact_duplicates",
          "test_codebase_metrics_reasonable",
          "test_consistent_coding_patterns",
          "test_specific_duplication_patterns",
          "detector"
        ],
        "TestDuplicationDetector": [
          "test_duplication_detector_initialization",
          "test_code_block_creation",
          "test_code_block_similarity"
        ]
      }
    },
    {
      "file": "tests/test_composite_token_transformer.py",
      "total_methods": 24,
      "test_methods": 21,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [
        "TestGradientTokenTransformer.setup_method",
        "TestBorderTokenTransformer.setup_method",
        "TestShadowTokenTransformer.setup_method"
      ],
      "imports": [
        "math",
        "tools.emu_types.EMUValue",
        "tools.emu_types.Point",
        "tools.composite_token_transformer.GradientTokenTransformer",
        "tools.composite_token_transformer.get_composite_token_transformer",
        "lxml.etree",
        "typing.Any",
        "pytest",
        "tools.emu_types.Rectangle",
        "typing.Dict",
        "tools.composite_token_transformer.CompositeTokenError",
        "tools.composite_token_transformer.ShadowTokenTransformer",
        "tools.composite_token_transformer.BorderTokenTransformer"
      ],
      "class_methods": {
        "TestShadowTokenTransformer": [
          "test_basic_shadow_transformation",
          "test_shadow_emu_precision_conversion",
          "test_shadow_with_hex_color_variations",
          "test_shadow_direction_calculation",
          "test_invalid_shadow_token_handling",
          "test_inner_shadow_transformation",
          "setup_method"
        ],
        "TestBorderTokenTransformer": [
          "test_invisible_border_handling",
          "test_border_width_conversions",
          "test_basic_border_transformation",
          "test_border_style_mappings",
          "test_border_with_transparency",
          "setup_method"
        ],
        "TestGradientTokenTransformer": [
          "test_gradient_direction_mappings",
          "test_gradient_stop_position_conversion",
          "test_gradient_with_multiple_stops",
          "test_linear_gradient_transformation",
          "test_radial_gradient_transformation",
          "setup_method"
        ],
        "TestCompositeTokenIntegration": [
          "test_composite_token_with_token_references",
          "test_shadow_with_border_combination"
        ],
        "TestCompositeTokenErrorHandling": [
          "test_invalid_emu_conversion_error",
          "test_unsupported_token_type_error",
          "test_malformed_token_structure_error"
        ]
      }
    },
    {
      "file": "tests/test_comprehensive_e2e_architecture.py",
      "total_methods": 39,
      "test_methods": 1,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "collections.Counter",
        "variable_substitution.VariableSubstitutionPipeline",
        "token_integration_layer.TokenIntegrationLayer",
        "template_analyzer.TemplateAnalyzer",
        "dataclasses.field",
        "ooxml_processor.OOXMLProcessor",
        "hashlib",
        "multi_format_ooxml_handler.OOXMLFormat",
        "variable_resolver.ResolvedVariable",
        "typing.List",
        "theme_resolver.ThemeResolver",
        "variable_resolver.TokenScope",
        "tempfile",
        "multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "transaction_pipeline.TransactionPipeline",
        "dataclasses.dataclass",
        "variable_resolver.TokenType",
        "variable_resolver.VariableResolver",
        "extension_schema_validator.ExtensionSchemaValidator",
        "json",
        "typing.Dict",
        "token_integration_layer.TokenContext",
        "typing.Optional",
        "logging",
        "typing.Tuple",
        "transaction_pipeline.Transaction",
        "sys",
        "zipfile",
        "ast",
        "pytest",
        "importlib",
        "inspect",
        "typing.Set",
        "collections.defaultdict",
        "pathlib.Path",
        "transaction_pipeline.TransactionState",
        "transaction_pipeline.OperationType",
        "json_patch_parser.JSONPatchParser",
        "subprocess",
        "typing.Any",
        "shutil",
        "os",
        "time"
      ],
      "class_methods": {
        "ImportDependency": [],
        "DuplicateCodePattern": [],
        "ArchitectureReport": [
          "success_rate",
          "duration",
          "generate_summary"
        ],
        "ImportAnalyzer": [
          "dfs",
          "_analyze_file_imports",
          "_identify_critical_modules",
          "_record_import",
          "_build_dependency_graph",
          "__init__",
          "_detect_circular_dependencies",
          "analyze_all_imports"
        ],
        "CodeDuplicationAnalyzer": [
          "_group_patterns_by_type",
          "_analyze_function_duplications",
          "__init__",
          "_identify_high_priority_duplications",
          "analyze_duplications",
          "_analyze_code_block_duplications",
          "_analyze_class_duplications",
          "_analyze_import_duplications",
          "_generate_refactoring_suggestions"
        ],
        "StyleStackArchitectureTest": [
          "_test_performance",
          "_write_duplication_report",
          "_cleanup",
          "_test_import_dependencies",
          "_test_transaction_pipeline",
          "_test_build_system_integration",
          "_generate_architecture_documentation",
          "_create_test_powerpoint_template",
          "_test_multi_format_support",
          "_write_dependency_report",
          "__init__",
          "_test_ooxml_processing",
          "_write_architecture_overview",
          "run_comprehensive_test",
          "_initialize_components",
          "_create_test_data",
          "_test_code_duplications",
          "_test_token_hierarchy_resolution"
        ],
        "TestStyleStackComprehensiveE2EArchitecture": [
          "test_complete_architecture_analysis"
        ]
      }
    },
    {
      "file": "tests/test_concurrent_processing_validator_comprehensive.py",
      "total_methods": 42,
      "test_methods": 41,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "TestEnhancedCoverage.mock_validate_integrity"
      ],
      "imports": [
        "unittest.mock.Mock",
        "tools.concurrent_processing_validator.ThreadSafetyMetrics",
        "tools.concurrent_processing_validator.RaceConditionDetector",
        "unittest.mock.patch",
        "typing.List",
        "unittest.mock.MagicMock",
        "threading",
        "json",
        "typing.Dict",
        "tools.concurrent_processing_validator.ConcurrentTestResult",
        "tools.concurrent_processing_validator",
        "tools.concurrent_processing_validator.ConcurrentProcessingValidator",
        "multiprocessing",
        "queue",
        "tools.concurrent_processing_validator.DataIntegrityValidator",
        "pytest",
        "collections.defaultdict",
        "tools.concurrent_processing_validator.DeadlockDetector",
        "typing.Any",
        "importlib.reload",
        "time"
      ],
      "class_methods": {
        "TestThreadSafetyMetrics": [
          "test_initial_state",
          "test_safety_score_with_issues",
          "test_safety_score_no_operations",
          "test_safety_score_minimum_bound",
          "test_safety_score_perfect"
        ],
        "TestRaceConditionDetector": [
          "test_initialization",
          "test_consistent_states",
          "test_record_operation",
          "test_clear_sequences",
          "test_state_inconsistency_detection",
          "test_race_condition_detection_timing"
        ],
        "TestDeadlockDetector": [
          "test_initialization",
          "test_timeout_detection",
          "test_lock_acquisition_tracking",
          "test_lock_release_cleanup"
        ],
        "TestDataIntegrityValidator": [
          "test_initialization",
          "test_integrity_validation_success",
          "test_valid_state_change_detection",
          "test_corruption_detection_state_reversion",
          "test_integrity_validation_new_identifier",
          "test_capture_state"
        ],
        "TestConcurrentProcessingValidator": [
          "test_initialization",
          "test_recommendations_generation",
          "test_json_processor_thread_safety_basic",
          "test_cache_manager_concurrency_basic",
          "test_component_registration",
          "test_recommendations_all_passing"
        ],
        "TestConcurrentTestResult": [
          "test_result_creation",
          "test_failed_result_with_errors"
        ],
        "TestIntegration": [
          "test_metrics_accumulation",
          "test_comprehensive_validation_workflow",
          "test_export_validation_report"
        ],
        "TestEnhancedCoverage": [
          "test_thread_safety_metrics_edge_cases",
          "test_thread_level_exception_handling",
          "test_operation_recording_comprehensive",
          "test_import_fallback_paths",
          "test_worker_thread_detailed_error_paths",
          "test_exception_handling_in_worker_threads",
          "test_results_queue_comprehensive",
          "mock_validate_integrity",
          "test_timing_and_processing_simulation"
        ]
      }
    },
    {
      "file": "tests/test_core_cleanup_validation.py",
      "total_methods": 33,
      "test_methods": 20,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "TestIntegration.save_operation",
        "TestIntegration.fail_operation",
        "TestErrorHandling.success_op",
        "TestErrorHandling.failing_operation",
        "TestErrorHandling.fail_op",
        "TestFileUtils.read_operation"
      ],
      "imports": [
        "tools.core.validation.BaseValidator",
        "tools.core.file_utils.safe_file_operation",
        "tools.core.file_utils.safe_load_json_with_fallback",
        "unittest.mock.Mock",
        "tools.core.error_handling.error_boundary",
        "tools.core.file_utils.safe_save_json",
        "tools.core.error_handling.TokenResolutionError",
        "tools.core.file_utils.is_ooxml_file",
        "tools.core.error_handling.TemplateError",
        "unittest.mock.patch",
        "tools.core.file_utils.backup_file",
        "typing.List",
        "tools.core.file_utils.read_text_file",
        "tempfile",
        "unittest.mock.MagicMock",
        "tools.core.file_utils.safe_load_json",
        "tools.core.file_utils.extract_xml_from_ooxml",
        "tools.core.error_handling.validation_boundary",
        "tools.core.error_handling.format_exception_details",
        "tools.core.error_handling.ValidationError",
        "tools.core.validation.ValidationError",
        "tools.core.file_utils.FileOperationError",
        "json",
        "typing.Dict",
        "tools.core.file_utils.list_ooxml_contents",
        "tools.core.error_handling.ProcessingError",
        "tools.core.error_handling.create_user_friendly_error",
        "tools.core.error_handling.StyleStackError",
        "tools.core.file_utils.ensure_file_exists",
        "tools.core.file_utils.safe_ooxml_writer",
        "tools.core.file_utils.get_template_format",
        "zipfile",
        "tools.core.file_utils.write_text_file",
        "pytest",
        "tools.core.error_handling.handle_processing_error",
        "tools.core.file_utils.ZIPError",
        "tools.core.error_handling.retry_on_failure",
        "tools.core.file_utils.get_file_hash",
        "tools.core.error_handling.catch_and_log",
        "pathlib.Path",
        "tools.core.validation.SchemaValidatorMixin",
        "tools.core.error_handling.collect_errors",
        "tools.core.file_utils.JSONError",
        "tools.core.error_handling.ErrorCollector",
        "tools.core.file_utils.safe_ooxml_reader",
        "typing.Any",
        "tools.core.validation.ValidationResult",
        "tools.core.error_handling.safe_execute"
      ],
      "class_methods": {
        "TestErrorHandling": [
          "test_create_user_friendly_error",
          "test_error_collector",
          "test_format_exception_details",
          "success_op",
          "fail_op",
          "flaky_operation",
          "test_catch_and_log_decorator",
          "test_stylestack_exceptions",
          "test_error_boundary_context_manager",
          "test_retry_decorator",
          "test_safe_execute",
          "failing_function",
          "test_handle_processing_error",
          "failing_operation"
        ],
        "TestValidation": [
          "test_schema_validator_mixin",
          "test_base_validator",
          "test_validation_error",
          "test_validation_result"
        ],
        "TestValidator": [
          "validate"
        ],
        "TestSchemaValidator": [
          "validate"
        ],
        "TestFileUtils": [
          "test_file_validation_utilities",
          "test_file_utilities",
          "test_ooxml_format_detection",
          "read_operation",
          "test_ooxml_operations",
          "test_json_operations"
        ],
        "TestIntegration": [
          "test_error_handling_with_validation",
          "fail_operation",
          "test_file_utils_with_error_handling",
          "save_operation"
        ],
        "MockTmpPath": [
          "__init__",
          "__truediv__"
        ]
      }
    },
    {
      "file": "tests/test_core_types_comprehensive.py",
      "total_methods": 49,
      "test_methods": 47,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tools.core.types.PatchOperation",
        "enum.Enum",
        "tools.core.types.XPathContext",
        "dataclasses.dataclass",
        "tools.core.types.InsertPosition",
        "typing.Any",
        "pytest",
        "tools.core.types.PatchOperationType",
        "typing.Dict",
        "typing.Optional",
        "tools.core.types.ProcessingContext",
        "tools.core.types.ErrorSeverity",
        "tools.core.types.RecoveryStrategy",
        "tools.core.types.PatchResult",
        "typing.List",
        "tools.core.types.PatchError"
      ],
      "class_methods": {
        "PatchOperationType": [],
        "InsertPosition": [],
        "RecoveryStrategy": [],
        "ErrorSeverity": [],
        "PatchError": [],
        "PatchResult": [],
        "PatchOperation": [
          "from_dict"
        ],
        "XPathContext": [],
        "ProcessingContext": [
          "__post_init__"
        ],
        "TestPatchOperationType": [
          "test_patch_operation_types",
          "test_patch_operation_enum_membership",
          "test_patch_operation_enum_completeness",
          "test_patch_operation_string_representation"
        ],
        "TestInsertPosition": [
          "test_insert_positions",
          "test_insert_position_enum_membership",
          "test_insert_position_logical_grouping",
          "test_insert_position_enum_completeness"
        ],
        "TestRecoveryStrategy": [
          "test_recovery_strategies",
          "test_recovery_strategy_enum_membership",
          "test_recovery_strategy_enum_completeness",
          "test_recovery_strategy_semantic_ordering"
        ],
        "TestErrorSeverity": [
          "test_error_severities",
          "test_error_severity_enum_completeness",
          "test_error_severity_logical_ordering",
          "test_error_severity_enum_membership"
        ],
        "TestPatchError": [
          "test_patch_error_catching",
          "test_patch_error_inheritance",
          "test_patch_error_raising",
          "test_patch_error_with_message",
          "test_patch_error_creation"
        ],
        "TestPatchResult": [
          "test_patch_result_creation_minimal",
          "test_patch_result_creation_complete",
          "test_patch_result_immutability",
          "test_patch_result_default_values"
        ],
        "TestPatchOperation": [
          "test_patch_operation_complex_values",
          "test_patch_operation_from_dict_missing_value",
          "test_patch_operation_from_dict_missing_operation",
          "test_patch_operation_from_dict_missing_target",
          "test_patch_operation_creation_minimal",
          "test_patch_operation_from_dict_minimal",
          "test_patch_operation_creation_complete",
          "test_patch_operation_from_dict_valid"
        ],
        "TestXPathContext": [
          "test_xpath_context_creation_complete",
          "test_xpath_context_variables_access",
          "test_xpath_context_namespace_access",
          "test_xpath_context_creation_minimal"
        ],
        "TestProcessingContext": [
          "test_processing_context_post_init_none_values",
          "test_processing_context_post_init_existing_values",
          "test_processing_context_creation_minimal",
          "test_processing_context_list_manipulation",
          "test_processing_context_creation_complete",
          "test_processing_context_operation_tracking"
        ],
        "TestDataClassIntegration": [
          "test_processing_context_with_patch_results",
          "test_patch_operation_with_insert_position",
          "test_patch_result_with_error_severity",
          "test_complex_workflow_integration"
        ]
      }
    },
    {
      "file": "tests/test_coverage_configuration.py",
      "total_methods": 16,
      "test_methods": 16,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "test_module",
        "sys",
        "subprocess",
        "configparser",
        "pytest",
        "json",
        "pytest_cov",
        "coverage",
        "os",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestCoverageConfiguration": [
          "test_coverage_measurement_dry_run",
          "test_coverage_configuration_files_exist",
          "test_coverage_source_paths",
          "test_coverage_report_formats",
          "test_coveragerc_configuration",
          "test_coverage_omit_patterns",
          "test_pyproject_toml_coverage_config",
          "test_pytest_cov_available"
        ],
        "TestCoverageIntegration": [
          "test_coverage_threshold_configuration",
          "test_pytest_cov_integration",
          "test_coverage_with_simple_test"
        ],
        "TestCoverageReporting": [
          "test_xml_report_configuration",
          "test_coverage_report_generation_simulation",
          "test_html_report_configuration",
          "test_coverage_context_support",
          "test_json_report_configuration"
        ]
      }
    },
    {
      "file": "tests/test_design_token_extractor_basic.py",
      "total_methods": 28,
      "test_methods": 19,
      "fixtures": 0,
      "helper_methods": 9,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "sys",
        "unittest",
        "zipfile",
        "json",
        "os",
        "tools.design_token_extractor.DesignTokenExtractor",
        "shutil",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestDesignTokenExtractorBasic": [
          "test_detect_file_format_potx",
          "tearDown",
          "test_theme_colors_mapping",
          "test_detect_file_format_odp",
          "setUp",
          "test_detect_file_format_pptx",
          "test_extractor_initialization",
          "test_detect_file_format_unknown",
          "test_extractor_initialization_with_format"
        ],
        "TestDesignTokenExtractorFileHandling": [
          "tearDown",
          "setUp",
          "test_extract_from_mock_pptx",
          "create_mock_pptx",
          "test_extract_from_nonexistent_file"
        ],
        "TestDesignTokenExtractorConstants": [
          "test_theme_colors_naming",
          "test_theme_colors_completeness"
        ],
        "TestDesignTokenExtractorFormats": [
          "setUp",
          "test_powerpoint_extensions",
          "test_opendocument_extensions",
          "tearDown"
        ],
        "TestDesignTokenExtractorEdgeCases": [
          "tearDown",
          "test_file_without_extension",
          "setUp",
          "test_invalid_zip_file",
          "test_empty_file"
        ],
        "TestDesignTokenExtractorOutputFormats": [
          "test_stylestack_format",
          "test_custom_format",
          "test_w3c_format"
        ]
      }
    },
    {
      "file": "tests/test_design_token_extractor_comprehensive.py",
      "total_methods": 58,
      "test_methods": 35,
      "fixtures": 0,
      "helper_methods": 23,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "unittest.mock.MagicMock",
        "sys",
        "unittest",
        "zipfile",
        "unittest.mock.Mock",
        "lxml.etree",
        "json",
        "os",
        "tools.design_token_extractor.DesignTokenExtractor",
        "shutil",
        "unittest.mock.patch",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestDesignTokenExtractorBasic": [
          "tearDown",
          "setUp",
          "test_theme_colors_constants",
          "test_extractor_initialization_default",
          "test_extractor_initialization_invalid_format",
          "test_extractor_initialization_w3c"
        ],
        "TestFileFormatDetection": [
          "test_detect_unknown_format",
          "test_detect_odp_format",
          "tearDown",
          "setUp",
          "test_detect_pptx_format",
          "test_detect_odt_format",
          "test_detect_potx_format"
        ],
        "TestOOXMLExtraction": [
          "tearDown",
          "create_test_pptx",
          "setUp",
          "test_extract_from_pptx_file",
          "test_extract_master_styles",
          "test_extract_basic_ooxml",
          "test_extract_theme_colors"
        ],
        "TestODFExtraction": [
          "tearDown",
          "create_test_odp",
          "test_extract_odf_content",
          "setUp",
          "test_extract_odf_styles",
          "test_extract_from_odp_file"
        ],
        "TestColorAnalysis": [
          "setUp",
          "test_extract_color_from_props",
          "test_color_similarity_calculation",
          "test_find_similar_colors"
        ],
        "TestTokenCompilation": [
          "test_compile_tokens_stylestack_format",
          "setUp",
          "test_compile_w3c_format_detailed",
          "test_compile_stylestack_format_detailed",
          "test_compile_tokens_w3c_format"
        ],
        "TestImageAndAssetAnalysis": [
          "tearDown",
          "setUp",
          "test_classify_image_type",
          "test_get_image_dimensions",
          "test_analyze_image_file"
        ],
        "TestBrandConsistencyAnalysis": [
          "setUp",
          "test_organize_brand_assets",
          "test_analyze_brand_consistency"
        ],
        "TestLayoutAndSpacingAnalysis": [
          "setUp",
          "test_analyze_common_margins"
        ],
        "TestExtractAndSave": [
          "tearDown",
          "setUp",
          "test_extract_and_save_with_assets",
          "create_minimal_pptx",
          "test_extract_and_save_basic"
        ],
        "TestErrorHandling": [
          "test_color_similarity_invalid_colors",
          "tearDown",
          "setUp",
          "test_extract_from_invalid_zip",
          "test_extract_from_nonexistent_file"
        ],
        "TestStyleStackToolsIntegration": [
          "setUp",
          "test_extract_with_stylestack_tools_mocked",
          "tearDown"
        ]
      }
    },
    {
      "file": "tests/test_design_token_extractor_foundation.py",
      "total_methods": 33,
      "test_methods": 32,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "TestEdgeCasesAndErrorHandling.extract_worker"
      ],
      "imports": [
        "unittest.mock.Mock",
        "tests.mocks.get_mock",
        "tools.design_token_extractor.TokenExtractionError",
        "unittest.mock.patch",
        "tests.fixtures.mock_ooxml_processor",
        "unittest.mock.MagicMock",
        "tests.fixtures.sample_design_tokens",
        "tests.mocks.create_standard_mocks",
        "threading",
        "json",
        "typing.Dict",
        "tools.design_token_extractor.TokenTransformer",
        "tests.fixtures.temp_dir",
        "pytest",
        "tools.design_token_extractor.TokenValidator",
        "pathlib.Path",
        "typing.Any",
        "tools.design_token_extractor.DesignTokenExtractor",
        "time"
      ],
      "class_methods": {
        "TestDesignTokenExtractor": [
          "test_initialization",
          "test_token_extraction_error_handling",
          "test_initialization_with_config",
          "test_metadata_extraction",
          "test_token_extraction_with_validation",
          "test_nested_token_extraction",
          "test_basic_token_extraction",
          "test_token_filtering"
        ],
        "TestTokenValidator": [
          "test_invalid_token_schema",
          "test_validator_initialization",
          "test_spacing_validation",
          "test_comprehensive_validation",
          "test_valid_token_schema",
          "test_typography_validation",
          "test_token_value_validation"
        ],
        "TestTokenTransformer": [
          "test_token_format_conversion",
          "test_transformer_initialization",
          "test_token_filtering_by_type",
          "test_token_flattening",
          "test_token_prefix_addition",
          "test_token_expansion"
        ],
        "TestTokenExtractionIntegration": [
          "test_batch_extraction",
          "test_extraction_with_transformation",
          "test_file_based_extraction",
          "test_ooxml_based_extraction",
          "test_api_based_extraction"
        ],
        "TestTokenExtractionPerformance": [
          "test_memory_efficient_extraction",
          "test_large_dataset_extraction"
        ],
        "TestEdgeCasesAndErrorHandling": [
          "test_empty_token_extraction",
          "test_concurrent_extraction",
          "test_unicode_token_handling",
          "extract_worker",
          "test_malformed_token_data"
        ]
      }
    },
    {
      "file": "tests/test_emu_type_system.py",
      "total_methods": 35,
      "test_methods": 34,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tools.emu_types.emu_to_cm",
        "tools.emu_types.EMUValue",
        "tools.emu_types.Point",
        "sys",
        "tools.emu_types.EMUConversionError",
        "unittest",
        "tools.emu_types.points_to_emu",
        "tools.emu_types.cm_to_emu",
        "tools.emu_types.Rectangle",
        "tools.emu_types.emu_to_inches",
        "tools.emu_types.inches_to_emu",
        "tools.emu_types.EMUOverflowError",
        "os",
        "tools.emu_types.emu_to_points"
      ],
      "class_methods": {
        "TestEMUValue": [
          "test_emu_value_precision",
          "test_emu_value_arithmetic_operations",
          "test_emu_value_from_string",
          "test_emu_value_creation",
          "test_emu_value_type_validation",
          "test_emu_value_mixed_operations",
          "test_emu_value_overflow_protection",
          "test_emu_value_comparison_operations",
          "test_emu_value_string_representation"
        ],
        "TestUnitConversions": [
          "test_emu_to_inches_conversion",
          "test_round_trip_conversions",
          "test_emu_to_cm_conversion",
          "test_points_to_emu_conversion",
          "test_inches_to_emu_conversion",
          "test_cm_to_emu_conversion",
          "test_emu_to_points_conversion"
        ],
        "TestPoint": [
          "test_point_distance",
          "test_point_operations",
          "test_point_to_ooxml",
          "test_point_creation",
          "test_point_string_representation"
        ],
        "TestRectangle": [
          "test_rectangle_contains_point",
          "test_rectangle_to_ooxml",
          "test_rectangle_properties",
          "test_rectangle_string_representation",
          "test_rectangle_creation",
          "test_rectangle_scaling",
          "test_rectangle_intersection"
        ],
        "TestEMUErrorHandling": [
          "test_negative_dimensions",
          "test_division_by_zero",
          "test_invalid_conversions",
          "test_extreme_values"
        ],
        "TestEMUIntegrationWithFormulas": [
          "test_grid_calculations_with_emu",
          "get_column_x",
          "test_emu_in_formula_context"
        ]
      }
    },
    {
      "file": "tests/test_emu_types_comprehensive.py",
      "total_methods": 43,
      "test_methods": 43,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "math",
        "tools.emu_types.EMUValue",
        "sys",
        "tools.emu_types.EMU_PER_INCH",
        "tools.emu_types.EMUConversionError",
        "unittest",
        "tools.emu_types.EMU_PER_CM",
        "tools.emu_types.EMU_PER_POINT",
        "tools.emu_types.MAX_EMU_VALUE",
        "tools.emu_types.MIN_EMU_VALUE",
        "tools.emu_types.EMUOverflowError",
        "os"
      ],
      "class_methods": {
        "TestEMUConstants": [
          "test_emu_constants",
          "test_emu_limits"
        ],
        "TestEMUExceptions": [
          "test_emu_overflow_error",
          "test_emu_conversion_error"
        ],
        "TestEMUValueCreation": [
          "test_create_from_float",
          "test_create_from_string_float",
          "test_create_from_string_int",
          "test_create_negative",
          "test_create_zero",
          "test_create_from_int"
        ],
        "TestEMUValueConversions": [
          "test_to_inches",
          "test_to_cm",
          "test_to_points",
          "test_to_ooxml_attr"
        ],
        "TestEMUValueArithmetic": [
          "test_subtraction_emu_int",
          "test_division_int_emu",
          "test_modulo",
          "test_addition_emu_emu",
          "test_multiplication_int_emu",
          "test_division_emu_int",
          "test_multiplication_emu_emu",
          "test_subtraction_emu_emu",
          "test_addition_int_emu",
          "test_subtraction_int_emu",
          "test_multiplication_emu_int",
          "test_division_emu_emu",
          "test_floor_division",
          "test_power",
          "test_addition_emu_int"
        ],
        "TestEMUValueComparisons": [
          "test_inequality_emu_emu",
          "test_equality_emu_emu",
          "test_equality_emu_int",
          "test_greater_than",
          "test_less_than",
          "test_less_than_or_equal",
          "test_greater_than_or_equal"
        ],
        "TestEMUValueEdgeCases": [
          "test_large_values",
          "test_precision_preservation",
          "test_division_by_zero",
          "test_small_values"
        ],
        "TestEMUValueRealWorldScenarios": [
          "test_page_dimensions",
          "test_font_size_calculations",
          "test_margin_calculations"
        ]
      }
    },
    {
      "file": "tests/test_enhanced_schema_integration.py",
      "total_methods": 32,
      "test_methods": 14,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "os",
        "typing.Optional",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "TestEnhancedSchemaIntegration": [
          "test_schema_validation_with_existing_files",
          "_load_sample_tokens",
          "_resolve_token_hierarchy",
          "test_brand_compliance_integration",
          "_validate_with_enhanced_schema",
          "_validate_token_collection",
          "_parse_expression",
          "test_schema_validation_pipeline_integration",
          "_validate_brand_compliance",
          "_validate_expression_dependencies",
          "test_mathematical_expression_parsing_integration",
          "test_accessibility_validation_integration",
          "test_theme_resolver_integration",
          "_resolve_theme_tokens",
          "test_performance_with_large_token_sets",
          "test_error_handling_and_recovery",
          "_create_enhanced_schema",
          "_validate_accessibility",
          "test_build_system_integration",
          "_generate_ooxml_updates",
          "_build_platform_tokens",
          "_generate_large_token_set",
          "test_variable_resolver_integration",
          "test_ooxml_processor_integration"
        ],
        "MockValidationResult": [
          "__init__"
        ],
        "MockResult": [
          "__init__"
        ],
        "TestBackwardCompatibilityIntegration": [
          "test_migration_utilities",
          "_process_template_data",
          "_migrate_legacy_to_enhanced",
          "test_legacy_schema_still_works",
          "_validate_legacy_tokens",
          "test_existing_template_processing"
        ]
      }
    },
    {
      "file": "tests/test_enhanced_variable_substitution.py",
      "total_methods": 13,
      "test_methods": 11,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "tools.variable_substitution.VariableSubstitutionPipeline",
        "sys",
        "tools.variable_substitution.CarrierVariableProcessor",
        "unittest",
        "tools.substitution.carrier_processor.CarrierVariableType",
        "typing.Any",
        "tools.variable_substitution.SubstitutionError",
        "json",
        "typing.Dict",
        "os",
        "tools.substitution.carrier_processor.CarrierVariableDefinition",
        "tools.variable_substitution.EnhancedSubstitutionConfig",
        "tools.variable_substitution.SubstitutionResult",
        "pathlib.Path",
        "time",
        "typing.List",
        "tools.variable_substitution.EnhancedSubstitutionPipeline"
      ],
      "class_methods": {
        "TestEnhancedVariableSubstitutionPipeline": [
          "test_backward_compatibility",
          "test_mixed_variable_types",
          "test_enhanced_pipeline_initialization",
          "setUp",
          "test_error_handling_and_reporting",
          "test_emu_precision_validation",
          "test_statistics_tracking",
          "test_standard_vs_enhanced_pipeline_comparison",
          "test_design_token_layer_management",
          "test_carrier_variable_substitution"
        ],
        "TestCarrierVariableProcessorIntegration": [
          "setUp",
          "test_carrier_variable_processing_and_substitution",
          "test_processing_statistics"
        ]
      }
    },
    {
      "file": "tests/test_exemplar_generator.py",
      "total_methods": 21,
      "test_methods": 20,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "exemplar_generator.DesignConstraint",
        "tempfile",
        "exemplar_generator.VariableEmbedding",
        "sys",
        "exemplar_generator.QualityReport",
        "unittest",
        "zipfile",
        "exemplar_generator.QualityStandard",
        "xml.etree.ElementTree",
        "exemplar_generator.CompatibilityReport",
        "exemplar_generator.ExemplarGenerator",
        "exemplar_generator.TemplateSpecification",
        "json",
        "os",
        "exemplar_generator.GenerationLevel",
        "exemplar_generator.TemplateCategory",
        "exemplar_generator.GenerationResult",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestExemplarGenerator": [
          "setUp"
        ],
        "TestTemplateGeneration": [
          "test_variable_embedding_in_theme",
          "test_basic_exemplar_generation",
          "test_complete_template_generation",
          "test_variable_extension_format",
          "test_cross_application_generation"
        ],
        "TestQualityAssurance": [
          "test_brand_customization_validation",
          "test_quality_report_generation",
          "test_template_completeness_validation",
          "test_professional_design_validation",
          "test_accessibility_validation"
        ],
        "TestCrossApplicationCompatibility": [
          "test_libreoffice_compatibility",
          "test_cross_platform_validation",
          "test_excel_compatibility",
          "test_google_workspace_compatibility",
          "test_word_compatibility",
          "test_powerpoint_compatibility"
        ],
        "TestExemplarQualityStandards": [
          "test_professional_design_constraints",
          "test_100_percent_coverage_achievement",
          "test_accessibility_standards_compliance",
          "test_enterprise_quality_standards"
        ]
      }
    },
    {
      "file": "tests/test_extension_schema.py",
      "total_methods": 29,
      "test_methods": 18,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "enum.Enum",
        "dataclasses.dataclass",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "tools.extension_schema_validator.VariableType",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {
        "VariableScope": [],
        "OOXMLValueType": [],
        "VariableDefinition": [],
        "TestExtensionSchemaValidation": [
          "test_valid_dimension_variable_schema",
          "test_invalid_variable_missing_required_fields",
          "test_valid_font_variable_schema",
          "test_xpath_validation",
          "test_invalid_variable_wrong_enum_values",
          "test_variable_id_naming_conventions",
          "test_valid_color_variable_schema",
          "test_dependency_validation"
        ],
        "TestVariableMetadataManagement": [
          "test_variable_dependency_resolution",
          "test_circular_dependency_detection",
          "test_variable_collection_management"
        ],
        "TestOOXMLValueTypeHandling": [
          "test_dimension_value_types",
          "test_font_value_types",
          "test_color_value_types"
        ],
        "TestSchemaErrorHandling": [
          "_validate_variable_dependencies",
          "_get_validation_errors",
          "_validate_xpath",
          "_validate_font_value_type",
          "_get_xpath_error",
          "_validate_variable_schema",
          "_create_variable_manager",
          "test_detailed_validation_errors",
          "_validate_color_value_type",
          "test_xpath_syntax_error_reporting",
          "_validate_dimension_value_type",
          "_validate_variable_id"
        ],
        "TestIntegration": [
          "test_full_variable_config_validation",
          "_validate_full_config",
          "test_variable_extraction_from_ooxml"
        ]
      }
    },
    {
      "file": "tests/test_extension_schema_validator_comprehensive.py",
      "total_methods": 33,
      "test_methods": 27,
      "fixtures": 0,
      "helper_methods": 6,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "tools.extension_schema_validator.VariableScope",
        "tools.extension_schema_validator.ValidationError",
        "sys",
        "tools.extension_schema_validator.OOXMLValueType",
        "tools.extension_schema_validator.ValidationResult",
        "unittest",
        "tools.extension_schema_validator.validate_variable_file",
        "shutil",
        "json",
        "os",
        "tools.extension_schema_validator.VariableType",
        "tools.extension_schema_validator.ExtensionSchemaValidator",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestVariableEnums": [
          "test_ooxml_value_type_enum",
          "test_variable_type_enum",
          "test_variable_scope_enum"
        ],
        "TestValidationError": [
          "test_validation_error_with_path",
          "test_validation_error_creation"
        ],
        "TestValidationResult": [
          "test_validation_result_valid",
          "test_validation_result_invalid"
        ],
        "TestExtensionSchemaValidator": [
          "test_validator_initialization",
          "setUp",
          "test_validate_variable_invalid_type",
          "test_validate_variable_invalid_scope",
          "test_validate_variable_valid_color",
          "test_validate_variables_list_mixed",
          "test_validate_variable_missing_required_field",
          "test_validate_variables_list_valid",
          "test_validate_variable_valid_font"
        ],
        "TestVariableValidationEdgeCases": [
          "test_validate_empty_variables_list",
          "test_validate_none_variable",
          "setUp",
          "test_validate_none_variables_list",
          "test_validate_empty_variable",
          "test_validate_variable_with_extra_fields"
        ],
        "TestColorValidation": [
          "setUp",
          "test_validate_invalid_hex_color",
          "test_validate_hex_color"
        ],
        "TestFileValidation": [
          "tearDown",
          "setUp",
          "test_validate_invalid_json_file",
          "test_validate_nonexistent_file",
          "test_validate_valid_json_file"
        ],
        "TestValidationPerformance": [
          "setUp",
          "test_validate_large_variable_list",
          "test_validate_complex_variable"
        ]
      }
    },
    {
      "file": "tests/test_formula_parser.py",
      "total_methods": 40,
      "test_methods": 34,
      "fixtures": 0,
      "helper_methods": 6,
      "unused_methods": [],
      "imports": [
        "sys",
        "tools.formula_parser.BinaryOpAST",
        "tools.formula_parser.FormulaParser",
        "unittest",
        "tools.formula_parser.VariableAST",
        "tools.formula_parser.ExpressionAST",
        "tools.formula_parser.FunctionCallAST",
        "tools.formula_parser.NumberAST",
        "tools.formula_parser.FormulaError",
        "tools.formula_parser.SyntaxError",
        "tools.formula_parser.Token",
        "tools.formula_parser.TokenType",
        "os",
        "tools.formula_parser.UnaryOpAST"
      ],
      "class_methods": {
        "TestTokenizer": [
          "setUp",
          "test_parentheses",
          "test_variables",
          "test_basic_operators",
          "test_whitespace_handling",
          "test_function_calls",
          "test_basic_numbers",
          "test_complex_expression"
        ],
        "TestASTParsing": [
          "test_binary_operations",
          "setUp",
          "test_simple_variable",
          "test_nested_expressions",
          "test_function_calls",
          "test_simple_number",
          "test_unary_operations",
          "test_parentheses_precedence"
        ],
        "TestDependencyExtraction": [
          "setUp",
          "test_multiple_variable_dependencies",
          "test_no_dependencies",
          "test_duplicate_dependencies",
          "test_function_parameter_dependencies",
          "test_nested_dependencies",
          "test_simple_variable_dependency"
        ],
        "TestSyntaxValidation": [
          "test_invalid_expressions",
          "test_error_messages",
          "setUp",
          "test_error_positions",
          "test_valid_expressions"
        ],
        "TestFormulaEvaluation": [
          "test_division_by_zero_error",
          "test_variable_arithmetic",
          "test_undefined_variable_error",
          "setUp",
          "test_complex_expression_evaluation",
          "test_arithmetic_evaluation",
          "test_variable_evaluation",
          "test_number_evaluation"
        ],
        "TestErrorHandling": [
          "setUp",
          "test_evaluation_error_context",
          "test_tokenizer_error_handling",
          "test_parser_error_recovery"
        ]
      }
    },
    {
      "file": "tests/test_formula_variable_resolver.py",
      "total_methods": 29,
      "test_methods": 27,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [],
      "imports": [
        "tools.formula_variable_resolver.DependencyGraph",
        "unittest",
        "tools.formula_variable_resolver.VariableNotFoundError",
        "tools.formula_variable_resolver.CircularDependencyError",
        "tools.emu_types.inches_to_emu",
        "tools.formula_variable_resolver.FormulaVariableResolver",
        "tools.formula_variable_resolver.VariableDefinition"
      ],
      "class_methods": {
        "TestDependencyGraph": [
          "test_topological_sort_with_cycle",
          "setUp",
          "test_add_variable_with_dependencies",
          "test_topological_sort_complex",
          "test_detect_cycles_no_cycle",
          "test_topological_sort_simple",
          "test_get_dependents",
          "test_detect_cycles_complex_cycle",
          "test_detect_cycles_simple_cycle"
        ],
        "TestFormulaVariableResolver": [
          "test_build_dependency_graph",
          "test_layer_priority_override",
          "test_invalidate_cache_all",
          "test_formula_error_handling",
          "test_add_layer_invalid_layer",
          "test_invalidate_cache_specific",
          "test_complex_formula_with_dependencies",
          "test_non_formula_string_handling",
          "test_emu_value_integration",
          "test_resolve_all_simple",
          "test_add_layer_simple",
          "test_resolve_variable_circular_dependency",
          "setUp",
          "test_resolve_variable_simple_value",
          "test_resolve_variable_caching",
          "test_resolve_all_with_context",
          "test_resolve_variable_not_found",
          "test_get_dependency_info",
          "test_resolve_variable_formula",
          "test_resolve_variable_with_context"
        ]
      }
    },
    {
      "file": "tests/test_json_patch_parser_comprehensive.py",
      "total_methods": 51,
      "test_methods": 41,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "JSONPatchParser.apply_patch"
      ],
      "imports": [
        "tempfile",
        "tools.json_patch_parser.PatchOptimizer",
        "tools.json_patch_parser.PatchValidationError",
        "tools.json_patch_parser.JSONPathResolver",
        "pytest",
        "json",
        "tools.json_patch_parser.JSONPatchParser",
        "tools.json_patch_parser.PatchOperation",
        "tools.json_patch_parser.PatchExecutor",
        "os",
        "pathlib.Path"
      ],
      "class_methods": {
        "JSONPatchParser": [
          "parse_patch_file",
          "validate_patch",
          "__init__",
          "parse_patch_string",
          "apply_patch"
        ],
        "PatchOperation": [
          "__init__"
        ],
        "PatchValidationError": [],
        "JSONPathResolver": [
          "set_path",
          "resolve_path"
        ],
        "PatchExecutor": [
          "execute_batch"
        ],
        "PatchOptimizer": [
          "optimize_patches"
        ],
        "TestJSONPatchParser": [
          "test_parse_patch_string_invalid",
          "test_parse_patch_file_existing",
          "test_parse_patch_string_empty",
          "test_validate_patch_valid",
          "test_parser_initialization_default",
          "test_validate_patch_invalid_operation",
          "test_parse_patch_string_valid",
          "test_parse_patch_file_nonexistent",
          "test_parser_initialization_custom"
        ],
        "TestPatchOperation": [
          "test_patch_operation_remove",
          "test_patch_operation_creation",
          "test_patch_operation_replace",
          "test_patch_operation_copy",
          "test_patch_operation_move"
        ],
        "TestJSONPathResolver": [
          "test_resolve_nested_path",
          "test_set_path_nested",
          "test_set_path_simple",
          "test_path_resolver_initialization",
          "test_resolve_simple_path",
          "test_resolve_array_path"
        ],
        "TestPatchExecutor": [
          "test_execute_single_patch",
          "test_executor_initialization",
          "test_execute_remove_operation",
          "test_execute_empty_patches",
          "test_execute_multiple_patches",
          "test_execute_add_operation"
        ],
        "TestPatchOptimizer": [
          "test_optimize_non_conflicting_patches",
          "test_optimizer_initialization",
          "test_optimize_single_patch",
          "test_optimize_redundant_patches",
          "test_optimize_empty_patches"
        ],
        "TestPatchIntegration": [
          "test_complete_patch_workflow",
          "test_error_handling_workflow",
          "test_performance_considerations",
          "test_validation_integration",
          "test_complex_document_patching"
        ],
        "TestEdgeCasesAndErrorHandling": [
          "test_large_value_handling",
          "test_null_document_handling",
          "test_invalid_path_handling",
          "test_circular_reference_handling",
          "test_unicode_handling"
        ]
      }
    },
    {
      "file": "tests/test_json_token_parser.py",
      "total_methods": 19,
      "test_methods": 18,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "TestJSONTokenParser.setup_method"
      ],
      "imports": [
        "tempfile",
        "sys",
        "tools.token_parser.TokenParser",
        "tools.token_resolver.TokenResolver",
        "pytest",
        "json",
        "re",
        "pathlib.Path",
        "time"
      ],
      "class_methods": {
        "TestJSONTokenStructure": [
          "test_core_design_tokens_json_structure",
          "test_organization_patch_json_structure",
          "test_channel_config_json_structure"
        ],
        "TestJSONTokenParser": [
          "test_token_variable_substitution_json",
          "test_hierarchical_token_resolution_json",
          "test_load_json_token_file",
          "test_json_format_validation",
          "test_json_schema_compliance",
          "setup_method"
        ],
        "TestJSONTokenValidation": [
          "test_font_family_validation",
          "test_invalid_token_types",
          "test_dimension_value_validation",
          "test_missing_required_fields",
          "test_color_value_validation"
        ],
        "TestJSONTokenPerformance": [
          "test_memory_efficiency",
          "test_json_parsing_speed"
        ],
        "TestCrossPllatformCompatibility": [
          "test_rest_api_compatibility",
          "test_google_apps_script_compatibility",
          "test_office_js_compatibility"
        ]
      }
    },
    {
      "file": "tests/test_memory_optimizer_comprehensive.py",
      "total_methods": 85,
      "test_methods": 54,
      "fixtures": 0,
      "helper_methods": 16,
      "unused_methods": [
        "TestConcurrentMemoryManager.allocate_memory",
        "TestBatchProcessorDetailed.allocating_task",
        "TestConcurrentMemoryManager.memory_pressure",
        "TestMemoryOptimizationDecorators.sample_task",
        "ResetableObject.reset",
        "TestBatchProcessor.cpu_task",
        "TestBatchProcessorAdvanced.failing_task",
        "TestBatchProcessorDetailed.memory_intensive_task"
      ],
      "imports": [
        "tools.memory_optimizer.ConcurrentMemoryManager",
        "unittest.mock.Mock",
        "tools.memory_optimizer.MemoryManager",
        "unittest.mock.patch",
        "tools.memory_optimizer.StreamingOOXMLProcessor",
        "tempfile",
        "unittest.mock.MagicMock",
        "collections.deque",
        "gc",
        "tools.memory_optimizer.memory_optimized",
        "threading",
        "tools.memory_optimizer.streaming_processing",
        "sys",
        "tools.memory_optimizer.MemoryStats",
        "unittest",
        "tools.memory_optimizer.batch_processing",
        "tools.memory_optimizer.BatchProcessor",
        "pathlib.Path",
        "tools.memory_optimizer.MemoryPool",
        "concurrent.futures",
        "shutil",
        "os",
        "time"
      ],
      "class_methods": {
        "TestMemoryStats": [
          "test_memory_stats_creation",
          "test_memory_stats_capture",
          "test_memory_stats_defaults"
        ],
        "TestMemoryPool": [
          "test_memory_pool_allocate",
          "test_memory_pool_fragmentation",
          "test_memory_pool_initialization"
        ],
        "TestMemoryManager": [
          "test_memory_manager_context_manager",
          "tearDown",
          "test_memory_manager_allocation_tracking",
          "setUp",
          "test_memory_manager_with_monitoring",
          "test_memory_manager_initialization",
          "test_memory_manager_garbage_collection"
        ],
        "TestStreamingOOXMLProcessor": [
          "tearDown",
          "setUp",
          "test_streaming_processor_initialization",
          "create_test_xml_file",
          "test_streaming_memory_usage",
          "test_streaming_xml_processing",
          "test_streaming_element_iterator"
        ],
        "TestBatchProcessor": [
          "test_batch_memory_optimization",
          "tearDown",
          "setUp",
          "cpu_task",
          "test_batch_processing_tasks",
          "test_batch_parallel_processing",
          "test_batch_processor_initialization"
        ],
        "TestConcurrentMemoryManager": [
          "test_concurrent_memory_allocation",
          "allocate_memory",
          "test_concurrent_garbage_collection",
          "test_concurrent_manager_initialization",
          "memory_pressure"
        ],
        "TestMemoryOptimizationDecorators": [
          "test_batch_processing_function",
          "memory_intensive_function",
          "test_streaming_processing_function",
          "test_memory_optimized_decorator",
          "sample_task"
        ],
        "TestMemoryMonitoring": [
          "test_memory_monitoring_with_psutil",
          "test_memory_monitoring_without_psutil"
        ],
        "TestMemoryPressureHandling": [
          "test_memory_cleanup_strategies",
          "test_memory_pressure_detection",
          "test_memory_pressure_response"
        ],
        "TestMemoryOptimizationIntegration": [
          "tearDown",
          "setUp",
          "test_integration_with_large_files",
          "process_data",
          "test_integration_with_concurrent_processing"
        ],
        "TestMemoryPerformance": [
          "test_garbage_collection_performance",
          "test_memory_allocation_performance"
        ],
        "TestMemoryPoolAdvanced": [
          "test_memory_pool_object_reset",
          "test_memory_pool_hit_rate_calculation"
        ],
        "ClearableObject": [
          "__init__",
          "clear"
        ],
        "ResetableObject": [
          "__init__",
          "reset"
        ],
        "TestMemoryManagerAdvanced": [
          "test_comprehensive_memory_stats",
          "tearDown",
          "setUp",
          "test_memory_pressure_handling",
          "test_memory_limit_context_manager",
          "test_memory_manager_monitoring_lifecycle"
        ],
        "TestStreamingProcessorAdvanced": [
          "setUp",
          "tearDown",
          "test_streaming_processor_with_large_file_simulation"
        ],
        "TestBatchProcessorAdvanced": [
          "setUp",
          "failing_task",
          "test_batch_processor_error_handling"
        ],
        "TestStreamingProcessorDetailed": [
          "setUp",
          "test_cleanup_temp_files",
          "test_should_process_file_logic",
          "test_streaming_xml_processing_methods"
        ],
        "TestBatchProcessorDetailed": [
          "test_batch_processor_memory_cleanup",
          "setUp",
          "test_batch_processor_with_memory_monitoring",
          "allocating_task",
          "memory_intensive_task"
        ],
        "TestMemoryOptimizationFunctions": [
          "process_items",
          "test_batch_processing_decorator",
          "process_data",
          "test_streaming_processing_decorator"
        ],
        "TestMemoryManagerContexts": [
          "test_nested_memory_limit_contexts",
          "test_memory_manager_full_context_lifecycle"
        ],
        "TestErrorRecoveryScenarios": [
          "test_concurrent_memory_manager_without_dependencies",
          "test_memory_stats_without_psutil",
          "test_memory_manager_error_conditions"
        ]
      }
    },
    {
      "file": "tests/test_multi_format_ooxml_handler_modern.py",
      "total_methods": 24,
      "test_methods": 20,
      "fixtures": 0,
      "helper_methods": 4,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "tools.handlers.types.OOXMLStructure",
        "unittest",
        "zipfile",
        "tools.multi_format_ooxml_handler.MultiFormatOOXMLHandler",
        "tools.handlers.types.OOXMLFormat",
        "tools.handlers.types.ProcessingResult",
        "tools.handlers.types.FormatConfiguration",
        "tools.handlers.formats.FormatRegistry",
        "tools.json_ooxml_processor.RecoveryStrategy",
        "shutil",
        "tools.handlers.integration.TokenIntegrationManager",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestOOXMLFormat": [
          "test_format_from_extension",
          "test_format_enum_values",
          "test_format_from_path"
        ],
        "TestOOXMLStructure": [
          "test_structure_with_optional_fields",
          "test_structure_creation"
        ],
        "TestFormatRegistry": [
          "test_get_all_structures",
          "test_detect_format",
          "test_get_structure"
        ],
        "TestTokenIntegrationManager": [
          "setUp",
          "test_cross_format_token_resolution",
          "test_manager_initialization",
          "test_register_format_tokens"
        ],
        "TestMultiFormatOOXMLHandler": [
          "test_handler_initialization",
          "tearDown",
          "test_handler_configuration",
          "setUp",
          "create_test_templates",
          "test_process_template_interface",
          "test_format_detection_integration",
          "test_processing_statistics_tracking"
        ],
        "TestProcessingResult": [
          "test_processing_result_creation",
          "test_processing_result_defaults"
        ],
        "TestFormatConfiguration": [
          "test_configuration_defaults",
          "test_configuration_creation"
        ]
      }
    },
    {
      "file": "tests/test_multi_org_build_orchestrator.py",
      "total_methods": 36,
      "test_methods": 26,
      "fixtures": 3,
      "helper_methods": 0,
      "unused_methods": [
        "TestMultiOrgBuildOrchestratorPerformance.large_build_dataset",
        "simulate_parallel_batch",
        "TestMultiOrgBuildOrchestratorPerformance.simulate_single_build",
        "MultiOrgBuildStats.success_rate",
        "TestMultiOrgBuildOrchestratorCore.temp_template_file",
        "TestMultiOrgBuildOrchestratorCore.sample_build_requests"
      ],
      "imports": [
        "tempfile",
        "unittest.mock.MagicMock",
        "dataclasses.dataclass",
        "sys",
        "zipfile",
        "dataclasses.asdict",
        "unittest.mock.Mock",
        "threading",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "concurrent.futures",
        "typing.Optional",
        "unittest.mock.patch",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "BuildRequest": [],
        "BuildResult": [
          "__post_init__"
        ],
        "MultiOrgBuildStats": [
          "success_rate"
        ],
        "TestMultiOrgBuildOrchestratorCore": [
          "test_resource_pooling_efficiency",
          "test_error_handling_and_resilience",
          "test_parallel_build_execution",
          "test_intelligent_work_distribution",
          "sample_build_requests",
          "test_orchestrator_initialization",
          "test_build_priority_handling",
          "temp_template_file"
        ],
        "TestMultiOrgBuildOrchestratorPerformance": [
          "test_memory_usage_optimization",
          "measure_sequential_builds",
          "test_resource_pooling_efficiency",
          "large_build_dataset",
          "measure_parallel_builds",
          "test_sequential_vs_parallel_build_performance",
          "test_concurrent_scaling_performance",
          "simulate_single_build"
        ],
        "TestMultiOrgBuildOrchestratorIntegration": [
          "test_build_py_integration",
          "test_batched_zip_manager_integration",
          "test_optimized_batch_processor_integration",
          "test_bulk_token_resolver_integration"
        ],
        "TestMultiOrgBuildOrchestratorWorkDistribution": [
          "test_adaptive_worker_scaling",
          "test_resource_contention_handling",
          "test_priority_based_scheduling",
          "test_load_balancing_across_workers"
        ],
        "TestMultiOrgBuildOrchestratorErrorHandling": [
          "test_resource_exhaustion_handling",
          "test_timeout_handling",
          "test_partial_failure_recovery",
          "test_individual_build_failure_isolation"
        ],
        "TestMultiOrgBuildOrchestratorMonitoring": [
          "test_resource_utilization_monitoring",
          "test_error_rate_tracking",
          "test_build_progress_tracking",
          "test_performance_metrics_collection"
        ]
      }
    },
    {
      "file": "tests/test_nested_reference_resolution.py",
      "total_methods": 23,
      "test_methods": 21,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestNestedReferenceResolution.setup_method",
        "TestNestedReferenceCache.setup_method"
      ],
      "imports": [
        "tools.token_parser.TokenType",
        "tools.variable_resolver.ResolvedVariable",
        "tools.variable_resolver.VariableResolver",
        "unittest.mock.Mock",
        "tools.token_parser.TokenScope",
        "typing.Any",
        "pytest",
        "typing.Dict",
        "unittest.mock.patch",
        "tools.variable_resolver.CircularReferenceError",
        "typing.List"
      ],
      "class_methods": {
        "TestNestedReferencePatterns": [
          "test_nested_reference_regex_patterns",
          "test_invalid_nested_patterns",
          "test_multiple_nested_levels",
          "test_simple_reference_not_nested",
          "test_simple_nested_reference_pattern"
        ],
        "TestNestedReferenceResolution": [
          "test_nested_resolution_with_different_values",
          "test_circular_reference_detection",
          "test_basic_nested_resolution",
          "test_multi_level_nested_resolution",
          "test_resolution_depth_limiting",
          "test_missing_target_token_error",
          "setup_method",
          "test_missing_dynamic_variable_error"
        ],
        "TestNestedReferenceCache": [
          "test_cache_hit_performance",
          "test_cache_key_generation",
          "setup_method",
          "test_cache_invalidation_on_context_change"
        ],
        "TestNestedReferenceIntegration": [
          "test_nested_references_in_ooxml_context",
          "test_integration_with_simple_references",
          "test_integration_with_formula_parser"
        ],
        "TestNestedReferenceErrorHandling": [
          "test_graceful_degradation",
          "test_validation_of_resolution_chain",
          "test_detailed_error_messages"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_extension_manager.py",
      "total_methods": 21,
      "test_methods": 11,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "TestOOXMLExtensionManager.setup_method"
      ],
      "imports": [
        "dataclasses.dataclass",
        "xml.etree.ElementTree",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "typing.Optional",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {
        "StyleStackExtension": [
          "__post_init__"
        ],
        "OOXMLExtensionManager": [
          "read_extensions_from_xml",
          "_find_or_create_extension_list",
          "_detect_primary_namespace",
          "_parse_stylestack_extension",
          "list_all_extensions",
          "__init__",
          "write_extension_to_xml",
          "remove_extension"
        ],
        "TestOOXMLExtensionManager": [
          "test_write_extension_to_clean_document",
          "test_extension_versioning",
          "test_read_written_extension",
          "test_extension_metadata_handling",
          "test_extension_removal",
          "test_multiple_extension_coexistence",
          "test_extension_preservation_during_modification",
          "test_slidemaster_extension_placement",
          "test_read_extensions_empty_document",
          "test_large_variable_set_handling",
          "setup_method",
          "test_invalid_xml_handling"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_extension_manager_comprehensive.py",
      "total_methods": 24,
      "test_methods": 21,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [],
      "imports": [
        "tools.ooxml_extension_manager.ExtensionMetadata",
        "tempfile",
        "sys",
        "unittest",
        "tools.ooxml_extension_manager.StyleStackExtension",
        "xml.etree.ElementTree",
        "tools.ooxml_extension_manager.STYLESTACK_EXTENSION_URI",
        "tools.ooxml_extension_manager.OOXMLExtensionManager",
        "json",
        "datetime.datetime",
        "os",
        "tools.ooxml_extension_manager.OOXML_NAMESPACES",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestExtensionMetadata": [
          "test_extension_metadata_defaults",
          "test_extension_metadata_creation"
        ],
        "TestStyleStackExtension": [
          "test_stylestack_extension_defaults",
          "test_from_dict_creation",
          "setUp",
          "test_to_dict_conversion",
          "test_stylestack_extension_creation"
        ],
        "TestOOXMLExtensionManager": [
          "test_remove_extension_from_xml",
          "test_namespace_handling",
          "setUp",
          "test_manager_initialization",
          "test_read_extensions_from_xml_with_extensions",
          "test_read_extensions_from_xml_no_extensions",
          "test_variables_validation",
          "test_write_extension_to_xml_update_existing",
          "test_extension_uri_validation",
          "test_xml_parsing_error_handling",
          "test_write_extension_to_xml_new_extension"
        ],
        "TestOOXMLExtensionManagerEdgeCases": [
          "test_large_variable_list",
          "setUp",
          "test_empty_xml_handling",
          "test_invalid_uri_handling",
          "test_unicode_handling",
          "test_none_xml_handling"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_extension_manager_simple.py",
      "total_methods": 14,
      "test_methods": 11,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [],
      "imports": [
        "tools.ooxml_extension_manager.ExtensionMetadata",
        "sys",
        "unittest",
        "tools.ooxml_extension_manager.StyleStackExtension",
        "xml.etree.ElementTree",
        "tools.ooxml_extension_manager.STYLESTACK_EXTENSION_URI",
        "tools.ooxml_extension_manager.OOXMLExtensionManager",
        "tools.ooxml_extension_manager.OOXML_NAMESPACES",
        "os"
      ],
      "class_methods": {
        "TestExtensionMetadata": [
          "test_extension_metadata_defaults",
          "test_extension_metadata_creation"
        ],
        "TestStyleStackExtension": [
          "setUp",
          "test_stylestack_extension_defaults",
          "test_stylestack_extension_creation"
        ],
        "TestOOXMLExtensionManager": [
          "test_namespace_handling",
          "setUp",
          "test_manager_initialization",
          "test_read_extensions_from_xml_no_extensions",
          "test_variables_validation",
          "test_extension_uri_validation"
        ],
        "TestOOXMLExtensionManagerBasic": [
          "setUp",
          "test_large_variable_list",
          "test_unicode_handling"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_fixtures.py",
      "total_methods": 23,
      "test_methods": 23,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "fixtures.ooxml_fixtures.OOXMLTestDocument",
        "xml.etree.ElementTree",
        "fixtures.ooxml_fixtures.POWERPOINT_PRESENTATION_XML",
        "fixtures.ooxml_fixtures.create_minimal_ooxml_file",
        "fixtures.ooxml_fixtures.EXCEL_WORKBOOK_XML",
        "pytest",
        "fixtures.ooxml_fixtures.extract_and_parse_xml",
        "fixtures.ooxml_fixtures.WORD_DOCUMENT_XML",
        "pathlib.Path",
        "fixtures.ooxml_fixtures.validate_ooxml_zip_structure"
      ],
      "class_methods": {
        "TestOOXMLFixtures": [
          "test_all_ooxml_documents_fixture",
          "test_ooxml_test_data_generator_fixture",
          "test_excel_document_fixture",
          "test_corrupted_ooxml_samples_fixture",
          "test_ooxml_performance_test_data_fixture",
          "test_ooxml_temp_workspace_fixture",
          "test_word_document_fixture",
          "test_ooxml_xml_samples_fixture",
          "test_ooxml_namespace_map_fixture",
          "test_powerpoint_document_fixture",
          "test_ooxml_validation_helpers_fixture"
        ],
        "TestOOXMLTestDocument": [
          "test_create_word_document",
          "test_get_xml_content",
          "test_create_excel_document",
          "test_unsupported_document_type",
          "test_create_powerpoint_document",
          "test_validate_structure",
          "test_modify_xml_content"
        ],
        "TestOOXMLUtilities": [
          "test_create_minimal_ooxml_file",
          "test_extract_and_parse_xml_invalid",
          "test_validate_ooxml_zip_structure_valid",
          "test_validate_ooxml_zip_structure_invalid",
          "test_extract_and_parse_xml_valid"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_processor.py",
      "total_methods": 18,
      "test_methods": 14,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "traceback",
        "xml.etree.ElementTree",
        "lxml.etree",
        "typing.Any",
        "pytest",
        "typing.Dict",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "MockOOXMLProcessor": [
          "apply_variable_to_element",
          "__init__",
          "find_elements_by_xpath"
        ],
        "TestOOXMLProcessor": [
          "test_namespace_aware_processing",
          "test_xpath_element_targeting_powerpoint",
          "test_complex_xpath_expressions",
          "test_lxml_xpath_integration",
          "test_large_document_performance",
          "test_variable_application_fonts",
          "test_variable_application_colors",
          "test_excel_styles_processing",
          "test_error_handling_malformed_xml",
          "test_xpath_font_targeting",
          "test_xml_serialization_integrity",
          "test_word_document_processing",
          "setup_method",
          "test_batch_variable_application",
          "test_document_structure_preservation"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_processor_comprehensive.py",
      "total_methods": 41,
      "test_methods": 34,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "typing.Tuple",
        "tools.ooxml_processor.OOXMLProcessor",
        "tempfile",
        "unittest.mock.MagicMock",
        "tools.ooxml_processor.ProcessingResult",
        "dataclasses.dataclass",
        "zipfile",
        "unittest.mock.Mock",
        "tools.ooxml_processor.XPathLibrary",
        "typing.Any",
        "pytest",
        "typing.Dict",
        "typing.Optional",
        "tools.ooxml_processor.XPathExpression",
        "unittest.mock.patch",
        "os",
        "typing.List",
        "pathlib.Path"
      ],
      "class_methods": {
        "XPathExpression": [
          "__post_init__"
        ],
        "ProcessingResult": [
          "__post_init__"
        ],
        "XPathLibrary": [
          "get_xpath"
        ],
        "OOXMLProcessor": [
          "__init__",
          "process_ooxml_file",
          "apply_variables_to_xml"
        ],
        "TestXPathExpression": [
          "test_xpath_expression_post_init",
          "test_xpath_expression_with_ooxml_namespaces",
          "test_xpath_expression_creation_minimal",
          "test_xpath_expression_creation_complete"
        ],
        "TestProcessingResult": [
          "test_processing_result_creation_complete",
          "test_processing_result_mutation",
          "test_processing_result_post_init",
          "test_processing_result_creation_minimal"
        ],
        "TestXPathLibrary": [
          "test_xpath_library_namespaces",
          "test_xpath_library_initialization",
          "test_xpath_library_expression_access",
          "test_xpath_library_color_expressions"
        ],
        "TestOOXMLProcessor": [
          "test_apply_variables_to_xml_invalid_xml",
          "test_apply_variables_validation_disabled",
          "test_apply_variables_to_xml_basic",
          "test_processor_initialization_default",
          "test_apply_variables_to_xml_empty",
          "test_apply_variables_validation_enabled",
          "test_processor_initialization_custom",
          "test_processor_stats_initialization"
        ],
        "TestOOXMLFileProcessing": [
          "test_process_ooxml_file_excel",
          "test_process_ooxml_file_word",
          "test_process_ooxml_file_nonexistent",
          "create_test_ooxml_file",
          "test_process_ooxml_file_powerpoint"
        ],
        "TestOOXMLProcessingStatistics": [
          "test_statistics_accumulation",
          "test_statistics_initialization",
          "test_statistics_tracking_xml_processing"
        ],
        "TestOOXMLProcessingIntegration": [
          "test_xpath_library_integration",
          "test_error_handling_integration",
          "test_complete_processing_workflow"
        ],
        "TestOOXMLEdgeCasesAndErrorHandling": [
          "test_unicode_content_handling",
          "test_empty_xml_content",
          "test_namespace_handling_edge_cases",
          "test_large_variable_dictionary"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_processor_methods.py",
      "total_methods": 23,
      "test_methods": 22,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "tools.ooxml_processor.OOXMLProcessor",
        "tempfile",
        "sys",
        "tools.ooxml_processor.ProcessingResult",
        "unittest",
        "zipfile",
        "xml.etree.ElementTree",
        "tools.ooxml_processor.XPathLibrary",
        "os",
        "shutil",
        "tools.ooxml_processor.XPathExpression",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestOOXMLProcessorRealMethods": [
          "test_namespace_registration",
          "setUp",
          "test_apply_variables_elementtree_simple",
          "test_processing_with_validation_disabled",
          "test_error_handling_malformed_xml",
          "test_validate_xml_integrity",
          "test_empty_variables_dict",
          "test_complex_ooxml_structure",
          "test_processing_with_validation_enabled",
          "test_stats_tracking",
          "test_apply_variables_elementtree_with_namespaces",
          "test_process_ooxml_file_structure"
        ],
        "TestLXMLSupport": [
          "test_lxml_disabled",
          "test_lxml_available_detection",
          "test_auto_detect_lxml"
        ],
        "TestXPathLibraryMethods": [
          "test_xpath_library_color_definitions",
          "test_xpath_expressions_completeness",
          "test_xpath_library_namespace_definitions"
        ],
        "TestPreservationFeatures": [
          "test_preserve_formatting_enabled",
          "test_preserve_formatting_disabled"
        ],
        "TestProcessingResultHandling": [
          "test_processing_statistics_accumulation",
          "test_processing_result_error_collection",
          "test_processing_result_success_tracking"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_processor_missing_coverage.py",
      "total_methods": 20,
      "test_methods": 18,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [],
      "imports": [
        "tools.ooxml_processor.OOXMLProcessor",
        "tempfile",
        "sys",
        "tools.ooxml_processor.ProcessingResult",
        "unittest",
        "zipfile",
        "xml.etree.ElementTree",
        "tools.ooxml_processor.XPathLibrary",
        "os",
        "shutil",
        "tools.ooxml_processor.XPathExpression",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestMissingCoverageMethods": [
          "test_process_ooxml_file_missing_file",
          "test_variable_application_error_handling",
          "test_apply_variables_elementtree_with_xpath_targeting",
          "setUp",
          "test_error_logging_during_processing",
          "test_ooxml_file_processing_with_target_files",
          "test_complex_variable_types_and_edge_cases",
          "test_apply_variable_to_elements_et_font",
          "test_apply_variable_to_elements_et_dimension",
          "test_namespace_preservation_during_processing",
          "test_validate_xml_integrity_element_count_change",
          "test_validate_xml_integrity_root_element_change",
          "test_apply_variable_to_elements_et_color",
          "test_apply_variables_with_default_values",
          "test_validate_xml_integrity_parse_error"
        ],
        "TestCoverageBoostingEdgeCases": [
          "setUp",
          "test_large_xml_processing_performance",
          "test_processor_with_all_features_disabled",
          "test_unicode_and_special_characters",
          "test_empty_xpath_library_access"
        ]
      }
    },
    {
      "file": "tests/test_ooxml_processor_supertheme_extensions.py",
      "total_methods": 15,
      "test_methods": 10,
      "fixtures": 5,
      "helper_methods": 0,
      "unused_methods": [
        "TestSuperThemeOOXMLIntegration.integration_components",
        "TestOOXMLProcessorSuperThemeExtensions.sample_presentation_xml",
        "TestOOXMLProcessorSuperThemeExtensions.aspect_ratios",
        "TestOOXMLProcessorSuperThemeExtensions.ooxml_processor",
        "TestThemeResolverSuperThemeExtensions.theme_resolver"
      ],
      "imports": [
        "io",
        "unittest.mock.Mock",
        "tools.aspect_ratio_resolver.AspectRatioResolver",
        "xml.etree.ElementTree",
        "tools.theme_resolver.ThemeResolver",
        "tools.supertheme_generator.SuperThemeVariant",
        "unittest.mock.patch",
        "typing.List",
        "tools.supertheme_generator.SuperThemeGenerator",
        "tools.ooxml_processor.OOXMLProcessor",
        "unittest.mock.MagicMock",
        "tools.emu_types.EMUValue",
        "tools.aspect_ratio_resolver.create_standard_aspect_ratios",
        "typing.Dict",
        "tools.ooxml_processor.XPathExpression",
        "zipfile",
        "pytest",
        "pathlib.Path",
        "typing.Any"
      ],
      "class_methods": {
        "TestOOXMLProcessorSuperThemeExtensions": [
          "test_relationship_files_generation",
          "sample_presentation_xml",
          "test_slide_master_structure_creation",
          "test_content_types_generation",
          "aspect_ratios",
          "test_slide_layout_creation",
          "ooxml_processor",
          "test_aspect_ratio_aware_presentation_generation"
        ],
        "TestThemeResolverSuperThemeExtensions": [
          "theme_resolver",
          "test_theme_xml_generation_with_aspect_ratios",
          "test_multi_variant_theme_generation"
        ],
        "TestSuperThemeOOXMLIntegration": [
          "test_ooxml_processor_supertheme_compatibility",
          "integration_components",
          "test_end_to_end_supertheme_ooxml_processing"
        ],
        "TestRequiredOOXMLProcessorMethods": [
          "test_required_methods_exist_or_documented"
        ]
      }
    },
    {
      "file": "tests/test_optimized_batch_processor_comprehensive.py",
      "total_methods": 51,
      "test_methods": 33,
      "fixtures": 0,
      "helper_methods": 18,
      "unused_methods": [],
      "imports": [
        "tools.optimized_batch_processor.BatchProcessingConfig",
        "unittest.mock.Mock",
        "tools.optimized_batch_processor.BatchResult",
        "unittest.mock.patch",
        "tempfile",
        "unittest.mock.MagicMock",
        "tools.optimized_batch_processor.BatchTask",
        "dataclasses.dataclass",
        "tools.optimized_batch_processor.BatchQueue",
        "tools.optimized_batch_processor.batch_processing_context",
        "threading",
        "tools.optimized_batch_processor.process_templates_batch",
        "sys",
        "unittest",
        "queue",
        "tools.optimized_batch_processor.OptimizedBatchProcessor",
        "pathlib.Path",
        "tools.optimized_batch_processor.process_single_template_variants",
        "concurrent.futures",
        "tools.optimized_batch_processor.WorkerPool",
        "shutil",
        "os",
        "time"
      ],
      "class_methods": {
        "TestBatchTask": [
          "setUp",
          "test_batch_task_default_priority",
          "tearDown",
          "test_batch_task_creation"
        ],
        "TestBatchResult": [
          "test_batch_result_success",
          "test_batch_result_failure"
        ],
        "TestBatchProcessingConfig": [
          "test_config_defaults",
          "test_config_creation"
        ],
        "TestBatchQueue": [
          "test_queue_priority_ordering",
          "tearDown",
          "setUp",
          "test_queue_get_task",
          "test_queue_add_task",
          "test_batch_queue_initialization"
        ],
        "TestWorkerPool": [
          "test_worker_pool_start_stop",
          "tearDown",
          "setUp",
          "test_worker_pool_task_processing",
          "test_worker_pool_initialization"
        ],
        "TestOptimizedBatchProcessor": [
          "tearDown",
          "test_processor_with_mocked_dependencies",
          "setUp",
          "test_processor_process_batch",
          "test_processor_initialization_with_config",
          "test_processor_initialization_default",
          "test_processor_add_task"
        ],
        "TestBatchProcessingIntegration": [
          "test_process_templates_batch_function",
          "tearDown",
          "setUp",
          "test_process_single_template_variants",
          "test_batch_processing_context_manager"
        ],
        "TestPerformanceOptimizations": [
          "test_concurrent_processing",
          "tearDown",
          "setUp",
          "test_memory_optimization",
          "test_caching_optimization"
        ],
        "TestErrorHandling": [
          "tearDown",
          "setUp",
          "test_invalid_template_handling",
          "test_worker_failure_recovery",
          "test_memory_limit_exceeded"
        ],
        "TestSystemIntegration": [
          "test_system_monitoring_integration",
          "tearDown",
          "setUp",
          "test_performance_profiling_integration",
          "test_json_patch_integration"
        ],
        "TestAdvancedFeatures": [
          "test_task_prioritization",
          "test_batch_progress_tracking",
          "tearDown",
          "setUp",
          "test_dynamic_worker_scaling"
        ]
      }
    },
    {
      "file": "tests/test_parallel_execution.py",
      "total_methods": 19,
      "test_methods": 15,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "TestParallelExecutionSystem.simulate_test_with_resources",
        "TestParallelExecutionIntegration.increment_counter",
        "TestParallelExecutionSystem.write_to_file"
      ],
      "imports": [
        "run_parallel_tests.create_reports_directory",
        "unittest.mock.MagicMock",
        "tempfile",
        "xdist.workermanage",
        "sys",
        "xdist",
        "subprocess",
        "run_parallel_tests.run_test_suite",
        "multiprocessing",
        "threading",
        "pytest",
        "json",
        "run_parallel_tests.get_optimal_worker_count",
        "unittest.mock.patch",
        "pathlib.Path",
        "time"
      ],
      "class_methods": {
        "TestParallelConfiguration": [
          "test_reports_directory_creation",
          "test_parallel_ini_configuration",
          "test_parallel_test_execution_dry_run",
          "test_test_type_filtering",
          "test_parallel_configuration_files_exist",
          "test_optimal_worker_count_calculation",
          "test_pytest_xdist_available"
        ],
        "TestParallelExecutionIntegration": [
          "test_pytest_collect_with_parallel_config",
          "test_parallel_test_isolation",
          "increment_counter",
          "test_parallel_vs_sequential_performance",
          "simulate_test_work"
        ],
        "TestParallelSafetyMarkers": [
          "test_test_categorization_by_speed",
          "test_parallel_safe_marker_exists",
          "test_parallel_unsafe_marker_concept"
        ],
        "TestParallelExecutionSystem": [
          "write_to_file",
          "test_concurrent_file_access_safety",
          "simulate_test_with_resources",
          "test_resource_cleanup_in_parallel_execution"
        ]
      }
    },
    {
      "file": "tests/test_patch_execution_engine.py",
      "total_methods": 22,
      "test_methods": 17,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestPatchExecutionEngine.pre_patch_callback",
        "TestPatchExecutionEngine.post_patch_callback",
        "TestPatchExecutionEngine.progress_callback"
      ],
      "imports": [
        "tempfile",
        "unittest",
        "tools.patch_execution_engine.ExecutionContext",
        "lxml.etree",
        "tools.patch_execution_engine.execute_patch_file",
        "tools.json_patch_parser.ValidationLevel",
        "tools.patch_execution_engine.ExecutionMode",
        "tools.patch_execution_engine.PatchExecutionEngine",
        "pathlib.Path",
        "tools.patch_execution_engine.execute_patch_content"
      ],
      "class_methods": {
        "TestPatchExecutionEngine": [
          "test_execute_patch_content_dry_run_mode",
          "test_execution_context_variables",
          "test_shared_context_in_batch",
          "progress_callback",
          "test_global_statistics",
          "test_callback_functionality",
          "test_file_execution",
          "test_execution_statistics",
          "test_batch_execution",
          "test_progress_callback",
          "test_error_handling_invalid_patch",
          "test_execution_context_metadata",
          "test_multiple_patches_execution",
          "setUp",
          "post_patch_callback",
          "test_execute_patch_content_validate_only_mode",
          "test_execute_patch_content_normal_mode",
          "test_file_not_found_error",
          "pre_patch_callback"
        ],
        "TestConvenienceFunctions": [
          "setUp",
          "test_execute_patch_content_function",
          "test_execute_patch_file_function"
        ]
      }
    },
    {
      "file": "tests/test_performance_benchmarks_comprehensive.py",
      "total_methods": 48,
      "test_methods": 43,
      "fixtures": 0,
      "helper_methods": 5,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "unittest.mock.MagicMock",
        "sys",
        "tools.performance_benchmarks.PerformanceBenchmark",
        "unittest",
        "unittest.mock.Mock",
        "tools.performance_benchmarks.BenchmarkSuite",
        "tools.performance_benchmarks.WorkloadType",
        "shutil",
        "tools.performance_benchmarks.BenchmarkResult",
        "json",
        "os",
        "tools.performance_benchmarks.PatchGenerator",
        "tools.performance_benchmarks.WorkloadConfig",
        "tools.performance_benchmarks.TemplateGenerator",
        "unittest.mock.patch",
        "pathlib.Path",
        "time"
      ],
      "class_methods": {
        "TestWorkloadType": [
          "test_workload_type_values",
          "test_workload_type_enumeration"
        ],
        "TestBenchmarkResult": [
          "test_benchmark_result_with_errors",
          "test_benchmark_result_creation",
          "test_benchmark_result_default_values"
        ],
        "TestWorkloadConfig": [
          "test_workload_config_validation",
          "test_workload_config_creation",
          "test_workload_config_defaults"
        ],
        "TestPerformanceBenchmark": [
          "setUp",
          "test_performance_benchmark_initialization",
          "test_run_single_benchmark",
          "test_benchmark_error_handling",
          "test_benchmark_memory_tracking",
          "test_run_multiple_benchmarks",
          "test_benchmark_with_warmup"
        ],
        "TestBenchmarkSuite": [
          "test_benchmark_suite_reporting",
          "setUp",
          "test_run_all_benchmarks",
          "test_add_benchmark",
          "test_benchmark_suite_initialization",
          "test_benchmark_suite_configuration"
        ],
        "TestTemplateGenerator": [
          "test_template_generator_initialization",
          "test_workload_customization",
          "test_generate_small_template_workload",
          "setUp",
          "test_generate_concurrent_workload",
          "test_generate_medium_template_workload",
          "test_generate_memory_intensive_workload",
          "test_generate_batch_workload",
          "test_generate_large_template_workload"
        ],
        "TestBenchmarkScenarios": [
          "tearDown",
          "test_memory_intensive_scenario",
          "setUp",
          "test_batch_processing_scenario",
          "test_performance_comparison_scenario",
          "test_single_template_scenario",
          "test_concurrent_processing_scenario"
        ],
        "TestBenchmarkMetrics": [
          "test_execution_time_measurement",
          "test_throughput_measurement",
          "test_statistics_calculation",
          "test_memory_usage_measurement"
        ],
        "TestBenchmarkIntegration": [
          "test_benchmark_configuration_integration",
          "test_full_benchmark_suite_execution",
          "test_benchmark_result_aggregation"
        ],
        "TestBenchmarkErrorHandling": [
          "test_zero_iterations_handling",
          "test_invalid_workload_type_handling",
          "test_negative_iterations_handling",
          "test_resource_cleanup"
        ]
      }
    },
    {
      "file": "tests/test_performance_integration.py",
      "total_methods": 7,
      "test_methods": 6,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "unittest",
        "time",
        "lxml.etree"
      ],
      "class_methods": {
        "PerformanceIntegrationTestCase": [
          "test_xpath_precompilation_effectiveness",
          "setUp",
          "test_batch_optimization_detection",
          "test_cache_performance_improvement",
          "test_performance_stats_reset",
          "test_comprehensive_performance_statistics",
          "test_patch_order_optimization"
        ]
      }
    },
    {
      "file": "tests/test_performance_profiler_comprehensive.py",
      "total_methods": 76,
      "test_methods": 51,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "TestPerformanceProfiler.profile_worker",
        "TestProfilerIntegration.worker_function"
      ],
      "imports": [
        "tools.performance_profiler.PerformanceProfiler",
        "tempfile",
        "unittest.mock.MagicMock",
        "tools.performance_profiler.ProfiledFunction",
        "sys",
        "tools.performance_profiler._ProfilerContextManager",
        "unittest",
        "unittest.mock.Mock",
        "threading",
        "json",
        "os",
        "tools.performance_profiler.PerformanceSnapshot",
        "tools.performance_profiler.ProfilingSession",
        "unittest.mock.patch",
        "pathlib.Path",
        "time"
      ],
      "class_methods": {
        "PerformanceProfiler": [
          "profile_function",
          "get_metrics",
          "start_profiling",
          "__init__",
          "stop_profiling"
        ],
        "ProfilerConfig": [
          "__init__"
        ],
        "ProfileMetrics": [
          "__init__"
        ],
        "MemoryTracker": [
          "__init__",
          "stop_tracking",
          "get_usage",
          "start_tracking"
        ],
        "CPUTracker": [
          "__init__",
          "stop_tracking",
          "get_usage",
          "start_tracking"
        ],
        "TimeTracker": [
          "__init__",
          "stop_timing",
          "start_timing"
        ],
        "ProfilerError": [],
        "ProfilerReport": [
          "__init__",
          "to_dict"
        ],
        "TestPerformanceProfiler": [
          "test_profiler_metrics_collection",
          "test_profiler_multiple_sessions",
          "test_function",
          "test_profiler_concurrent_access",
          "test_profiler_initialization_with_config",
          "test_function_profiling_with_args",
          "test_profiler_start_stop_lifecycle",
          "test_profiler_initialization_default",
          "add_numbers",
          "test_function_profiling_decorator",
          "profile_worker",
          "test_profiler_context_manager"
        ],
        "TestProfilerConfig": [
          "test_config_defaults",
          "test_config_validation",
          "test_config_creation_with_parameters",
          "test_config_serialization",
          "test_config_creation_empty"
        ],
        "TestMemoryTracker": [
          "test_memory_tracking_lifecycle",
          "test_memory_tracker_initialization",
          "test_memory_tracker_precision",
          "test_memory_peak_tracking",
          "test_memory_usage_statistics"
        ],
        "TestCPUTracker": [
          "test_cpu_statistics_collection",
          "test_cpu_tracking_lifecycle",
          "test_cpu_usage_sampling",
          "test_cpu_tracker_initialization",
          "test_cpu_multi_core_tracking"
        ],
        "TestTimeTracker": [
          "test_timing_precision",
          "test_time_tracker_initialization",
          "test_multiple_timing_sessions",
          "test_timing_statistics",
          "test_timing_context_manager",
          "test_basic_timing"
        ],
        "TestProfileMetrics": [
          "test_profile_metrics_creation",
          "test_metrics_data_structure",
          "test_metrics_aggregation",
          "test_metrics_serialization",
          "test_metrics_comparison"
        ],
        "TestProfilerReport": [
          "test_report_summary",
          "test_report_creation",
          "test_report_serialization",
          "test_report_formatting"
        ],
        "TestProfilerIntegration": [
          "test_context_manager_workflow",
          "worker_function",
          "test_multi_threaded_profiling",
          "test_complete_profiling_workflow",
          "test_function_decorator_workflow",
          "cpu_intensive_task"
        ],
        "TestPerformanceOptimization": [
          "test_function",
          "test_profiler_overhead",
          "test_memory_tracker_efficiency"
        ],
        "TestProfilerErrorHandling": [
          "test_profiler_stop_without_start",
          "test_profiler_double_start",
          "failing_function",
          "test_profiler_exception_handling",
          "test_memory_tracker_edge_cases"
        ]
      }
    },
    {
      "file": "tests/test_powerpoint_layout_engine.py",
      "total_methods": 36,
      "test_methods": 36,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tools.core.types.ProcessingResult",
        "tools.powerpoint_layout_engine.create_powerpoint_layout_engine",
        "tools.powerpoint_positioning_calculator.PositioningCalculator",
        "unittest.mock.MagicMock",
        "tools.powerpoint_placeholder_types.PlaceholderType",
        "tools.powerpoint_layout_schema.ValidationResult",
        "tools.powerpoint_layout_engine.PowerPointLayoutEngine",
        "unittest.mock.Mock",
        "tools.powerpoint_layout_schema.PowerPointLayoutSchema",
        "tools.powerpoint_placeholder_types.PlaceholderSize",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "unittest.mock.patch",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {
        "TestPowerPointLayoutEngineInitialization": [
          "test_engine_initialization_with_custom_files",
          "test_engine_initialization_with_custom_aspect_ratio",
          "test_engine_initialization_with_defaults",
          "test_factory_function_creates_engine",
          "test_cache_initialized_empty",
          "test_layout_templates_initialized"
        ],
        "TestPowerPointLayoutEngineAspectRatio": [
          "test_set_aspect_ratio_clears_cache",
          "test_set_aspect_ratio_unsupported",
          "test_set_aspect_ratio_success",
          "test_supported_aspect_ratios_constant"
        ],
        "TestPowerPointLayoutEngineLayoutManagement": [
          "test_get_available_layouts_contains_expected_layouts",
          "test_validate_layout_definition_success",
          "test_get_available_layouts",
          "test_validate_layout_definition_not_found"
        ],
        "TestPowerPointLayoutEnginePositioning": [
          "test_resolve_layout_positioning_validates_bounds",
          "test_resolve_layout_positioning_uses_default_aspect_ratio",
          "test_resolve_layout_positioning_not_found",
          "test_resolve_layout_positioning_caching",
          "test_resolve_layout_positioning_different_aspect_ratios",
          "test_resolve_layout_positioning_success"
        ],
        "TestPowerPointLayoutEngineOOXMLGeneration": [
          "test_generate_layout_for_ooxml_success",
          "test_generate_all_layouts_for_ooxml_success",
          "test_generate_all_layouts_for_ooxml_layout_numbers",
          "test_generate_all_layouts_for_ooxml_uses_default_aspect_ratio",
          "test_generate_layout_for_ooxml_placeholder_structure",
          "test_generate_layout_for_ooxml_not_found",
          "test_generate_layout_for_ooxml_shape_ids_sequential"
        ],
        "TestPowerPointLayoutEngineStatistics": [
          "test_get_layout_statistics_values",
          "test_get_layout_statistics",
          "test_get_layout_statistics_after_caching"
        ],
        "TestPowerPointLayoutEngineErrorHandling": [
          "test_resolve_positioning_handles_invalid_calculator",
          "test_generate_ooxml_handles_conversion_errors",
          "test_engine_handles_missing_schema_gracefully"
        ],
        "TestPowerPointLayoutEngineIntegration": [
          "test_engine_integrates_with_positioning_calculator",
          "test_engine_integrates_with_placeholder_system",
          "test_engine_integrates_with_schema_validator"
        ]
      }
    },
    {
      "file": "tests/test_powerpoint_layout_schema.py",
      "total_methods": 22,
      "test_methods": 22,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "tools.powerpoint_positioning_calculator.PositioningCalculator",
        "tools.powerpoint_positioning_calculator.DesignTokenResolver",
        "tools.powerpoint_layout_schema.PlaceholderDefinition",
        "tools.powerpoint_layout_schema.PowerPointLayoutSchema",
        "unittest.mock.Mock",
        "typing.Any",
        "tools.powerpoint_positioning_calculator.AspectRatioMultiplier",
        "pytest",
        "json",
        "typing.Dict",
        "tools.powerpoint_positioning_calculator.ParameterizedPosition",
        "unittest.mock.patch",
        "tools.powerpoint_positioning_calculator.EMUCalculator",
        "typing.List",
        "tools.powerpoint_layout_schema.LayoutValidationError"
      ],
      "class_methods": {
        "TestPowerPointLayoutSchema": [
          "test_schema_contains_proper_layout_names",
          "test_schema_validation_with_valid_json",
          "test_schema_validation_fails_with_invalid_json",
          "test_schema_initialization",
          "test_schema_contains_all_12_layout_types"
        ],
        "TestParameterizedPosition": [
          "test_parameterized_position_creation",
          "test_position_has_design_token_variables"
        ],
        "TestAspectRatioMultiplier": [
          "test_aspect_ratio_multiplier_16_10",
          "test_aspect_ratio_multiplier_16_9",
          "test_aspect_ratio_multiplier_4_3",
          "test_invalid_aspect_ratio_raises_error"
        ],
        "TestPositioningCalculator": [
          "test_resolve_design_token_to_emu",
          "test_calculate_responsive_position",
          "test_resolve_parameterized_layout",
          "test_calculator_initialization"
        ],
        "TestPlaceholderDefinition": [
          "test_placeholder_supports_all_powerpoint_types",
          "test_placeholder_definition_creation",
          "test_placeholder_generates_office_metadata"
        ],
        "TestEMUCalculator": [
          "test_percentage_to_emu_height",
          "test_emu_to_points_conversion",
          "test_points_to_emu_conversion",
          "test_percentage_to_emu_width"
        ]
      }
    },
    {
      "file": "tests/test_powerpoint_layout_types.py",
      "total_methods": 30,
      "test_methods": 18,
      "fixtures": 12,
      "helper_methods": 0,
      "unused_methods": [
        "TestPowerPointLayoutTypesCoverage.engine",
        "TestContentLayout.engine",
        "TestLayoutTypography.engine",
        "TestTitleSlideLayout.engine",
        "TestComplexLayouts.engine",
        "TestSpecializedLayouts.engine",
        "TestTwoContentLayout.engine",
        "TestPowerPointLayoutTypesCoverage.all_layout_ids",
        "TestSectionHeaderLayout.engine",
        "TestLayoutValidation.schema",
        "TestParameterizedPositioning.engine",
        "TestOOXMLGeneration.engine"
      ],
      "imports": [
        "tools.powerpoint_layout_engine.create_powerpoint_layout_engine",
        "tools.powerpoint_positioning_calculator.PositioningCalculator",
        "tools.powerpoint_layout_engine.PowerPointLayoutEngine",
        "tools.powerpoint_layout_schema.PowerPointLayoutSchema",
        "pytest",
        "json",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestPowerPointLayoutTypesCoverage": [
          "test_layout_type_mapping_complete",
          "all_layout_ids",
          "test_all_layout_types_available",
          "engine"
        ],
        "TestTitleSlideLayout": [
          "test_title_slide_structure",
          "test_title_slide_positioning_centered",
          "engine"
        ],
        "TestContentLayout": [
          "test_content_slide_structure",
          "engine"
        ],
        "TestSectionHeaderLayout": [
          "test_section_header_structure",
          "engine"
        ],
        "TestTwoContentLayout": [
          "test_two_content_structure",
          "engine"
        ],
        "TestComplexLayouts": [
          "test_two_text_two_obj_structure",
          "engine"
        ],
        "TestSpecializedLayouts": [
          "test_title_only_structure",
          "test_picture_layouts",
          "test_blank_layout_structure",
          "engine"
        ],
        "TestLayoutTypography": [
          "test_title_slide_typography",
          "test_consistent_typography_across_aspect_ratios",
          "engine"
        ],
        "TestParameterizedPositioning": [
          "test_all_layouts_use_parameterized_positioning",
          "engine",
          "test_positioning_within_slide_bounds"
        ],
        "TestOOXMLGeneration": [
          "test_all_layouts_generate_valid_ooxml",
          "engine"
        ],
        "TestLayoutValidation": [
          "schema",
          "test_all_layouts_pass_schema_validation",
          "test_placeholder_types_powerpoint_compatible"
        ]
      }
    },
    {
      "file": "tests/test_powerpoint_supertheme_integration.py",
      "total_methods": 29,
      "test_methods": 19,
      "fixtures": 10,
      "helper_methods": 0,
      "unused_methods": [
        "TestOfficeExtensionVariableSubstitution.extension_variable_processor",
        "TestPOTXTemplateGeneration.potx_generator",
        "TestPowerPointSuperThemeIntegration.sample_design_tokens",
        "TestPowerPointSuperThemeIntegration.mock_supertheme_generator",
        "TestPowerPointTokenTransformations.powerpoint_transformer",
        "TestPowerPointSuperThemeIntegration.powerpoint_engine",
        "TestPowerPointLayoutWithTokens.token_aware_layout_engine",
        "TestDesignSystemStandardsValidation.standards_validator",
        "TestHierarchicalTokenResolution.token_resolver",
        "TestCompleteWorkflowIntegration.workflow_orchestrator"
      ],
      "imports": [
        "io",
        "tools.powerpoint_layout_engine.PowerPointLayoutEngine",
        "unittest.mock.Mock",
        "xml.etree.ElementTree",
        "tools.theme_resolver.ThemeResolver",
        "unittest.mock.patch",
        "typing.List",
        "tools.supertheme_generator.SuperThemeGenerator",
        "json",
        "typing.Dict",
        "typing.Optional",
        "tools.powerpoint_layout_engine.create_powerpoint_layout_engine",
        "tools.variable_resolver.VariableResolver",
        "zipfile",
        "pytest",
        "pathlib.Path",
        "tools.powerpoint_positioning_calculator.PositioningCalculator",
        "tools.variable_substitution.VariableSubstitution",
        "typing.Any"
      ],
      "class_methods": {
        "TestPowerPointSuperThemeIntegration": [
          "sample_design_tokens",
          "powerpoint_engine",
          "mock_supertheme_generator",
          "test_hierarchical_token_structure_valid",
          "test_integration_components_available"
        ],
        "TestHierarchicalTokenResolution": [
          "token_resolver",
          "test_aspect_ratio_conditional_resolution",
          "test_token_resolution_layers"
        ],
        "TestPowerPointTokenTransformations": [
          "test_spacing_token_to_emu_transformation",
          "powerpoint_transformer",
          "test_color_token_to_ooxml_transformation",
          "test_typography_token_to_ooxml_transformation"
        ],
        "TestPowerPointLayoutWithTokens": [
          "token_aware_layout_engine",
          "test_layout_generation_with_design_tokens",
          "test_layout_positioning_with_token_margins"
        ],
        "TestPOTXTemplateGeneration": [
          "potx_generator",
          "test_potx_generation_with_supertheme_integration",
          "test_potx_zip_structure_valid",
          "test_potx_contains_office_extension_variables"
        ],
        "TestOfficeExtensionVariableSubstitution": [
          "test_extension_variable_embedding_in_ooxml",
          "extension_variable_processor",
          "test_extension_variable_format_valid"
        ],
        "TestCompleteWorkflowIntegration": [
          "test_end_to_end_workflow_execution",
          "test_workflow_error_handling_and_rollback",
          "workflow_orchestrator"
        ],
        "TestDesignSystemStandardsValidation": [
          "test_generated_template_maintains_brand_consistency",
          "standards_validator",
          "test_generated_template_meets_accessibility_standards",
          "test_generated_template_follows_professional_standards"
        ]
      }
    },
    {
      "file": "tests/test_powerpoint_validation_suite.py",
      "total_methods": 34,
      "test_methods": 23,
      "fixtures": 9,
      "helper_methods": 0,
      "unused_methods": [
        "TestMultiAspectRatioValidation.engine",
        "TestSuperThemeIntegration.workflow_orchestrator",
        "TestOOXMLCompliance.sample_tokens",
        "TestDesignTokenConsistency.supertheme_engine",
        "TestMultiAspectRatioValidation.expected_dimensions",
        "TestOOXMLCompliance.potx_generator",
        "TestPerformanceBenchmarks.engine",
        "TestMultiAspectRatioValidation.aspect_ratios",
        "TestDesignTokenConsistency.hierarchical_tokens"
      ],
      "imports": [
        "io",
        "tools.powerpoint_layout_engine.PowerPointLayoutEngine",
        "xml.etree.ElementTree",
        "typing.List",
        "tools.core.types.ProcessingResult",
        "tools.supertheme_powerpoint_workflow.create_supertheme_powerpoint_workflow",
        "json",
        "typing.Dict",
        "typing.Optional",
        "tools.powerpoint_layout_engine.create_powerpoint_layout_engine",
        "typing.Tuple",
        "zipfile",
        "tools.powerpoint_token_transformer.create_powerpoint_token_transformer",
        "colorsys",
        "pytest",
        "tools.potx_template_generator.create_potx_template_generator",
        "pathlib.Path",
        "tools.powerpoint_positioning_calculator.PositioningCalculator",
        "tools.powerpoint_supertheme_layout_engine.create_powerpoint_supertheme_layout_engine",
        "typing.Any",
        "time"
      ],
      "class_methods": {
        "TestMultiAspectRatioValidation": [
          "engine",
          "test_placeholder_positioning_within_bounds",
          "test_layouts_generate_for_all_aspect_ratios",
          "test_slide_dimensions_correct",
          "aspect_ratios",
          "test_aspect_ratio_responsive_positioning",
          "test_all_aspect_ratios_supported",
          "expected_dimensions"
        ],
        "TestOOXMLCompliance": [
          "test_namespace_declarations_correct",
          "sample_tokens",
          "test_xml_well_formed",
          "test_potx_zip_structure_valid",
          "potx_generator",
          "test_relationships_valid"
        ],
        "TestDesignTokenConsistency": [
          "test_token_resolution_consistent",
          "test_typography_token_transformations_valid",
          "supertheme_engine",
          "hierarchical_tokens",
          "test_color_token_transformations_valid"
        ],
        "TestAccessibilityCompliance": [
          "test_color_contrast_ratios",
          "calculate_contrast_ratio",
          "get_luminance",
          "test_semantic_structure",
          "test_minimum_font_sizes"
        ],
        "TestPerformanceBenchmarks": [
          "engine",
          "test_potx_generation_performance",
          "test_multi_aspect_ratio_performance",
          "test_single_layout_generation_performance",
          "test_cache_effectiveness",
          "test_batch_layout_generation_performance"
        ],
        "TestSuperThemeIntegration": [
          "test_multiple_design_variants",
          "workflow_orchestrator",
          "test_aspect_ratio_consistency_across_variants"
        ],
        "TestValidationReportGeneration": [
          "test_generate_validation_report"
        ]
      }
    },
    {
      "file": "tests/test_project_structure_validation.py",
      "total_methods": 12,
      "test_methods": 1,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "sys",
        "ast",
        "typing.Any",
        "importlib",
        "os",
        "typing.Dict",
        "typing.Set",
        "json",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {
        "ProjectStructureValidator": [
          "run_validation",
          "create_migration_plan",
          "analyze_imports",
          "identify_scattered_files",
          "scan_current_structure",
          "__init__",
          "_extract_imports",
          "validate_imports_will_work",
          "save_validation_report",
          "_scan_directory",
          "_would_import_break"
        ]
      }
    },
    {
      "file": "tests/test_pytest_configuration.py",
      "total_methods": 22,
      "test_methods": 22,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "conftest.validate_ooxml_structure",
        "sys",
        "xdist",
        "subprocess",
        "importlib.util",
        "conftest.discover_python_modules",
        "pytest",
        "os",
        "conftest.get_test_files_for_modules",
        "conftest.validate_design_tokens",
        "coverage",
        "pathlib.Path",
        "time"
      ],
      "class_methods": {
        "TestPytestConfiguration": [
          "test_conftest_integration_exists",
          "test_tools_directory_in_path",
          "test_pytest_ini_valid_configuration",
          "test_test_paths_accessible",
          "test_pytest_ini_exists",
          "test_parallel_execution_support",
          "test_custom_markers_registered",
          "test_coverage_measurement_support",
          "test_conftest_global_exists"
        ],
        "TestModuleDiscovery": [
          "test_discover_python_modules",
          "test_module_import_validation",
          "test_get_test_files_for_modules"
        ],
        "TestFixtureValidation": [
          "test_temp_workspace_fixture",
          "test_sample_ooxml_content_fixture",
          "test_sample_design_tokens_fixture",
          "test_test_metrics_collector_fixture"
        ],
        "TestValidationUtilities": [
          "test_validate_design_tokens_invalid",
          "test_validate_design_tokens_valid",
          "test_validate_ooxml_structure"
        ],
        "TestTestInfrastructureIntegration": [
          "test_pytest_discovery_integration",
          "test_parallel_test_execution_setup",
          "test_coverage_integration_setup"
        ]
      }
    },
    {
      "file": "tests/test_substitution_pipeline_phase4.py",
      "total_methods": 38,
      "test_methods": 23,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "SubstitutionProgress.is_complete",
        "TestProgressTracking.progress_callback",
        "TestSubstitutionPipelineIntegration.run_substitution",
        "TestCancellationToken.worker",
        "TestCancellationToken.canceller",
        "CancellationToken.is_cancelled"
      ],
      "imports": [
        "tools.substitution.types.SubstitutionResult",
        "tools.substitution.types.SubstitutionProgress",
        "dataclasses.field",
        "tools.substitution.types.SubstitutionStage",
        "typing.List",
        "tools.substitution.types.SubstitutionConfig",
        "tempfile",
        "dataclasses.dataclass",
        "tools.substitution.types.CancellationToken",
        "uuid",
        "threading",
        "tools.substitution.types.SubstitutionError",
        "typing.Dict",
        "typing.Optional",
        "tools.substitution.types.ValidationCheckpoint",
        "pytest",
        "pathlib.Path",
        "enum.Enum",
        "tools.substitution.types.OperationCancelledException",
        "typing.Any",
        "tools.substitution.pipeline.SubstitutionPipeline",
        "tools.substitution.types.TransactionContext",
        "tools.substitution.types.ValidationCheckpointType",
        "time",
        "tools.substitution.types.ProgressReporter"
      ],
      "class_methods": {
        "SubstitutionStage": [],
        "ValidationCheckpointType": [],
        "SubstitutionProgress": [
          "is_complete"
        ],
        "ValidationCheckpoint": [],
        "SubstitutionResult": [],
        "TransactionContext": [],
        "SubstitutionConfig": [],
        "SubstitutionError": [],
        "OperationCancelledException": [],
        "CancellationToken": [
          "__init__",
          "is_cancelled",
          "cancel"
        ],
        "ProgressReporter": [
          "__init__",
          "report"
        ],
        "SubstitutionPipeline": [
          "execute_substitution",
          "create_transaction",
          "get_transaction_progress",
          "__init__",
          "rollback_transaction"
        ],
        "TestSubstitutionPipeline": [
          "test_pipeline_with_config",
          "test_pipeline_initialization"
        ],
        "TestTransactionManagement": [
          "test_transaction_isolation",
          "test_create_transaction",
          "test_multiple_concurrent_transactions"
        ],
        "TestSubstitutionExecution": [
          "test_execute_substitution_with_config",
          "test_execute_substitution_with_validation_errors",
          "test_execute_substitution_basic",
          "test_execute_substitution_empty_variables"
        ],
        "TestProgressTracking": [
          "test_progress_completion_check",
          "test_progress_reporter_callback",
          "progress_callback",
          "test_get_transaction_progress"
        ],
        "TestTransactionRollback": [
          "test_rollback_multiple_transactions",
          "test_rollback_transaction_success",
          "test_rollback_nonexistent_transaction"
        ],
        "TestCancellationToken": [
          "canceller",
          "test_cancellation_token_creation",
          "worker",
          "test_cancellation_token_thread_safety",
          "test_cancellation_token_cancellation"
        ],
        "TestSubstitutionPipelineIntegration": [
          "run_substitution",
          "test_full_substitution_workflow",
          "test_pipeline_with_cancellation",
          "test_concurrent_pipeline_operations"
        ],
        "TestErrorHandlingAndEdgeCases": [
          "test_invalid_template_content",
          "test_large_variable_set_performance"
        ]
      }
    },
    {
      "file": "tests/test_supertheme_compatibility.py",
      "total_methods": 18,
      "test_methods": 17,
      "fixtures": 1,
      "helper_methods": 0,
      "unused_methods": [
        "TestOfficeCompatibility.sample_supertheme"
      ],
      "imports": [
        "io",
        "tools.aspect_ratio_resolver.AspectRatioResolver",
        "xml.etree.ElementTree",
        "re",
        "tools.theme_resolver.ThemeResolver",
        "hashlib",
        "typing.List",
        "tools.supertheme_generator.SuperThemeGenerator",
        "tools.ooxml_processor.OOXMLProcessor",
        "tempfile",
        "tools.aspect_ratio_resolver.create_standard_aspect_ratios",
        "json",
        "typing.Dict",
        "zipfile",
        "pytest",
        "pathlib.Path",
        "tools.supertheme_generator.SuperThemeError",
        "typing.Any",
        "time"
      ],
      "class_methods": {
        "TestOfficeCompatibility": [
          "test_guid_format_compatibility",
          "test_office_2016_xml_compatibility",
          "test_powerpoint_365_namespaces",
          "test_cross_platform_file_paths",
          "sample_supertheme"
        ],
        "TestSuperThemePackageValidation": [
          "test_content_types_validation",
          "test_required_package_structure",
          "test_variant_consistency"
        ],
        "TestPerformanceBenchmarks": [
          "test_generation_time_limit",
          "test_caching_performance",
          "test_file_size_limits"
        ],
        "TestAspectRatioValidation": [
          "test_aspect_ratio_dimensions_accuracy",
          "test_portrait_landscape_detection"
        ],
        "TestErrorHandlingAndRecovery": [
          "test_malformed_design_token_handling",
          "test_missing_aspect_ratio_fallback",
          "test_empty_design_variants_error"
        ],
        "TestRegressionTesting": [
          "test_ooxml_processor_still_works",
          "test_theme_resolver_still_works"
        ]
      }
    },
    {
      "file": "tests/test_supertheme_generator.py",
      "total_methods": 17,
      "test_methods": 14,
      "fixtures": 3,
      "helper_methods": 0,
      "unused_methods": [
        "TestThemeVariantManagerXML.sample_theme_variants",
        "TestSuperThemePackageGeneration.sample_design_variants",
        "TestSuperThemePackageGeneration.sample_aspect_ratios"
      ],
      "imports": [
        "tools.supertheme_generator.SuperThemeGenerator",
        "io",
        "tools.emu_types.EMUValue",
        "zipfile",
        "tools.aspect_ratio_resolver.create_standard_aspect_ratios",
        "tools.aspect_ratio_resolver.AspectRatioResolver",
        "xml.etree.ElementTree",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "tools.theme_resolver.ThemeResolver",
        "tools.theme_resolver.Theme",
        "pathlib.Path",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "TestSuperThemePackageGeneration": [
          "test_supertheme_file_size_limit",
          "sample_aspect_ratios",
          "test_complete_supertheme_generation",
          "sample_design_variants",
          "test_supertheme_generator_initialization"
        ],
        "TestThemeVariantManagerXML": [
          "test_emu_dimensions_accuracy",
          "test_guid_consistency_for_design_groups",
          "sample_theme_variants",
          "test_theme_variant_manager_xml_structure"
        ],
        "TestSuperThemeZIPStructure": [
          "test_variant_directory_structure",
          "test_content_types_xml",
          "test_relationship_files_structure"
        ],
        "TestSuperThemeErrorHandling": [
          "test_empty_design_variants_error",
          "test_malformed_design_tokens_error",
          "test_invalid_aspect_ratio_error"
        ],
        "TestSuperThemePerformance": [
          "test_generation_time_under_30_seconds",
          "test_caching_improves_performance"
        ]
      }
    },
    {
      "file": "tests/test_supertheme_validator.py",
      "total_methods": 21,
      "test_methods": 15,
      "fixtures": 2,
      "helper_methods": 3,
      "unused_methods": [
        "TestSuperThemeValidator.validator",
        "TestSuperThemeValidator.strict_validator"
      ],
      "imports": [
        "io",
        "unittest.mock.MagicMock",
        "zipfile",
        "tools.supertheme_validator.ValidationResult",
        "tools.supertheme_validator.SuperThemeValidator",
        "lxml.etree",
        "pytest",
        "unittest.mock.patch"
      ],
      "class_methods": {
        "TestSuperThemeValidator": [
          "_test_lxml_parser",
          "test_namespace_validation",
          "test_validation_report_generation",
          "test_package_structure_validation",
          "test_cross_platform_validation",
          "test_validate_invalid_zip",
          "test_strict_mode_validation",
          "strict_validator",
          "create_invalid_zip",
          "test_performance_validation",
          "test_lxml_fallback_compatibility",
          "test_xml_well_formedness_validation",
          "test_guid_validation",
          "test_validate_minimal_valid_supertheme",
          "test_lxml_xml_parser_functionality",
          "create_minimal_supertheme",
          "validator",
          "test_validate_empty_supertheme",
          "create_empty_supertheme",
          "test_content_types_validation",
          "test_demo_functionality"
        ]
      }
    },
    {
      "file": "tests/test_template_analyzer.py",
      "total_methods": 26,
      "test_methods": 25,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "tools.analyzer.types.ComplexityScore",
        "tools.analyzer.types.DesignElementType",
        "tools.analyzer.types.DesignElement",
        "tempfile",
        "sys",
        "unittest",
        "zipfile",
        "tools.analyzer.types.AnalysisResult",
        "tools.analyzer.types.CoverageReport",
        "json",
        "os",
        "tools.template_analyzer.TemplateAnalyzer",
        "tools.analyzer.types.VariableCoverage",
        "tools.analyzer.types.AnalysisLevel",
        "pathlib.Path",
        "tools.template_analyzer.TemplateComplexity"
      ],
      "class_methods": {
        "TestTemplateAnalyzer": [
          "setUp"
        ],
        "TestDesignElementDiscovery": [
          "test_word_style_element_discovery",
          "test_color_element_discovery_powerpoint",
          "test_effect_element_discovery",
          "test_slide_master_element_discovery",
          "test_gradient_element_discovery",
          "test_excel_style_element_discovery",
          "test_font_element_discovery_powerpoint"
        ],
        "TestVariableCoverageCalculation": [
          "test_coverage_by_element_type",
          "test_template_completeness_scoring",
          "test_coverage_report_generation",
          "test_coverage_calculation_basic",
          "test_coverage_gap_analysis"
        ],
        "TestTemplateComplexityAnalysis": [
          "test_complexity_factors",
          "test_complexity_comparison",
          "test_customization_impact_analysis",
          "test_basic_complexity_scoring",
          "test_complexity_categories"
        ],
        "TestMicrosoftTemplateValidation": [
          "test_office_theme_compliance",
          "test_accessibility_compliance_check",
          "test_cross_platform_compatibility",
          "test_template_best_practices"
        ],
        "TestFullTemplateAnalysis": [
          "test_template_comparison_analysis",
          "test_variable_recommendation_generation",
          "test_complete_powerpoint_template_analysis",
          "test_100_percent_coverage_analysis"
        ]
      }
    },
    {
      "file": "tests/test_template_analyzer_comprehensive.py",
      "total_methods": 55,
      "test_methods": 31,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "ComplexityAnalyzer.analyze_complexity",
        "ElementDiscoveryEngine.discover_elements_in_file",
        "CoverageAnalyzer.analyze_coverage"
      ],
      "imports": [
        "tools.analyzer.types.DesignElementType",
        "tools.analyzer.types.ComplexityScore",
        "tools.analyzer.types.DesignElement",
        "unittest.mock.Mock",
        "unittest.mock.patch",
        "tools.template_analyzer.TemplateComplexity",
        "tools.analyzer.types.PriorityLevel",
        "tempfile",
        "unittest.mock.MagicMock",
        "tools.analyzer.types.CoverageReport",
        "json",
        "tools.analyzer.discovery.ElementDiscoveryEngine",
        "tools.template_analyzer.TemplateAnalyzer",
        "tools.analyzer.coverage.CoverageAnalyzer",
        "tools.analyzer.complexity.ComplexityAnalyzer",
        "tools.analyzer.types.AnalysisLevel",
        "zipfile",
        "tools.analyzer.types.AnalysisResult",
        "pytest",
        "pathlib.Path",
        "tools.analyzer.types.AnalysisContext",
        "tools.analyzer.types.AnalysisConfig",
        "tools.analyzer.types.VariableCoverage",
        "os",
        "time"
      ],
      "class_methods": {
        "AnalysisLevel": [
          "__init__"
        ],
        "DesignElementType": [],
        "PriorityLevel": [],
        "DesignElement": [
          "__init__"
        ],
        "VariableCoverage": [
          "__init__"
        ],
        "ComplexityScore": [
          "__init__"
        ],
        "AnalysisResult": [
          "__init__"
        ],
        "CoverageReport": [
          "__init__"
        ],
        "AnalysisConfig": [
          "__init__"
        ],
        "AnalysisContext": [
          "__init__"
        ],
        "ElementDiscoveryEngine": [
          "discover_elements_in_file",
          "__init__"
        ],
        "CoverageAnalyzer": [
          "__init__",
          "generate_coverage_report",
          "analyze_coverage"
        ],
        "ComplexityAnalyzer": [
          "__init__",
          "analyze_complexity"
        ],
        "TemplateAnalyzer": [
          "export_analysis_results",
          "analyze_complete_template",
          "__init__",
          "generate_coverage_report",
          "get_analysis_statistics"
        ],
        "TestTemplateAnalyzer": [
          "test_analyzer_statistics_initialization",
          "test_analyzer_config_creation",
          "test_analyzer_initialization_default",
          "test_analyzer_initialization_custom"
        ],
        "TestTemplateAnalysisWorkflow": [
          "create_test_template",
          "test_analyze_invalid_template",
          "test_analyze_word_template",
          "test_analyze_powerpoint_template",
          "test_analyze_nonexistent_template",
          "test_analyze_excel_template"
        ],
        "TestCoverageAnalysis": [
          "test_coverage_analysis_integration",
          "test_coverage_statistics_tracking",
          "test_coverage_report_generation"
        ],
        "TestComplexityAnalysis": [
          "test_complexity_analysis_disabled",
          "test_complexity_score_backward_compatibility",
          "_create_simple_template",
          "test_complexity_analysis_enabled"
        ],
        "TestValidation": [
          "_create_valid_template",
          "test_required_files_validation",
          "test_validation_enabled",
          "test_validation_disabled"
        ],
        "TestResultExporting": [
          "test_export_invalid_format",
          "test_export_coverage_serialization",
          "test_export_complexity_serialization",
          "test_export_analysis_results_json"
        ],
        "TestAnalysisLevels": [
          "test_comprehensive_analysis_level",
          "test_detailed_analysis_level",
          "test_standard_analysis_level"
        ],
        "TestStatisticsTracking": [
          "test_elements_discovered_tracking",
          "test_statistics_persistence",
          "_create_test_template",
          "test_templates_analyzed_tracking"
        ],
        "TestErrorHandling": [
          "test_corrupted_xml_handling",
          "test_empty_template_handling",
          "test_malformed_template_handling"
        ]
      }
    },
    {
      "file": "tests/test_template_analyzer_modern.py",
      "total_methods": 21,
      "test_methods": 16,
      "fixtures": 0,
      "helper_methods": 5,
      "unused_methods": [],
      "imports": [
        "tools.analyzer.types.DesignElementType",
        "tools.analyzer.types.ComplexityScore",
        "tools.analyzer.types.DesignElement",
        "xml.etree.ElementTree",
        "tools.analyzer.types.PriorityLevel",
        "tempfile",
        "tools.analyzer.types.CoverageReport",
        "json",
        "tools.analyzer.discovery.ElementDiscoveryEngine",
        "tools.template_analyzer.TemplateAnalyzer",
        "tools.analyzer.coverage.CoverageAnalyzer",
        "tools.analyzer.complexity.ComplexityAnalyzer",
        "tools.analyzer.types.AnalysisLevel",
        "unittest",
        "zipfile",
        "tools.analyzer.types.AnalysisResult",
        "pathlib.Path",
        "tools.analyzer.types.AnalysisConfig",
        "tools.analyzer.types.VariableCoverage",
        "shutil"
      ],
      "class_methods": {
        "TestAnalyzerTypes": [
          "test_design_element_creation",
          "test_variable_coverage_calculation",
          "test_complexity_score_creation"
        ],
        "TestElementDiscoveryEngine": [
          "setUp",
          "test_discover_all_elements",
          "test_discover_color_elements",
          "test_discover_font_elements"
        ],
        "TestCoverageAnalyzer": [
          "setUp",
          "test_coverage_by_element_type",
          "test_generate_coverage_report",
          "test_calculate_coverage_basic"
        ],
        "TestComplexityAnalyzer": [
          "setUp",
          "test_calculate_complexity_simple",
          "test_complexity_factors",
          "test_calculate_complexity_complex"
        ],
        "TestTemplateAnalyzer": [
          "tearDown",
          "test_analyze_template_basic",
          "setUp",
          "test_analyze_template_comprehensive",
          "test_generate_coverage_report",
          "test_analyze_with_config"
        ]
      }
    },
    {
      "file": "tests/test_template_analyzer_simple.py",
      "total_methods": 12,
      "test_methods": 9,
      "fixtures": 0,
      "helper_methods": 3,
      "unused_methods": [],
      "imports": [
        "tools.analyzer.types.DesignElementType",
        "tempfile",
        "unittest",
        "zipfile",
        "tools.template_analyzer.TemplateAnalyzer",
        "shutil",
        "tools.analyzer.types.AnalysisLevel",
        "pathlib.Path",
        "tools.analyzer.types.PriorityLevel"
      ],
      "class_methods": {
        "TestTemplateAnalyzerSimple": [
          "test_analyzer_initialization",
          "tearDown",
          "setUp",
          "test_analyzer_statistics",
          "test_template_processing_mock",
          "test_reset_functionality"
        ],
        "TestAnalyzerTypes": [
          "test_analysis_levels",
          "test_design_element_types",
          "test_priority_levels"
        ],
        "TestTemplateAnalyzerIntegration": [
          "setUp",
          "test_backward_compatibility",
          "test_modular_components_exist"
        ]
      }
    },
    {
      "file": "tests/test_templating_comments.py",
      "total_methods": 22,
      "test_methods": 10,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "TestTemplatingComments.setup_method"
      ],
      "imports": [
        "dataclasses.dataclass",
        "ast",
        "typing.Any",
        "pytest",
        "re",
        "typing.Dict",
        "pathlib.Path",
        "typing.List"
      ],
      "class_methods": {
        "CommentRequirement": [],
        "CommentAnalysisResult": [],
        "TemplatingCommentAnalyzer": [
          "_check_templating_requirements",
          "_analyze_function_comments",
          "_group_violations_by_severity",
          "generate_comment_report",
          "analyze_file",
          "_extract_comments",
          "_analyze_class_comments",
          "__init__",
          "analyze_project",
          "_is_templating_function",
          "_is_templating_class"
        ],
        "TestTemplatingComments": [
          "test_full_project_comment_analysis",
          "test_comment_requirement_matching",
          "test_templating_function_detection",
          "test_analyze_sample_file",
          "test_violation_severity_grouping",
          "test_report_generation",
          "test_templating_class_detection",
          "test_comment_analyzer_initialization",
          "setup_method",
          "test_project_analysis",
          "test_comment_extraction"
        ]
      }
    },
    {
      "file": "tests/test_theme_resolver.py",
      "total_methods": 25,
      "test_methods": 17,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [],
      "imports": [
        "xml.etree.ElementTree",
        "colorsys",
        "typing.Any",
        "pytest",
        "typing.Dict",
        "traceback"
      ],
      "class_methods": {
        "MockThemeResolver": [
          "extract_theme_from_xml",
          "resolve_theme_color",
          "__init__",
          "apply_color_transformation",
          "validate_theme_compatibility",
          "resolve_theme_font"
        ],
        "TestThemeResolver": [
          "test_theme_color_relationships",
          "test_invalid_theme_xml_handling",
          "hex_to_brightness",
          "setup_method",
          "test_complex_color_transformations",
          "test_color_shade_transformation",
          "test_theme_compatibility_libreoffice",
          "test_font_inheritance_patterns",
          "test_theme_color_slot_resolution",
          "test_theme_extraction_from_xml",
          "test_theme_color_overrides",
          "test_theme_compatibility_incomplete",
          "test_luminance_modulation",
          "test_color_tint_transformation",
          "test_accent_color_inheritance",
          "test_theme_font_slot_resolution",
          "test_theme_font_overrides",
          "test_theme_compatibility_google",
          "test_theme_compatibility_office"
        ]
      }
    },
    {
      "file": "tests/test_theme_resolver_comprehensive.py",
      "total_methods": 43,
      "test_methods": 31,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "TestPerformanceAndEdgeCases.resolve_worker"
      ],
      "imports": [
        "unittest.mock.Mock",
        "tests.mocks.get_mock",
        "tools.theme_resolver.ThemeResolver",
        "tools.theme_resolver.ThemeError",
        "unittest.mock.patch",
        "tools.theme_resolver.ThemeCache",
        "tests.fixtures.mock_ooxml_processor",
        "unittest.mock.MagicMock",
        "tests.fixtures.sample_design_tokens",
        "tests.mocks.create_standard_mocks",
        "threading",
        "typing.Dict",
        "typing.Tuple",
        "tests.fixtures.temp_dir",
        "colorsys",
        "pytest",
        "tools.theme_resolver.ColorTransformer",
        "typing.Any",
        "time"
      ],
      "class_methods": {
        "ThemeResolver": [
          "__init__",
          "transform_color",
          "resolve_theme_color",
          "get_theme_colors"
        ],
        "ColorTransformer": [
          "__init__",
          "hex_to_rgb",
          "adjust_lightness",
          "rgb_to_hsl"
        ],
        "ThemeCache": [
          "get",
          "__init__",
          "set"
        ],
        "ThemeError": [],
        "TestThemeResolver": [
          "test_initialization_with_config",
          "test_theme_inheritance",
          "test_theme_color_with_slot_mapping",
          "test_theme_caching",
          "test_color_transformation",
          "test_initialization_default",
          "test_multiple_color_spaces",
          "test_theme_color_fallback",
          "test_basic_theme_color_resolution"
        ],
        "TestColorTransformer": [
          "test_hex_to_rgb_conversion",
          "test_saturation_adjustment",
          "test_transformer_initialization",
          "test_rgb_to_hex_conversion",
          "test_color_harmony_generation",
          "test_color_contrast_calculation",
          "test_hsl_conversion",
          "test_color_lightness_adjustment"
        ],
        "TestThemeCache": [
          "test_cache_size_limit",
          "test_cache_with_complex_keys",
          "test_cache_miss",
          "test_cache_overwrite",
          "test_cache_initialization",
          "test_basic_cache_operations"
        ],
        "TestThemeIntegration": [
          "test_theme_performance_optimization",
          "test_complete_theme_resolution_workflow",
          "test_multi_theme_inheritance",
          "test_theme_with_ooxml_integration",
          "test_theme_validation_and_error_handling"
        ],
        "TestPerformanceAndEdgeCases": [
          "test_memory_usage_optimization",
          "test_concurrent_theme_resolution",
          "resolve_worker",
          "test_color_precision_handling"
        ]
      }
    },
    {
      "file": "tests/test_theme_resolver_phase4.py",
      "total_methods": 37,
      "test_methods": 30,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "ThemeColor.hex_value"
      ],
      "imports": [
        "tools.theme_resolver.ThemeDefinition",
        "tempfile",
        "tools.theme_resolver.ThemeValidationError",
        "tools.theme_resolver.ThemeFont",
        "dataclasses.dataclass",
        "dataclasses.field",
        "zipfile",
        "typing.Any",
        "pytest",
        "typing.Dict",
        "tools.theme_resolver.ThemeResolver",
        "typing.Optional",
        "tools.theme_resolver.ColorTransformation",
        "pathlib.Path",
        "tools.theme_resolver.ThemeColor",
        "typing.List"
      ],
      "class_methods": {
        "ThemeColor": [
          "hex_value"
        ],
        "ThemeFont": [],
        "ThemeDefinition": [],
        "ColorTransformation": [],
        "ThemeValidationError": [],
        "ThemeResolver": [
          "resolve_theme_color",
          "__init__",
          "apply_color_transformation",
          "extract_theme_from_ooxml_file",
          "validate_theme_compatibility"
        ],
        "TestThemeResolver": [
          "test_theme_resolver_with_custom_config",
          "test_theme_resolver_initialization"
        ],
        "TestThemeColor": [
          "test_theme_color_types",
          "test_theme_color_basic_creation",
          "test_theme_color_with_transformations"
        ],
        "TestThemeFont": [
          "test_theme_font_basic_creation",
          "test_theme_font_with_fallbacks"
        ],
        "TestThemeDefinition": [
          "test_theme_definition_with_colors_and_fonts",
          "test_theme_definition_creation"
        ],
        "TestColorTransformation": [
          "test_color_transformation_creation",
          "test_color_transformation_types"
        ],
        "TestThemeColorResolution": [
          "test_resolve_theme_color_basic",
          "test_resolve_text_and_background_colors",
          "test_resolve_theme_color_with_overrides",
          "test_resolve_all_accent_colors"
        ],
        "TestColorTransformations": [
          "test_transformation_value_ranges",
          "test_apply_luminance_transformations",
          "test_apply_tint_transformation",
          "test_apply_shade_transformation"
        ],
        "TestOOXMLThemeExtraction": [
          "test_extract_theme_from_different_formats",
          "test_extract_theme_from_ooxml_file",
          "create_mock_ooxml_file",
          "test_extract_theme_from_nonexistent_file"
        ],
        "TestThemeCompatibilityValidation": [
          "test_validate_theme_compatibility_excel",
          "test_validate_theme_compatibility_powerpoint",
          "test_validate_theme_compatibility_word",
          "test_validate_theme_compatibility_invalid_format"
        ],
        "TestThemeErrorHandlingAndEdgeCases": [
          "test_resolve_invalid_color_slot",
          "test_apply_invalid_transformation",
          "test_extreme_transformation_values",
          "test_malformed_color_values"
        ]
      }
    },
    {
      "file": "tests/test_token_integration_layer.py",
      "total_methods": 18,
      "test_methods": 15,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "TestTokenIntegrationLayer.post_hook",
        "TestTokenIntegrationLayer.pre_hook"
      ],
      "imports": [
        "tools.token_integration_layer.TokenIntegrationLayer",
        "unittest.mock.MagicMock",
        "tools.token_integration_layer.integrate_tokens_with_processor",
        "unittest",
        "unittest.mock.Mock",
        "lxml.etree",
        "tools.token_integration_layer.TokenContext",
        "tools.token_integration_layer.TokenScope",
        "tools.token_integration_layer.TokenResolutionResult",
        "unittest.mock.patch",
        "tools.token_integration_layer.create_default_integration_layer"
      ],
      "class_methods": {
        "TestTokenIntegrationLayer": [
          "test_resolution_statistics",
          "test_resolution_hooks",
          "test_explicit_token_resolution",
          "test_template_type_specific_resolution",
          "setUp",
          "test_token_registration_and_retrieval",
          "test_patch_token_resolution",
          "test_variable_token_resolution",
          "test_emu_token_resolution",
          "post_hook",
          "pre_hook",
          "test_formula_token_resolution",
          "test_nested_data_structure_resolution",
          "test_resolution_cache_functionality",
          "test_string_token_resolution_mixed",
          "test_processor_integration"
        ],
        "TestConvenienceFunctions": [
          "test_create_default_integration_layer",
          "test_integrate_tokens_with_processor"
        ]
      }
    },
    {
      "file": "tests/test_token_integration_layer_comprehensive.py",
      "total_methods": 47,
      "test_methods": 37,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [
        "TestPerformanceAndScaling.integration_worker",
        "TokenIntegrationLayer.convert_format"
      ],
      "imports": [
        "tools.token_integration_layer.FormatConverter",
        "unittest.mock.Mock",
        "tests.mocks.get_mock",
        "tools.token_integration_layer.ValidationResult",
        "unittest.mock.patch",
        "tests.fixtures.mock_ooxml_processor",
        "typing.List",
        "tools.token_integration_layer.TokenMapping",
        "unittest.mock.MagicMock",
        "tests.fixtures.sample_design_tokens",
        "tests.mocks.create_standard_mocks",
        "threading",
        "json",
        "typing.Dict",
        "tests.fixtures.temp_dir",
        "pytest",
        "tools.token_integration_layer.IntegrationError",
        "pathlib.Path",
        "tools.token_integration_layer.TokenIntegrationLayer",
        "typing.Any",
        "time"
      ],
      "class_methods": {
        "TokenIntegrationLayer": [
          "__init__",
          "validate_integration",
          "convert_format",
          "integrate_tokens"
        ],
        "IntegrationError": [],
        "TokenMapping": [
          "__init__",
          "apply_mapping"
        ],
        "FormatConverter": [
          "convert",
          "__init__"
        ],
        "ValidationResult": [
          "__init__"
        ],
        "TestTokenIntegrationLayer": [
          "test_initialization_with_config",
          "test_deep_merge_strategy",
          "test_single_source_integration",
          "test_shallow_merge_strategy",
          "test_integration_error_handling",
          "test_initialization_default",
          "test_integration_with_conflicts",
          "test_multiple_source_integration"
        ],
        "TestTokenMapping": [
          "test_nested_mapping",
          "test_simple_token_mapping",
          "test_mapping_with_rules",
          "test_pattern_based_mapping",
          "test_conditional_mapping",
          "test_mapping_initialization"
        ],
        "TestFormatConverter": [
          "test_batch_conversion",
          "test_json_to_scss_conversion",
          "test_conversion_with_options",
          "test_conversion_error_handling",
          "test_converter_initialization",
          "test_json_to_js_conversion",
          "test_json_to_css_conversion",
          "test_css_to_json_conversion"
        ],
        "TestValidationResult": [
          "test_validation_result_serialization",
          "test_failed_validation_result",
          "test_validation_result_creation"
        ],
        "TestIntegrationWorkflows": [
          "test_design_system_integration",
          "test_multi_brand_integration",
          "test_version_controlled_integration",
          "test_real_time_integration",
          "test_platform_specific_integration"
        ],
        "TestPerformanceAndScaling": [
          "test_concurrent_integration",
          "test_memory_efficient_integration",
          "integration_worker",
          "test_large_token_set_integration"
        ],
        "TestEdgeCasesAndErrorHandling": [
          "test_circular_reference_handling",
          "test_invalid_priority_handling",
          "test_unicode_token_integration",
          "test_empty_source_handling"
        ]
      }
    },
    {
      "file": "tests/test_token_parser.py",
      "total_methods": 21,
      "test_methods": 14,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "enum.Enum",
        "dataclasses.dataclass",
        "re",
        "pytest",
        "typing.Dict",
        "typing.Optional",
        "time",
        "typing.List"
      ],
      "class_methods": {
        "TokenType": [],
        "TokenScope": [],
        "TokenError": [],
        "ParsedToken": [
          "__post_init__"
        ],
        "TokenParser": [
          "validate_types",
          "has_cycle",
          "__init__",
          "detect_circular_dependencies",
          "parse",
          "_parse_single_token"
        ],
        "TestTokenParser": [
          "test_invalid_identifier_format",
          "test_theme_reference_tokens",
          "test_token_hierarchy_precedence",
          "test_invalid_token_scope",
          "test_complex_content_parsing",
          "test_error_line_column_reporting",
          "test_circular_dependency_detection",
          "test_malformed_token_recovery",
          "test_type_validation",
          "test_missing_type_definition",
          "test_valid_token_scopes",
          "test_basic_token_parsing",
          "test_complex_dependency_chain",
          "test_performance_with_large_token_set"
        ]
      }
    },
    {
      "file": "tests/test_token_parser_comprehensive.py",
      "total_methods": 39,
      "test_methods": 31,
      "fixtures": 0,
      "helper_methods": 8,
      "unused_methods": [],
      "imports": [
        "tools.token_parser.TokenType",
        "tempfile",
        "sys",
        "unittest",
        "tools.token_parser.VariableToken",
        "tools.token_parser.TokenParser",
        "json",
        "os",
        "tools.token_parser.TokenError",
        "shutil",
        "tools.token_parser.load_token_definitions",
        "tools.token_parser.TokenScope",
        "pathlib.Path"
      ],
      "class_methods": {
        "TestTokenEnums": [
          "test_token_type_enum",
          "test_token_scope_enum"
        ],
        "TestTokenError": [
          "test_token_error_defaults",
          "test_token_error_creation"
        ],
        "TestVariableToken": [
          "test_variable_token_defaults",
          "test_variable_token_creation",
          "test_variable_token_with_type"
        ],
        "TestTokenParserBasic": [
          "test_parse_simple_token",
          "test_parse_no_tokens",
          "test_parse_multiple_tokens",
          "setUp",
          "test_parse_empty_content",
          "test_parser_initialization",
          "test_parse_none_content"
        ],
        "TestTokenParserPatterns": [
          "setUp",
          "test_parse_core_scope_token",
          "test_parse_theme_scope_token",
          "test_parse_org_scope_token",
          "test_parse_user_scope_token"
        ],
        "TestTokenParserValidation": [
          "setUp",
          "test_token_position_tracking",
          "test_validate_valid_tokens",
          "test_validate_invalid_tokens"
        ],
        "TestTokenParserEdgeCases": [
          "setUp",
          "test_parse_malformed_tokens",
          "test_parse_nested_braces",
          "test_parse_unicode_content",
          "test_parse_very_long_content"
        ],
        "TestTokenParserIntegration": [
          "setUp",
          "test_parse_mixed_token_types",
          "test_error_collection",
          "test_parse_real_ooxml_content"
        ],
        "TestTokenDefinitionsLoading": [
          "setUp",
          "test_load_valid_definitions",
          "tearDown",
          "test_load_nonexistent_file"
        ],
        "TestTokenParserPerformance": [
          "setUp",
          "test_parse_deeply_nested_structure",
          "test_parse_large_document"
        ]
      }
    },
    {
      "file": "tests/test_token_parser_performance.py",
      "total_methods": 13,
      "test_methods": 10,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "sys",
        "random",
        "tracemalloc",
        "pytest",
        "typing.Dict",
        "os",
        "time"
      ],
      "class_methods": {
        "TestTokenParserPerformance": [
          "test_circular_dependency_detection_performance",
          "test_validation_report_generation_performance",
          "test_error_reporting_performance",
          "test_hierarchy_resolution_performance",
          "test_validation_with_large_definitions",
          "generate_variable_definitions",
          "test_parse_5000_tokens_performance",
          "_generate_default_value",
          "generate_large_token_content",
          "test_memory_usage_with_large_token_set",
          "test_parse_1000_tokens_performance"
        ],
        "TestTokenParserStressTests": [
          "test_deeply_nested_dependencies",
          "test_extremely_long_token_identifiers"
        ]
      }
    },
    {
      "file": "tests/test_transaction_pipeline.py",
      "total_methods": 37,
      "test_methods": 31,
      "fixtures": 0,
      "helper_methods": 6,
      "unused_methods": [],
      "imports": [
        "unittest.mock.Mock",
        "tools.transaction_pipeline.create_transaction_pipeline",
        "tools.transaction_pipeline.TransactionState",
        "unittest.mock.patch",
        "unittest.mock.MagicMock",
        "tempfile",
        "tools.transaction_pipeline.OperationType",
        "tools.multi_format_ooxml_handler.OOXMLFormat",
        "concurrent.futures.Future",
        "tools.transaction_pipeline.TransactionResult",
        "tools.transaction_pipeline.TransactionPipeline",
        "unittest",
        "tools.transaction_pipeline.atomic_ooxml_operation",
        "tools.handlers.types.OOXMLFormat",
        "pathlib.Path",
        "tools.transaction_pipeline.TransactionOperation",
        "tools.transaction_pipeline.TransactionSnapshot",
        "tools.multi_format_ooxml_handler.ProcessingResult",
        "shutil",
        "tools.transaction_pipeline.Transaction",
        "time"
      ],
      "class_methods": {
        "TestTransactionState": [
          "test_transaction_states"
        ],
        "TestOperationType": [
          "test_operation_types"
        ],
        "TestTransactionOperation": [
          "test_operation_creation"
        ],
        "TestTransactionSnapshot": [
          "test_snapshot_creation"
        ],
        "TestTransactionPipeline": [
          "test_create_snapshot_nonexistent_files",
          "tearDown",
          "test_restore_snapshot",
          "setUp",
          "test_pipeline_initialization",
          "test_cleanup_old_snapshots",
          "test_cleanup_snapshot",
          "test_performance_statistics",
          "test_create_snapshot_with_files"
        ],
        "TestTransaction": [
          "test_commit_invalid_state",
          "tearDown",
          "setUp",
          "test_prepare_failure",
          "test_add_operation_invalid_state",
          "test_execute_operation_success",
          "test_commit_success",
          "test_rollback_success",
          "test_transaction_with_explicit_id",
          "test_execute_operation_failure",
          "test_transaction_context_manager",
          "test_rollback_invalid_state",
          "test_add_operation",
          "test_prepare_success"
        ],
        "TestOperationExecution": [
          "test_execute_validate_structure",
          "tearDown",
          "setUp",
          "test_execute_register_tokens",
          "test_execute_backup_state",
          "test_execute_process_template"
        ],
        "TestConvenienceFunctions": [
          "test_create_transaction_pipeline",
          "test_atomic_ooxml_operation_with_pipeline",
          "test_atomic_ooxml_operation"
        ],
        "TestTransactionResult": [
          "test_transaction_result_creation"
        ]
      }
    },
    {
      "file": "tests/test_transaction_pipeline_comprehensive.py",
      "total_methods": 55,
      "test_methods": 36,
      "fixtures": 0,
      "helper_methods": 18,
      "unused_methods": [
        "TestTransactionPerformance.create_and_execute_transaction"
      ],
      "imports": [
        "unittest.mock.Mock",
        "tools.transaction_pipeline.create_transaction_pipeline",
        "tools.transaction_pipeline.TransactionState",
        "unittest.mock.patch",
        "tempfile",
        "unittest.mock.MagicMock",
        "dataclasses.dataclass",
        "tools.transaction_pipeline.OperationType",
        "threading",
        "json",
        "tools.transaction_pipeline.TransactionResult",
        "sys",
        "tools.transaction_pipeline.TransactionPipeline",
        "unittest",
        "tools.transaction_pipeline.atomic_ooxml_operation",
        "pathlib.Path",
        "tools.transaction_pipeline.TransactionOperation",
        "tools.transaction_pipeline.TransactionSnapshot",
        "shutil",
        "concurrent.futures",
        "tools.transaction_pipeline.Transaction",
        "os",
        "time"
      ],
      "class_methods": {
        "TestTransactionEnums": [
          "test_transaction_state_enum",
          "test_operation_type_enum"
        ],
        "TestTransactionOperation": [
          "test_transaction_operation_defaults",
          "test_transaction_operation_creation"
        ],
        "TestTransactionSnapshot": [
          "test_transaction_snapshot_creation"
        ],
        "TestTransactionResult": [
          "test_transaction_result_success",
          "test_transaction_result_failure"
        ],
        "TestTransactionPipelineBasic": [
          "test_create_transaction",
          "tearDown",
          "setUp",
          "test_pipeline_initialization",
          "test_get_transaction",
          "test_pipeline_initialization_with_params"
        ],
        "TestTransaction": [
          "test_transaction_execute",
          "tearDown",
          "test_transaction_begin",
          "test_transaction_rollback",
          "setUp",
          "test_transaction_add_operation",
          "test_transaction_initialization",
          "test_transaction_commit"
        ],
        "TestTransactionOperations": [
          "setUp",
          "test_process_template_operation",
          "tearDown",
          "test_apply_patches_operation"
        ],
        "TestTransactionSnapshots": [
          "setUp",
          "test_create_snapshot",
          "test_restore_from_snapshot"
        ],
        "TestConcurrentTransactions": [
          "setUp",
          "test_transaction_isolation",
          "test_multiple_concurrent_transactions"
        ],
        "TestTransactionErrorHandling": [
          "setUp",
          "test_rollback_on_failure",
          "test_transaction_failure_handling"
        ],
        "TestTransactionPipelineConfiguration": [
          "test_create_transaction_pipeline_factory",
          "test_create_pipeline_with_config"
        ],
        "TestAtomicOOXMLOperation": [
          "setUp",
          "test_atomic_operation_decorator",
          "sample_operation",
          "test_atomic_operation_context_manager"
        ],
        "TestTransactionAuditLog": [
          "setUp",
          "test_audit_log_persistence",
          "tearDown",
          "test_transaction_audit_trail"
        ],
        "TestTransactionPerformance": [
          "setUp",
          "create_and_execute_transaction",
          "test_concurrent_transaction_performance",
          "test_transaction_timing"
        ],
        "TestTransactionRecovery": [
          "setUp",
          "tearDown",
          "test_transaction_recovery_from_crash",
          "test_cleanup_failed_transactions"
        ],
        "TestTransactionIntegration": [
          "setUp",
          "tearDown",
          "test_integration_with_ooxml_handler"
        ]
      }
    },
    {
      "file": "tests/test_variable_resolver_comprehensive.py",
      "total_methods": 31,
      "test_methods": 23,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "ResolvedVariable.is_ooxml_native"
      ],
      "imports": [
        "tools.token_parser.TokenType",
        "tools.variable_resolver.ResolverContext",
        "dataclasses.field",
        "tools.variable_resolver.ResolutionError",
        "typing.List",
        "tempfile",
        "dataclasses.dataclass",
        "tools.variable_resolver.CircularDependencyError",
        "tools.variable_resolver.VariableConflict",
        "json",
        "typing.Dict",
        "typing.Optional",
        "tools.variable_resolver.VariableResolver",
        "pytest",
        "tools.token_parser.TokenScope",
        "pathlib.Path",
        "tools.variable_resolver.ResolvedVariable",
        "enum.Enum",
        "typing.Any"
      ],
      "class_methods": {
        "TokenType": [],
        "TokenScope": [],
        "ResolvedVariable": [
          "is_ooxml_native"
        ],
        "ResolverContext": [],
        "ResolutionError": [],
        "CircularDependencyError": [],
        "VariableConflict": [],
        "VariableResolver": [
          "resolve_all_variables",
          "load_ooxml_extensions",
          "load_json_tokens",
          "__init__",
          "resolve_variable"
        ],
        "TestVariableResolver": [
          "test_resolver_initialization_custom",
          "test_resolver_initialization_default",
          "test_resolver_context_validation"
        ],
        "TestResolvedVariable": [
          "test_resolved_variable_ooxml_native",
          "test_resolved_variable_dependencies",
          "test_resolved_variable_creation"
        ],
        "TestVariableResolution": [
          "test_single_variable_resolution",
          "test_variable_resolution_with_dependencies",
          "test_resolve_all_variables",
          "create_test_resolver"
        ],
        "TestJsonTokenLoading": [
          "test_load_invalid_json_tokens",
          "create_test_token_file",
          "test_load_json_tokens_multiple_files",
          "test_load_json_tokens_single_file"
        ],
        "TestOOXMLExtensionLoading": [
          "test_ooxml_extension_xpath_mapping",
          "test_load_ooxml_extensions_basic",
          "test_load_ooxml_extensions_disabled"
        ],
        "TestVariableResolutionIntegration": [
          "test_cross_format_variable_resolution",
          "test_json_and_ooxml_resolution_integration",
          "test_hierarchy_precedence_resolution"
        ],
        "TestErrorHandlingAndEdgeCases": [
          "test_malformed_xpath_handling",
          "test_circular_dependency_detection",
          "test_variable_conflict_resolution",
          "test_missing_variable_resolution",
          "test_large_variable_set_performance"
        ]
      }
    },
    {
      "file": "tests/test_variable_substitution.py",
      "total_methods": 28,
      "test_methods": 24,
      "fixtures": 0,
      "helper_methods": 1,
      "unused_methods": [
        "TestProgressReportingAndCancellation.cancel_after_delay",
        "TestProgressReportingAndCancellation.progress_callback",
        "TestStressAndPerformance.process_batch"
      ],
      "imports": [
        "tempfile",
        "tools.variable_substitution.VariableSubstitutionPipeline",
        "sys",
        "tools.substitution.types.ValidationCheckpoint",
        "unittest",
        "tools.substitution.types.SubstitutionResult",
        "xml.etree.ElementTree",
        "threading",
        "tools.substitution.types.SubstitutionProgress",
        "json",
        "os",
        "tools.substitution.types.SubstitutionError",
        "tools.substitution.types.TransactionContext",
        "concurrent.futures",
        "pathlib.Path",
        "time",
        "tools.substitution.types.ProgressReporter",
        "psutil"
      ],
      "class_methods": {
        "TestVariableSubstitutionPipeline": [
          "setUp"
        ],
        "TestEndToEndSubstitutionWorkflows": [
          "test_single_document_substitution_workflow",
          "test_multi_document_batch_substitution",
          "test_conditional_variable_substitution",
          "test_hierarchical_variable_precedence"
        ],
        "TestAtomicOperationsAndRollback": [
          "test_transaction_commit_on_success",
          "test_partial_failure_recovery",
          "test_transaction_rollback_on_error",
          "test_backup_and_restore_mechanism"
        ],
        "TestProgressReportingAndCancellation": [
          "test_progress_reporting_batch_processing",
          "cancel_after_delay",
          "progress_callback",
          "test_timeout_mechanism",
          "test_cancellation_mechanism",
          "test_progress_reporting_single_document"
        ],
        "TestValidationCheckpoints": [
          "test_comprehensive_validation_pipeline",
          "test_post_substitution_validation",
          "test_xpath_validation_checkpoint",
          "test_variable_validation_checkpoint",
          "test_pre_substitution_validation"
        ],
        "TestStressAndPerformance": [
          "test_large_document_processing",
          "test_concurrent_batch_processing",
          "test_memory_efficiency",
          "process_batch"
        ],
        "TestDocumentIntegrity": [
          "test_xml_structure_preservation",
          "test_namespace_handling",
          "test_attribute_preservation",
          "test_comment_and_processing_instruction_preservation"
        ]
      }
    },
    {
      "file": "tests/test_variable_substitution_modern.py",
      "total_methods": 18,
      "test_methods": 14,
      "fixtures": 0,
      "helper_methods": 4,
      "unused_methods": [],
      "imports": [
        "tempfile",
        "unittest",
        "tools.substitution.types.SubstitutionResult",
        "shutil",
        "tools.substitution.pipeline.SubstitutionPipeline",
        "json",
        "tools.substitution.types.SubstitutionError",
        "tools.substitution.types.TransactionContext",
        "tools.substitution.types.ValidationCheckpointType",
        "pathlib.Path",
        "tools.substitution.types.SubstitutionStage"
      ],
      "class_methods": {
        "TestSubstitutionTypes": [
          "test_substitution_result_with_errors",
          "test_substitution_stages",
          "test_validation_checkpoint_types",
          "test_substitution_result_creation"
        ],
        "TestSubstitutionPipeline": [
          "test_basic_variable_substitution",
          "tearDown",
          "setUp",
          "test_pipeline_initialization",
          "test_transaction_support",
          "test_pipeline_statistics",
          "test_pipeline_configuration"
        ],
        "TestSubstitutionOperations": [
          "setUp",
          "test_error_handling",
          "test_variable_validation",
          "test_progress_reporting"
        ],
        "TestPipelineIntegration": [
          "setUp",
          "test_configuration_options",
          "test_pipeline_interface_compatibility"
        ]
      }
    },
    {
      "file": "tests/test_w3c_dtcg_schema_validation.py",
      "total_methods": 35,
      "test_methods": 22,
      "fixtures": 0,
      "helper_methods": 0,
      "unused_methods": [],
      "imports": [
        "dataclasses.dataclass",
        "tools.w3c_dtcg_validator.W3CDTCGValidator",
        "typing.Any",
        "pytest",
        "json",
        "typing.Dict",
        "jsonschema",
        "typing.Optional",
        "tools.extension_schema_validator.ExtensionSchemaValidator",
        "pathlib.Path",
        "typing.List",
        "jsonschema.ValidationError"
      ],
      "class_methods": {
        "TestW3CDTCGSchemaValidation": [
          "test_platform_compatibility_validation",
          "test_w3c_dtcg_alias_references",
          "_validate_legacy_token",
          "test_w3c_dtcg_with_extensions",
          "test_w3c_dtcg_composite_tokens",
          "test_hybrid_format_support",
          "test_w3c_dtcg_basic_token_structure",
          "test_w3c_dtcg_conditional_platform_values",
          "test_stylestack_extensions_validation",
          "_validate_brand_compliance",
          "test_w3c_dtcg_typography_tokens",
          "test_w3c_dtcg_mathematical_expressions",
          "test_backward_compatibility_stylestack_format",
          "test_invalid_w3c_dtcg_tokens",
          "_validate_accessibility_compliance",
          "test_accessibility_compliance_validation",
          "test_circular_reference_detection",
          "test_brand_rule_enforcement",
          "_validate_expression",
          "_validate_platform_compatibility",
          "test_w3c_dtcg_dimension_tokens",
          "_validate_emu_precision",
          "_validate_hybrid_token",
          "test_emu_precision_validation",
          "_detect_circular_references",
          "test_mathematical_expression_validation",
          "_validate_w3c_token"
        ],
        "TestSchemaEvolutionCompatibility": [
          "test_schema_conflict_detection",
          "_detect_format_conflicts",
          "test_automatic_schema_migration",
          "test_schema_version_detection",
          "_validate_dual_format",
          "_detect_schema_version",
          "_migrate_to_w3c_dtcg",
          "test_dual_format_validation"
        ]
      }
    },
    {
      "file": "tests/unit/test_design_token_extractor.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestDesignTokenExtractor.setup_method",
        "TestDesignTokenExtractor.teardown_method"
      ],
      "imports": [
        "design_token_extractor.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestDesignTokenExtractor": [
          "teardown_method",
          "setup_method",
          "test_module_imports",
          "test_module_performance_baseline"
        ],
        "TestDesignTokenExtractorIntegration": [
          "test_integration_interfaces"
        ]
      }
    },
    {
      "file": "tests/unit/test_json_patch_parser.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestJsonPatchParser.teardown_method",
        "TestJsonPatchParser.setup_method"
      ],
      "imports": [
        "json_patch_parser.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestJsonPatchParser": [
          "teardown_method",
          "setup_method",
          "test_module_imports",
          "test_module_performance_baseline"
        ],
        "TestJsonPatchParserIntegration": [
          "test_integration_interfaces"
        ]
      }
    },
    {
      "file": "tests/unit/test_ooxml_analyzer.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestOoxmlAnalyzer.setup_method",
        "TestOoxmlAnalyzer.teardown_method"
      ],
      "imports": [
        "pytest",
        "pathlib.Path",
        "ooxml_analyzer.*",
        "sys"
      ],
      "class_methods": {
        "TestOoxmlAnalyzer": [
          "teardown_method",
          "setup_method",
          "test_module_imports",
          "test_module_performance_baseline"
        ],
        "TestOoxmlAnalyzerIntegration": [
          "test_integration_interfaces"
        ]
      }
    },
    {
      "file": "tests/unit/test_optimized_batch_processor.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestOptimizedBatchProcessor.teardown_method",
        "TestOptimizedBatchProcessor.setup_method"
      ],
      "imports": [
        "optimized_batch_processor.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestOptimizedBatchProcessor": [
          "teardown_method",
          "setup_method",
          "test_module_imports",
          "test_module_performance_baseline"
        ],
        "TestOptimizedBatchProcessorIntegration": [
          "test_integration_interfaces"
        ]
      }
    },
    {
      "file": "tests/unit/test_token_resolver.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestTokenResolver.setup_method",
        "TestTokenResolver.teardown_method"
      ],
      "imports": [
        "token_resolver.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestTokenResolver": [
          "teardown_method",
          "setup_method",
          "test_module_imports",
          "test_module_performance_baseline"
        ],
        "TestTokenResolverIntegration": [
          "test_integration_interfaces"
        ]
      }
    },
    {
      "file": "tests/unit/test_variable_resolver.py",
      "total_methods": 5,
      "test_methods": 3,
      "fixtures": 0,
      "helper_methods": 2,
      "unused_methods": [
        "TestVariableResolver.teardown_method",
        "TestVariableResolver.setup_method"
      ],
      "imports": [
        "variable_resolver.*",
        "pytest",
        "pathlib.Path",
        "sys"
      ],
      "class_methods": {
        "TestVariableResolver": [
          "teardown_method",
          "setup_method",
          "test_module_imports",
          "test_module_performance_baseline"
        ],
        "TestVariableResolverIntegration": [
          "test_integration_interfaces"
        ]
      }
    }
  ],
  "duplicates": {}
}